{
  "currentMode": "website",
  "initialIdea": "Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)",
  "selectedModel": "gemini-2.5-pro",
  "selectedOriginalTemperatureIndices": [
    0,
    2
  ],
  "pipelinesState": [
    {
      "id": 0,
      "originalTemperatureIndex": 0,
      "temperature": 0,
      "modelName": "gemini-2.5-pro",
      "iterations": [
        {
          "iterationNumber": 0,
          "title": "Initial Gen, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent AI-Generated HTML (CRITICAL: Assume this HTML is flawed, incomplete, and requires substantial improvement):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: 1fr 380px;\n                max-height: calc(100vh - 150px); /* Prevent vertical overflow */\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group label {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            outline: none;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle & Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as line segments and their connection to the hyperbolic functions on the unit hyperbola (xÂ² - yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc>An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Corresponding hyperbolic values are also shown.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Area (Gudermannian) -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Lines -->\n                <g id=\"trig-lines\">\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\">\n                <label for=\"angle-slider\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\">\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt>p = ln(sec+tan)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>Rectified and Hardened by CodeSentinel Omega.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD = '';\n                // Right branch (x > 0), top half\n                for (let i = 0; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (i === 0) { pathD += `M ${x} ${-y} `; } \n                    else { pathD += `L ${x} ${-y} `; }\n                }\n                // Right branch, bottom half\n                for (let i = steps; i >= 0; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = -Math.sinh(p);\n                    if (i !== steps) { pathD += `L ${x} ${-y} `; }\n                }\n                return pathD;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (p <= 0) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : '-â';\n                return val.toFixed(3);\n            }\n\n            function updateVisualization() {\n                const deg = parseFloat(slider.value);\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) { // Poles at 90, 270 deg\n                    c = 0;\n                    t = s > 0 ? Infinity : -Infinity;\n                    sec = Infinity;\n                    cot = 0;\n                    csc = 1 / s;\n                } else if (Math.abs(s) < EPSILON) { // Poles at 0, 180 deg\n                    s = 0;\n                    t = 0;\n                    sec = 1 / c;\n                    cot = c > 0 ? Infinity : -Infinity;\n                    csc = Infinity;\n                } else {\n                    t = s / c;\n                    sec = 1 / c;\n                    cot = c / s;\n                    csc = 1 / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n\n                // Tangent and Secant\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineTan.setAttribute('x2', 1);\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n\n                const secEndPointX = isFinite(sec) ? sec : Math.sign(c) * SVG_BOUNDS;\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', secEndPointX);\n                elements.lineSec.setAttribute('y2', 0);\n\n                // Cotangent and Cosecant\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCot.setAttribute('y2', -1);\n\n                const cscEndPointY = isFinite(csc) ? csc : Math.sign(s) * SVG_BOUNDS;\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('x2', 0);\n                elements.lineCsc.setAttribute('y2', -cscEndPointY);\n\n                // Angle Arc\n                const largeArcFlag = deg > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 1 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t); // Gudermannian inverse: acosh(sec) or asinh(tan)\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineCosh.setAttribute('y1', 0);\n                    elements.lineCosh.setAttribute('x2', 0);\n                    elements.lineCosh.setAttribute('y2', 0);\n\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y1', 0);\n                    elements.lineSinh.setAttribute('x2', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.hyperbolicElements.style.display = 'block';\n                } else {\n                    elements.hyperbolicElements.style.display = 'none';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${deg.toFixed(1)}Â° / ${(rad).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${deg.toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            // --- INITIALIZATION ---\n            function initialize() {\n                // Generate the static hyperbola path once\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n\n                slider.addEventListener('input', updateVisualization);\n                updateVisualization();\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task is to analyze the current HTML thoroughly. Propose **exactly TWO (2)** concrete, actionable next steps. PRIORITIZE suggestions that fix, complete, or significantly refine existing (even partially implemented) features before suggesting entirely new functionalities. Ensure your suggestions are detailed and strategically sound. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nProvided AI-Generated HTML (CRITICAL WARNING: ASSUME THIS CODE IS SEVERELY FLAWED AND UNTRUSTWORTHY):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: 1fr 380px;\n                grid-template-rows: 1fr;\n                height: calc(100vh - 200px); /* Adjust based on header/footer height */\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 70vh;\n            font-family: var(--font-family-mono);\n            font-size: 0.1px; /* Fine-tune text size inside SVG */\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group label {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        /* Custom Slider */\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n        }\n        \n        footer a:hover {\n            text-decoration: underline;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle & Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as line segments and their connection to the hyperbolic functions on the unit hyperbola (xÂ² - yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc>An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Corresponding hyperbolic values are also shown.</desc>\n                \n                <!-- Definitions for markers, etc. -->\n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" />\n                    <line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" />\n                    <line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" d=\"M -2.2,2.009 M 2.2,2.009 C 1.5,0.5 1.5,-0.5 2.2,-2.009 M -2.2,-2.009 C -1.5,-0.5 -1.5,0.5 -2.2,2.009\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Area (Gudermannian) -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" cx=\"1\" cy=\"0\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\" x=\"0.3\" y=\"-0.1\">Î¸</text>\n\n                <!-- Trigonometric Lines -->\n                <g id=\"trig-lines\">\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                    <line id=\"line-cos\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-tan\" x1=\"1\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <line id=\"line-cot\" x1=\"0\" y1=\"1\" x2=\"0\" y2=\"1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" cx=\"1\" cy=\"0\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <section class=\"controls-and-info\">\n            <div class=\"control-group\">\n                <label for=\"angle-slider\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"359.9\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\">\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</dt>\n                        <dd id=\"val-sin\">0.707</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</dt>\n                        <dd id=\"val-cos\">0.707</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</dt>\n                        <dd id=\"val-tan\">1.000</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</dt>\n                        <dd id=\"val-sec\">1.414</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</dt>\n                        <dd id=\"val-csc\">1.414</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</dt>\n                        <dd id=\"val-cot\">1.000</dd>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl class=\"info-item\">\n                        <dt>p = ln(sec+tan)</dt>\n                        <dd id=\"val-p\">0.881</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</dt>\n                        <dd id=\"val-sinh\">1.000</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</dt>\n                        <dd id=\"val-cosh\">1.414</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt>tanh(p)</dt>\n                        <dd id=\"val-tanh\">0.707</dd>\n                    </dl>\n                    <dl class=\"info-item\">\n                        <dt>Area (p/2)</dt>\n                        <dd id=\"val-area\">0.441</dd>\n                    </dl>\n                </div>\n            </div>\n        </section>\n    </main>\n\n    <footer class=\"container\">\n        <p>Crafted by CodeCrafter Apex. A demonstration of advanced frontend engineering.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            function updateVisualization() {\n                const deg = parseFloat(slider.value);\n                // Clamp angle to avoid infinities at poles (90, 270 deg)\n                const poleMargin = 0.05;\n                const quadrant = Math.floor(deg / 90);\n                let clampedDeg = deg;\n                if (deg % 90 === 0 && (quadrant === 1 || quadrant === 3)) {\n                    clampedDeg = deg + (deg > 180 ? -poleMargin : poleMargin);\n                } else {\n                    const proximity = deg % 90;\n                    if (proximity < poleMargin) {\n                        clampedDeg = Math.floor(deg / 90) * 90 + poleMargin;\n                    } else if (proximity > 90 - poleMargin) {\n                        clampedDeg = Math.ceil(deg / 90) * 90 - poleMargin;\n                    }\n                }\n                \n                const rad = clampedDeg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                const s = Math.sin(rad);\n                const c = Math.cos(rad);\n                // Handle near-zero values for tan/cot stability\n                const epsilon = 1e-10;\n                const t = Math.abs(c) < epsilon ? (s > 0 ? Infinity : -Infinity) : s / c;\n                const cot = Math.abs(s) < epsilon ? (c > 0 ? Infinity : -Infinity) : c / s;\n                const sec = Math.abs(c) < epsilon ? Infinity : 1 / c;\n                const csc = Math.abs(s) < epsilon ? Infinity : 1 / s;\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                // Radius\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                // Sin and Cos\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n\n                // Tan and Sec\n                const Tx = 1;\n                const Ty = -t;\n                elements.lineTan.setAttribute('x1', Tx);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineTan.setAttribute('x2', Tx);\n                elements.lineTan.setAttribute('y2', Ty);\n\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', Tx);\n                elements.lineSec.setAttribute('y2', Ty);\n\n                // Csc and Cot\n                const CotX = cot;\n                const CotY = -1;\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', CotY);\n                elements.lineCot.setAttribute('x2', CotX);\n                elements.lineCot.setAttribute('y2', CotY);\n\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('x2', CotX);\n                elements.lineCsc.setAttribute('y2', CotY);\n\n                // Angle Arc\n                const largeArcFlag = rad > Math.PI ? 1 : 0;\n                const arcPath = `M 0.3 0 A 0.3 0.3 0 ${largeArcFlag} 0 ${0.3 * c} ${-0.3 * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', 0.4 * c);\n                elements.angleLabel.setAttribute('y', -0.4 * s);\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = 0, sinh_p = 0, cosh_p = 1, tanh_p = 0;\n                // Gudermannian function is only defined for sec(Î¸) >= 1, i.e., -Ï/2 < Î¸ < Ï/2 and 3Ï/2 < Î¸ < 5Ï/2 etc.\n                if (sec >= 1) {\n                    p = Math.log(sec + t); // also acosh(sec) or asinh(t)\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p; // Inverted y-axis\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    elements.pointH.style.display = 'block';\n\n                    elements.lineCosh.setAttribute('x1', 0);\n                    elements.lineCosh.setAttribute('y1', 0);\n                    elements.lineCosh.setAttribute('x2', Hx);\n                    elements.lineCosh.setAttribute('y2', 0);\n                    elements.lineCosh.style.display = 'block';\n\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y1', 0);\n                    elements.lineSinh.setAttribute('x2', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    elements.lineSinh.style.display = 'block';\n                    \n                    // Hyperbolic area sector\n                    const areaPath = `M 0,0 L 1,0 A 1,1 0 0,0 ${Hx},${Hy} Z`;\n                    elements.hyperbolicArea.setAttribute('d', areaPath);\n                    elements.hyperbolicArea.style.display = 'block';\n\n                } else {\n                    // Hide hyperbolic elements when undefined\n                    elements.pointH.style.display = 'none';\n                    elements.lineCosh.style.display = 'none';\n                    elements.lineSinh.style.display = 'none';\n                    elements.hyperbolicArea.style.display = 'none';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                const format = (val) => isFinite(val) ? val.toFixed(3) : 'undef';\n                elements.angleDisplay.textContent = `${deg.toFixed(1)}Â° / ${(deg * Math.PI / 180).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${deg.toFixed(1)} degrees`);\n\n                elements.valSin.textContent = format(s);\n                elements.valCos.textContent = format(c);\n                elements.valTan.textContent = format(t);\n                elements.valSec.textContent = format(sec);\n                elements.valCsc.textContent = format(csc);\n                elements.valCot.textContent = format(cot);\n\n                elements.valP.textContent = sec >= 1 ? format(p) : 'N/A';\n                elements.valSinh.textContent = sec >= 1 ? format(sinh_p) : 'N/A';\n                elements.valCosh.textContent = sec >= 1 ? format(cosh_p) : 'N/A';\n                elements.valTanh.textContent = sec >= 1 ? format(tanh_p) : 'N/A';\n                elements.valArea.textContent = sec >= 1 ? format(p / 2) : 'N/A';\n            }\n\n            slider.addEventListener('input', updateVisualization);\n\n            // Initial render\n            updateVisualization();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour mission: Critically dissect and completely overhaul the provided HTML. Your goal is to transform it into a production-quality, fully functional, visually polished, and highly accessible webpage that accurately reflects the original idea. Fix ALL bugs, structural deficiencies, responsiveness calamities, visual aberrations, and accessibility violations. Enhance any existing or partially implemented features to ensure they are complete, robust, and intuitive. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_InitialGenerate": "Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\".\n\nTranslate this idea into a complete, standalone, production-quality HTML file. Adhere strictly to all directives in your system persona, especially regarding modern design, responsiveness, accessibility (WCAG 2.1 AA+), and embedding all CSS/JS. Your output MUST be only the HTML code, perfectly formed and ready to render.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: 1fr 380px;\n                max-height: calc(100vh - 150px); /* Prevent vertical overflow */\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group label {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            outline: none;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle & Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as line segments and their connection to the hyperbolic functions on the unit hyperbola (xÂ² - yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc>An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Corresponding hyperbolic values are also shown.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Area (Gudermannian) -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Lines -->\n                <g id=\"trig-lines\">\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\">\n                <label for=\"angle-slider\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\">\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt>p = ln(sec+tan)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>Rectified and Hardened by CodeSentinel Omega.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD = '';\n                // Right branch (x > 0), top half\n                for (let i = 0; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (i === 0) { pathD += `M ${x} ${-y} `; } \n                    else { pathD += `L ${x} ${-y} `; }\n                }\n                // Right branch, bottom half\n                for (let i = steps; i >= 0; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = -Math.sinh(p);\n                    if (i !== steps) { pathD += `L ${x} ${-y} `; }\n                }\n                return pathD;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (p <= 0) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : '-â';\n                return val.toFixed(3);\n            }\n\n            function updateVisualization() {\n                const deg = parseFloat(slider.value);\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) { // Poles at 90, 270 deg\n                    c = 0;\n                    t = s > 0 ? Infinity : -Infinity;\n                    sec = Infinity;\n                    cot = 0;\n                    csc = 1 / s;\n                } else if (Math.abs(s) < EPSILON) { // Poles at 0, 180 deg\n                    s = 0;\n                    t = 0;\n                    sec = 1 / c;\n                    cot = c > 0 ? Infinity : -Infinity;\n                    csc = Infinity;\n                } else {\n                    t = s / c;\n                    sec = 1 / c;\n                    cot = c / s;\n                    csc = 1 / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n\n                // Tangent and Secant\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineTan.setAttribute('x2', 1);\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n\n                const secEndPointX = isFinite(sec) ? sec : Math.sign(c) * SVG_BOUNDS;\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', secEndPointX);\n                elements.lineSec.setAttribute('y2', 0);\n\n                // Cotangent and Cosecant\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCot.setAttribute('y2', -1);\n\n                const cscEndPointY = isFinite(csc) ? csc : Math.sign(s) * SVG_BOUNDS;\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('x2', 0);\n                elements.lineCsc.setAttribute('y2', -cscEndPointY);\n\n                // Angle Arc\n                const largeArcFlag = deg > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 1 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t); // Gudermannian inverse: acosh(sec) or asinh(tan)\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineCosh.setAttribute('y1', 0);\n                    elements.lineCosh.setAttribute('x2', 0);\n                    elements.lineCosh.setAttribute('y2', 0);\n\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y1', 0);\n                    elements.lineSinh.setAttribute('x2', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.hyperbolicElements.style.display = 'block';\n                } else {\n                    elements.hyperbolicElements.style.display = 'none';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${deg.toFixed(1)}Â° / ${(rad).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${deg.toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            // --- INITIALIZATION ---\n            function initialize() {\n                // Generate the static hyperbola path once\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n\n                slider.addEventListener('input', updateVisualization);\n                updateVisualization();\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Complete the geometric visualization of all six trigonometric functions by drawing their defining right-angled triangles. Currently, functions like secant and cotangent are represented as isolated, non-standard lines. This should be corrected to show, for example, the tangent and secant as the perpendicular side and hypotenuse of the triangle formed by the origin, the point (1,0), and the point (1, tan(Î¸)). This change is critical for providing the correct geometric context.",
            "Implement smooth animations and explicit visual connectors to fulfill the core concept of linking circular and hyperbolic functions. Refactor the JavaScript update loop to use `requestAnimationFrame` for fluid transitions as the slider moves. Add dynamic visual aids, such as dashed projection lines, that explicitly connect the length of the `tan(Î¸)` line to the y-coordinate of the point on the hyperbola, and the length of the `sec(Î¸)` line to the x-coordinate, visually proving that `tan(Î¸) = sinh(p)` and `sec(Î¸) = cosh(p)`."
          ]
        },
        {
          "iterationNumber": 1,
          "title": "Refine 1: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as complete triangles and their connection to the hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn within their defining right-angled triangles. Dashed lines show the geometric connection between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <!-- Triangle for Cot/Csc -->\n                    <line id=\"line-cot-adj\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"-1\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Tan/Sec -->\n                    <line id=\"line-tan-adj\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Sin/Cos -->\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A visualization by <a href=\"https://github.com/coderaion\" target=\"_blank\" rel=\"noopener noreferrer\">CodeAuditor Maximus</a>.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                projectionLine: document.getElementById('projection-line'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n            };\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                // Sin/Cos Triangle\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n\n                // Tan/Sec Triangle\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n                elements.lineSec.setAttribute('y2', tanEndPointY);\n\n                // Cot/Csc Triangle\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCsc.setAttribute('x2', cotEndPointX);\n\n                // Angle Arc\n                const largeArcFlag = deg % 360 > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 0 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    \n                    // Projection line: connects end of tan line to point H, showing tan(Î¸) = sinh(p)\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n\n                    elements.hyperbolicElements.style.visibility = 'visible';\n                } else {\n                    elements.hyperbolicElements.style.visibility = 'hidden';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2*Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleSliderInput() {\n                state.targetDeg = parseFloat(slider.value);\n                startAnimation();\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                // Set fixed line coordinates that don't change\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', 1);\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('y2', -1);\n                elements.lineCosh.setAttribute('x2', 0);\n                elements.lineCosh.setAttribute('y2', 0);\n                elements.lineSinh.setAttribute('y1', 0);\n\n                slider.addEventListener('input', handleSliderInput);\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(240, 160, 96, 0.7);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: 1fr 380px;\n                max-height: calc(100vh - 150px); /* Prevent vertical overflow */\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group label {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            outline: none;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle & Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as complete triangles and their connection to the hyperbolic functions on the unit hyperbola (xÂ² - yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc>An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn within their defining right-angled triangles. Dashed lines show the connection to hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <!-- Projection Lines -->\n                    <line id=\"proj-tan-sinh\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                    <line id=\"proj-sec-cosh\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <!-- Triangle for Cot/Csc -->\n                    <line id=\"line-cot-adj\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"-1\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Tan/Sec -->\n                    <line id=\"line-tan-adj\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Sin/Cos -->\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\">\n                <label for=\"angle-slider\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\">\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt>p = ln(sec+tan)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>Integrated and Perfected by CodeIntegrator Elite.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                projTanSinh: document.getElementById('proj-tan-sinh'),\n                projSecCosh: document.getElementById('proj-sec-cosh'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n            };\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (p <= 0) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : '-â';\n                return val.toFixed(3);\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = Infinity; cot = 0; csc = 1 / s;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; cot = c > 0 ? Infinity : -Infinity; csc = Infinity;\n                } else {\n                    t = s / c; sec = 1 / c; cot = c / s; csc = 1 / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                // Sin/Cos Triangle\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n\n                // Tan/Sec Triangle\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineTan.setAttribute('x2', 1);\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', 1);\n                elements.lineSec.setAttribute('y2', tanEndPointY);\n\n                // Cot/Csc Triangle\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCot.setAttribute('y2', -1);\n\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('x2', cotEndPointX);\n                elements.lineCsc.setAttribute('y2', -1);\n\n                // Angle Arc\n                const largeArcFlag = deg > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 0 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineCosh.setAttribute('y1', 0);\n                    elements.lineCosh.setAttribute('x2', 0);\n                    elements.lineCosh.setAttribute('y2', 0);\n\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y1', 0);\n                    elements.lineSinh.setAttribute('x2', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    \n                    // Projection lines\n                    elements.projTanSinh.setAttribute('x1', 1);\n                    elements.projTanSinh.setAttribute('y1', Hy);\n                    elements.projTanSinh.setAttribute('x2', Hx);\n                    elements.projTanSinh.setAttribute('y2', Hy);\n\n                    elements.projSecCosh.setAttribute('x1', Hx);\n                    elements.projSecCosh.setAttribute('y1', 0);\n                    elements.projSecCosh.setAttribute('x2', Hx);\n                    elements.projSecCosh.setAttribute('y2', Hy);\n\n                    elements.hyperbolicElements.style.visibility = 'visible';\n                } else {\n                    elements.hyperbolicElements.style.visibility = 'hidden';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${deg.toFixed(1)}Â° / ${(rad).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${deg.toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleSliderInput() {\n                state.targetDeg = parseFloat(slider.value);\n                startAnimation();\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                slider.addEventListener('input', handleSliderInput);\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: 1fr 380px;\n                max-height: calc(100vh - 150px); /* Prevent vertical overflow */\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group label {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            outline: none;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle & Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as line segments and their connection to the hyperbolic functions on the unit hyperbola (xÂ² - yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc>An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Corresponding hyperbolic values are also shown.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Area (Gudermannian) -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Lines -->\n                <g id=\"trig-lines\">\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\">\n                <label for=\"angle-slider\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\">\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt>p = ln(sec+tan)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>Rectified and Hardened by CodeSentinel Omega.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD = '';\n                // Right branch (x > 0), top half\n                for (let i = 0; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (i === 0) { pathD += `M ${x} ${-y} `; } \n                    else { pathD += `L ${x} ${-y} `; }\n                }\n                // Right branch, bottom half\n                for (let i = steps; i >= 0; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = -Math.sinh(p);\n                    if (i !== steps) { pathD += `L ${x} ${-y} `; }\n                }\n                return pathD;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (p <= 0) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : '-â';\n                return val.toFixed(3);\n            }\n\n            function updateVisualization() {\n                const deg = parseFloat(slider.value);\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) { // Poles at 90, 270 deg\n                    c = 0;\n                    t = s > 0 ? Infinity : -Infinity;\n                    sec = Infinity;\n                    cot = 0;\n                    csc = 1 / s;\n                } else if (Math.abs(s) < EPSILON) { // Poles at 0, 180 deg\n                    s = 0;\n                    t = 0;\n                    sec = 1 / c;\n                    cot = c > 0 ? Infinity : -Infinity;\n                    csc = Infinity;\n                } else {\n                    t = s / c;\n                    sec = 1 / c;\n                    cot = c / s;\n                    csc = 1 / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n\n                // Tangent and Secant\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineTan.setAttribute('x2', 1);\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n\n                const secEndPointX = isFinite(sec) ? sec : Math.sign(c) * SVG_BOUNDS;\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', secEndPointX);\n                elements.lineSec.setAttribute('y2', 0);\n\n                // Cotangent and Cosecant\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCot.setAttribute('y2', -1);\n\n                const cscEndPointY = isFinite(csc) ? csc : Math.sign(s) * SVG_BOUNDS;\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('x2', 0);\n                elements.lineCsc.setAttribute('y2', -cscEndPointY);\n\n                // Angle Arc\n                const largeArcFlag = deg > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 1 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t); // Gudermannian inverse: acosh(sec) or asinh(tan)\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineCosh.setAttribute('y1', 0);\n                    elements.lineCosh.setAttribute('x2', 0);\n                    elements.lineCosh.setAttribute('y2', 0);\n\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y1', 0);\n                    elements.lineSinh.setAttribute('x2', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.hyperbolicElements.style.display = 'block';\n                } else {\n                    elements.hyperbolicElements.style.display = 'none';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${deg.toFixed(1)}Â° / ${(rad).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${deg.toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            // --- INITIALIZATION ---\n            function initialize() {\n                // Generate the static hyperbola path once\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n\n                slider.addEventListener('input', updateVisualization);\n                updateVisualization();\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Complete the geometric visualization of all six trigonometric functions by drawing their defining right-angled triangles. Currently, functions like secant and cotangent are represented as isolated, non-standard lines. This should be corrected to show, for example, the tangent and secant as the perpendicular side and hypotenuse of the triangle formed by the origin, the point (1,0), and the point (1, tan(Î¸)). This change is critical for providing the correct geometric context.; Implement smooth animations and explicit visual connectors to fulfill the core concept of linking circular and hyperbolic functions. Refactor the JavaScript update loop to use `requestAnimationFrame` for fluid transitions as the slider moves. Add dynamic visual aids, such as dashed projection lines, that explicitly connect the length of the `tan(Î¸)` line to the y-coordinate of the point on the hyperbola, and the length of the `sec(Î¸)` line to the x-coordinate, visually proving that `tan(Î¸) = sinh(p)` and `sec(Î¸) = cosh(p)`.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as complete triangles and their connection to the hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn within their defining right-angled triangles. Dashed lines show the geometric connection between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <!-- Triangle for Cot/Csc -->\n                    <line id=\"line-cot-adj\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"-1\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Tan/Sec -->\n                    <line id=\"line-tan-adj\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Sin/Cos -->\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A visualization by <a href=\"https://github.com/coderaion\" target=\"_blank\" rel=\"noopener noreferrer\">CodeAuditor Maximus</a>.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                projectionLine: document.getElementById('projection-line'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n            };\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                // Sin/Cos Triangle\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n\n                // Tan/Sec Triangle\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n                elements.lineSec.setAttribute('y2', tanEndPointY);\n\n                // Cot/Csc Triangle\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCsc.setAttribute('x2', cotEndPointX);\n\n                // Angle Arc\n                const largeArcFlag = deg % 360 > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 0 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    \n                    // Projection line: connects end of tan line to point H, showing tan(Î¸) = sinh(p)\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n\n                    elements.hyperbolicElements.style.visibility = 'visible';\n                } else {\n                    elements.hyperbolicElements.style.visibility = 'hidden';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2*Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleSliderInput() {\n                state.targetDeg = parseFloat(slider.value);\n                startAnimation();\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                // Set fixed line coordinates that don't change\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', 1);\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('y2', -1);\n                elements.lineCosh.setAttribute('x2', 0);\n                elements.lineCosh.setAttribute('y2', 0);\n                elements.lineSinh.setAttribute('y1', 0);\n\n                slider.addEventListener('input', handleSliderInput);\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement an interactive visibility control panel with dynamic SVG labels. Currently, all six trigonometric functions are displayed simultaneously, creating significant visual clutter. This suggestion involves replacing the static info panel lists with interactive controls (e.g., checkboxes or toggle switches) for each function (sin, cos, tan, sec, csc, cot, sinh, cosh). Toggling a function would control the visibility of its corresponding line(s) in the SVG. Crucially, this also includes adding dynamic `<text>` labels directly within the SVG, positioned next to their respective lines, which also appear/disappear with the toggle. This transforms the tool from a passive demonstration into an active learning environment where users can isolate and study each function's geometric definition individually.",
            "Create a dynamic animation and visual linkage mode to explicitly prove the core relationships. The current implementation shows the values are equal but doesn't visually demonstrate it, which was a key part of the original idea. This feature involves: 1. Implementing a hover-based highlighting system where mousing over the `sec(Î¸)` line (or its info panel entry) causes both the `sec(Î¸)` and `cosh(p)` lines to pulse simultaneously, reinforcing their connection. 2. Adding a 'Demonstrate Connection' button that triggers a short, non-interactive animation where the `sec(Î¸)` line segment visually 'un-rotates' and translates to lay perfectly over the `cosh(p)` segment, proving their lengths are identical (and similarly for `tan(Î¸)` and `sinh(p)`). 3. Improving the UX for undefined hyperbolic regions by greying out the elements and providing an explanatory message, rather than having them abruptly disappear."
          ]
        },
        {
          "iterationNumber": 2,
          "title": "Refine 2: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n                max-height: calc(75vh + 2rem); /* Match viz height */\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Toggles control the visibility of each function and its label. A button demonstrates the geometric relationship between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <g id=\"group-cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <!-- Animation Layer -->\n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A project by CodeAuditor Maximus. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    elements[`label-${name}`].setAttribute('x', (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad));\n                    elements[`label-${name}`].setAttribute('y', (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad));\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                const tanY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                setLineAndLabel('tan', 1, 0, 1, tanY);\n                setLineAndLabel('sec', 0, 0, 1, tanY);\n                const cotX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                setLineAndLabel('csc', 0, 0, cotX, -1);\n                setLineAndLabel('cot', cotX, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2 * Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n\n                const createAnimationPromise = (sourceId, targetTransform) => {\n                    return new Promise(resolve => {\n                        const source = document.getElementById(sourceId);\n                        const clone = source.cloneNode(true);\n                        clone.id = '';\n                        clone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(clone);\n                        \n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        \n                        requestAnimationFrame(() => {\n                            clone.style.transform = targetTransform;\n                        });\n                    });\n                };\n\n                const secAnimation = createAnimationPromise('line-sec', `rotate(${-state.currentDeg} 0 0)`);\n                const tanAnimation = createAnimationPromise('line-tan', `translate(${Hx - 1} 0)`);\n\n                Promise.all([secAnimation, tanAnimation]).then(() => {\n                    setTimeout(() => { // Brief pause to admire the result\n                        elements.animationLayer.innerHTML = '';\n                        state.isDemoRunning = false;\n                        slider.disabled = false;\n                        render(state.currentDeg);\n                    }, 400);\n                });\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                const addHighlightListeners = (name1, name2) => {\n                    const item1 = elements[`toggle-item-${name1}`];\n                    const item2 = elements[`toggle-item-${name2}`];\n                    if (!item1 || !item2) return;\n                    const line1 = elements[`line-${name1}`];\n                    const line2 = elements[`line-${name2}`];\n                    \n                    const highlightOn = () => {\n                        if (item1.closest('.is-disabled')) return;\n                        line1.classList.add('highlight-pulse');\n                        line2.classList.add('highlight-pulse');\n                    };\n                    const highlightOff = () => {\n                        line1.classList.remove('highlight-pulse');\n                        line2.classList.remove('highlight-pulse');\n                    };\n\n                    [item1, item2].forEach(item => {\n                        item.addEventListener('mouseenter', highlightOn);\n                        item.addEventListener('mouseleave', highlightOff);\n                        item.querySelectorAll('input, label').forEach(el => {\n                            el.addEventListener('focus', highlightOn);\n                            el.addEventListener('blur', highlightOff);\n                        });\n                    });\n                };\n\n                addHighlightListeners('sec', 'cosh');\n                addHighlightListeners('tan', 'sinh');\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.5;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n        }\n        .toggle-item label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            font-size: 1rem;\n        }\n        #demo-button:hover, #demo-button:focus-visible {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 4px;\n            text-align: center;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n            pointer-events: none;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.06; }\n        }\n        .animating-clone {\n            transition: transform 0.7s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Toggles control the visibility of each function and its label. A button demonstrates the geometric relationship between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <g id=\"group-cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <!-- Animation Layer -->\n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item\"><label><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\"></span>tanh(p)</label><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item\"><label><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\"></span>Area (p/2)</label><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item\"><label><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\"></span>Parameter (p)</label><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A visualization by CodeIntegrator Elite.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const trigFunctions = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            trigFunctions.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isAnimatingDemo: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, Hx, Hy, isHyperbolicDefined } = values;\n\n                // Points\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                // Angle Arc & Label\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                // Trig Lines & Labels\n                const setLineAndLabel = (name, x1, y1, x2, y2, angle = 0) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    elements[`label-${name}`].setAttribute('x', (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad));\n                    elements[`label-${name}`].setAttribute('y', (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad));\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                const tanY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                setLineAndLabel('tan', 1, 0, 1, tanY);\n                setLineAndLabel('sec', 0, 0, 1, tanY);\n                const cotX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                setLineAndLabel('csc', 0, 0, cotX, -1);\n                setLineAndLabel('cot', cotX, -1, 0, -1);\n\n                // Hyperbolic Elements\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2 * Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                // UX for undefined hyperbolic region\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isAnimatingDemo;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec); // Simpler and more direct than log(sec+tan)\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function runConnectionDemo() {\n                if (state.isAnimatingDemo) return;\n                state.isAnimatingDemo = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n\n                const cloneAndAnimate = (sourceId, targetTransform) => {\n                    const source = document.getElementById(sourceId);\n                    const clone = source.cloneNode(true);\n                    clone.id = '';\n                    clone.classList.add('animating-clone');\n                    elements.animationLayer.appendChild(clone);\n                    \n                    requestAnimationFrame(() => {\n                        clone.style.transform = targetTransform;\n                    });\n\n                    return clone;\n                };\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const Hx = Math.cosh(Math.acosh(1 / Math.cos(rad)));\n\n                const secClone = cloneAndAnimate('line-sec', `rotate(${-state.currentDeg})`);\n                const tanClone = cloneAndAnimate('line-tan', `translate(${Hx - 1}px, 0)`);\n\n                setTimeout(() => {\n                    elements.animationLayer.innerHTML = '';\n                    state.isAnimatingDemo = false;\n                    slider.disabled = false;\n                    render(state.currentDeg); // Redraw to ensure button state is correct\n                }, 1500);\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                trigFunctions.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                const addHighlightListeners = (name1, name2) => {\n                    const item1 = elements[`toggle-item-${name1}`];\n                    const item2 = elements[`toggle-item-${name2}`];\n                    const line1 = elements[`line-${name1}`];\n                    const line2 = elements[`line-${name2}`];\n                    \n                    [item1, item2].forEach(item => {\n                        item.addEventListener('mouseenter', () => {\n                            line1.classList.add('highlight-pulse');\n                            line2.classList.add('highlight-pulse');\n                        });\n                        item.addEventListener('mouseleave', () => {\n                            line1.classList.remove('highlight-pulse');\n                            line2.classList.remove('highlight-pulse');\n                        });\n                    });\n                };\n\n                addHighlightListeners('sec', 'cosh');\n                addHighlightListeners('tan', 'sinh');\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 2rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n        }\n\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n            color: var(--secondary-text-color);\n        }\n\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* SVG Specific Styles */\n        .label-text {\n            fill: var(--primary-text-color);\n            font-size: 0.12px;\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.05px;\n            stroke-linecap: butt;\n            stroke-linejoin: miter;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Observe the trigonometric functions as complete triangles and their connection to the hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn within their defining right-angled triangles. Dashed lines show the geometric connection between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--color-axis)\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <line id=\"line-cosh\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sinh\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"label-text\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <!-- Triangle for Cot/Csc -->\n                    <line id=\"line-cot-adj\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"-1\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-cot\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                    <line id=\"line-csc\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Tan/Sec -->\n                    <line id=\"line-tan-adj\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\" />\n                    <line id=\"line-tan\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sec\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                    <!-- Triangle for Sin/Cos -->\n                    <line id=\"line-cos\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                    <line id=\"line-sin\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                    <line id=\"line-radius\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</dt>\n                            <dd id=\"val-sin\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</dt>\n                            <dd id=\"val-cos\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</dt>\n                            <dd id=\"val-tan\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</dt>\n                            <dd id=\"val-sec\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</dt>\n                            <dd id=\"val-csc\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</dt>\n                            <dd id=\"val-cot\">1.000</dd>\n                        </div>\n                    </dl>\n                </div>\n                <div class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <dl>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt>\n                            <dd id=\"val-p\">0.881</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</dt>\n                            <dd id=\"val-sinh\">1.000</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</dt>\n                            <dd id=\"val-cosh\">1.414</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>tanh(p)</dt>\n                            <dd id=\"val-tanh\">0.707</dd>\n                        </div>\n                        <div class=\"info-item\">\n                            <dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt>\n                            <dd id=\"val-area\">0.441</dd>\n                        </div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A visualization by <a href=\"https://github.com/coderaion\" target=\"_blank\" rel=\"noopener noreferrer\">CodeAuditor Maximus</a>.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                lineSin: document.getElementById('line-sin'),\n                lineCos: document.getElementById('line-cos'),\n                lineTan: document.getElementById('line-tan'),\n                lineSec: document.getElementById('line-sec'),\n                lineCsc: document.getElementById('line-csc'),\n                lineCot: document.getElementById('line-cot'),\n                lineSinh: document.getElementById('line-sinh'),\n                lineCosh: document.getElementById('line-cosh'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                projectionLine: document.getElementById('projection-line'),\n                valSin: document.getElementById('val-sin'),\n                valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'),\n                valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'),\n                valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'),\n                valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'),\n                valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n            };\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n\n                // --- CALCULATIONS ---\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                // Point P on unit circle\n                const Px = c;\n                const Py = -s; // SVG y-axis is inverted\n\n                // --- UPDATE SVG GEOMETRY ---\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n\n                // Sin/Cos Triangle\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                elements.lineSin.setAttribute('x1', Px);\n                elements.lineSin.setAttribute('y1', Py);\n                elements.lineSin.setAttribute('x2', Px);\n                elements.lineSin.setAttribute('y2', 0);\n\n                elements.lineCos.setAttribute('x1', Px);\n                elements.lineCos.setAttribute('y1', 0);\n\n                // Tan/Sec Triangle\n                const tanEndPointY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                elements.lineTan.setAttribute('y2', tanEndPointY);\n                elements.lineSec.setAttribute('y2', tanEndPointY);\n\n                // Cot/Csc Triangle\n                const cotEndPointX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                elements.lineCot.setAttribute('x2', cotEndPointX);\n                elements.lineCsc.setAttribute('x2', cotEndPointX);\n\n                // Angle Arc\n                const largeArcFlag = deg % 360 > 180 ? 1 : 0;\n                const arcRadius = 0.3;\n                const arcPath = `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} 0 ${arcRadius * c} ${-arcRadius * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                \n                const labelRadius = 0.4;\n                elements.angleLabel.setAttribute('x', labelRadius * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -labelRadius * Math.sin(rad / 2));\n\n                // --- HYPERBOLIC CALCULATIONS & VISUALIZATION ---\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN;\n                const isHyperbolicDefined = sec >= 1 && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.log(sec + t);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n\n                    const Hx = cosh_p;\n                    const Hy = -sinh_p;\n\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n\n                    elements.lineCosh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('x1', Hx);\n                    elements.lineSinh.setAttribute('y2', Hy);\n                    \n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    \n                    // Projection line: connects end of tan line to point H, showing tan(Î¸) = sinh(p)\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n\n                    elements.hyperbolicElements.style.visibility = 'visible';\n                } else {\n                    elements.hyperbolicElements.style.visibility = 'hidden';\n                }\n\n                // --- UPDATE INFO PANEL ---\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2*Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleSliderInput() {\n                state.targetDeg = parseFloat(slider.value);\n                startAnimation();\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                // Set fixed line coordinates that don't change\n                elements.lineRadius.setAttribute('x1', 0);\n                elements.lineRadius.setAttribute('y1', 0);\n                elements.lineCos.setAttribute('x2', 0);\n                elements.lineCos.setAttribute('y2', 0);\n                elements.lineTan.setAttribute('x1', 1);\n                elements.lineTan.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x1', 0);\n                elements.lineSec.setAttribute('y1', 0);\n                elements.lineSec.setAttribute('x2', 1);\n                elements.lineCot.setAttribute('x1', 0);\n                elements.lineCot.setAttribute('y1', -1);\n                elements.lineCsc.setAttribute('x1', 0);\n                elements.lineCsc.setAttribute('y1', 0);\n                elements.lineCsc.setAttribute('y2', -1);\n                elements.lineCosh.setAttribute('x2', 0);\n                elements.lineCosh.setAttribute('y2', 0);\n                elements.lineSinh.setAttribute('y1', 0);\n\n                slider.addEventListener('input', handleSliderInput);\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement an interactive visibility control panel with dynamic SVG labels. Currently, all six trigonometric functions are displayed simultaneously, creating significant visual clutter. This suggestion involves replacing the static info panel lists with interactive controls (e.g., checkboxes or toggle switches) for each function (sin, cos, tan, sec, csc, cot, sinh, cosh). Toggling a function would control the visibility of its corresponding line(s) in the SVG. Crucially, this also includes adding dynamic `<text>` labels directly within the SVG, positioned next to their respective lines, which also appear/disappear with the toggle. This transforms the tool from a passive demonstration into an active learning environment where users can isolate and study each function's geometric definition individually.; Create a dynamic animation and visual linkage mode to explicitly prove the core relationships. The current implementation shows the values are equal but doesn't visually demonstrate it, which was a key part of the original idea. This feature involves: 1. Implementing a hover-based highlighting system where mousing over the `sec(Î¸)` line (or its info panel entry) causes both the `sec(Î¸)` and `cosh(p)` lines to pulse simultaneously, reinforcing their connection. 2. Adding a 'Demonstrate Connection' button that triggers a short, non-interactive animation where the `sec(Î¸)` line segment visually 'un-rotates' and translates to lay perfectly over the `cosh(p)` segment, proving their lengths are identical (and similarly for `tan(Î¸)` and `sinh(p)`). 3. Improving the UX for undefined hyperbolic regions by greying out the elements and providing an explanatory message, rather than having them abruptly disappear.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n                max-height: calc(75vh + 2rem); /* Match viz height */\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Toggles control the visibility of each function and its label. A button demonstrates the geometric relationship between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <g id=\"group-cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <!-- Animation Layer -->\n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A project by CodeAuditor Maximus. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    elements[`label-${name}`].setAttribute('x', (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad));\n                    elements[`label-${name}`].setAttribute('y', (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad));\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                const tanY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                setLineAndLabel('tan', 1, 0, 1, tanY);\n                setLineAndLabel('sec', 0, 0, 1, tanY);\n                const cotX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                setLineAndLabel('csc', 0, 0, cotX, -1);\n                setLineAndLabel('cot', cotX, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2 * Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n\n                const createAnimationPromise = (sourceId, targetTransform) => {\n                    return new Promise(resolve => {\n                        const source = document.getElementById(sourceId);\n                        const clone = source.cloneNode(true);\n                        clone.id = '';\n                        clone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(clone);\n                        \n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        \n                        requestAnimationFrame(() => {\n                            clone.style.transform = targetTransform;\n                        });\n                    });\n                };\n\n                const secAnimation = createAnimationPromise('line-sec', `rotate(${-state.currentDeg} 0 0)`);\n                const tanAnimation = createAnimationPromise('line-tan', `translate(${Hx - 1} 0)`);\n\n                Promise.all([secAnimation, tanAnimation]).then(() => {\n                    setTimeout(() => { // Brief pause to admire the result\n                        elements.animationLayer.innerHTML = '';\n                        state.isDemoRunning = false;\n                        slider.disabled = false;\n                        render(state.currentDeg);\n                    }, 400);\n                });\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                const addHighlightListeners = (name1, name2) => {\n                    const item1 = elements[`toggle-item-${name1}`];\n                    const item2 = elements[`toggle-item-${name2}`];\n                    if (!item1 || !item2) return;\n                    const line1 = elements[`line-${name1}`];\n                    const line2 = elements[`line-${name2}`];\n                    \n                    const highlightOn = () => {\n                        if (item1.closest('.is-disabled')) return;\n                        line1.classList.add('highlight-pulse');\n                        line2.classList.add('highlight-pulse');\n                    };\n                    const highlightOff = () => {\n                        line1.classList.remove('highlight-pulse');\n                        line2.classList.remove('highlight-pulse');\n                    };\n\n                    [item1, item2].forEach(item => {\n                        item.addEventListener('mouseenter', highlightOn);\n                        item.addEventListener('mouseleave', highlightOff);\n                        item.querySelectorAll('input, label').forEach(el => {\n                            el.addEventListener('focus', highlightOn);\n                            el.addEventListener('blur', highlightOff);\n                        });\n                    });\n                };\n\n                addHighlightListeners('sec', 'cosh');\n                addHighlightListeners('tan', 'sinh');\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Refine the 'Demonstrate Connection' animation into a comprehensive teaching tool. The current animation is functionally basic and its transform logic is not intuitive. This enhancement involves: 1. Correcting the transform logic to accurately show the `sec(Î¸)` line (hypotenuse) rotating and scaling to become the horizontal `cosh(p)` line. 2. Simultaneously animating the `tan(Î¸)` line translating and stretching to become the `sinh(p)` line. 3. Introducing a new, high-impact animation that visually morphs the circular sector (area Î¸/2) into the hyperbolic sector (area p/2), directly illustrating the deep connection between the angle `Î¸` and the hyperbolic parameter `p`. 4. Improving the UX with pre-animation highlighting of the involved elements and a post-animation pause to create a clear, guided demonstration.",
            "Implement direct manipulation and improve interactive robustness. The current slider-only control is limiting and the visualization is jarring at asymptotes. This involves: 1. Enabling users to click and drag the point `P` directly on the unit circle for a more intuitive and engaging exploration experience, which requires adding mouse/touch event listeners to the SVG and converting screen coordinates to the corresponding angle. 2. Gracefully handling asymptotic values (when Î¸ approaches 90Â°, 270Â°, etc.) by fading out the trig lines as they extend beyond the viewport and updating their value displays to show an arrow (e.g., 'â â') instead of an abrupt 'Infinity' text. 3. Implementing a dynamic label collision avoidance system to prevent text overlap at critical angles, ensuring all function labels remain legible throughout the interaction."
          ]
        },
        {
          "iterationNumber": 3,
          "title": "Refine 3: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden {\n            opacity: 0.5;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function getLineIntersectionWithBoundary(x1, y1, x2, y2) {\n                const dx = x2 - x1;\n                const dy = y2 - y1;\n                let t = Infinity;\n\n                if (Math.abs(dx) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dx) * SVG_BOUNDS - x1) / dx);\n                }\n                if (Math.abs(dy) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dy) * SVG_BOUNDS - y1) / dy);\n                }\n                \n                if (t > 0 && t < 1) {\n                    return { x: x1 + t * dx, y: y1 + t * dy };\n                }\n                return { x: x2, y: y2 };\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelPositions = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2, value) => {\n                    const line = elements[`line-${name}`];\n                    const group = elements[`group-${name}`];\n                    const label = elements[`label-${name}`];\n                    \n                    let end = { x: x2, y: y2 };\n                    let opacity = 1;\n                    if (!isFinite(value)) {\n                        end = getLineIntersectionWithBoundary(x1, y1, x2, y2);\n                        opacity = 0;\n                    }\n                    \n                    line.setAttribute('x1', x1);\n                    line.setAttribute('y1', y1);\n                    line.setAttribute('x2', end.x);\n                    line.setAttribute('y2', end.y);\n                    group.style.opacity = opacity;\n\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelPositions[name] = {\n                        el: label,\n                        x: (x1 + end.x) / 2 + labelOffset * Math.sin(labelAngleRad),\n                        y: (y1 + end.y) / 2 - labelOffset * Math.cos(labelAngleRad),\n                        angle: (state.currentDeg % 360 + 360) % 360\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0, s);\n                setLineAndLabel('cos', Px, 0, 0, 0, c);\n                setLineAndLabel('tan', 1, 0, 1, -t, t);\n                setLineAndLabel('sec', 0, 0, 1, -t, sec);\n                setLineAndLabel('csc', 0, 0, cot, -1, csc);\n                setLineAndLabel('cot', cot, -1, 0, -1, cot);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0, Hx);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelPositions);\n                Object.values(labelPositions).forEach(pos => pos.el.setAttribute('transform', `translate(${pos.x}, ${pos.y})`));\n            }\n            \n            function resolveLabelCollisions(positions) {\n                const angle = positions.cos.angle;\n                const nudge = 0.2;\n                if (angle < 20 || angle > 340) {\n                    positions.cos.y += nudge; positions.sec.y -= nudge;\n                }\n                if (angle > 70 && angle < 110) {\n                    positions.sin.x -= nudge; positions.csc.x += nudge;\n                }\n                if (angle > 160 && angle < 200) {\n                    positions.cos.y -= nudge; positions.sec.y += nudge;\n                }\n                if (angle > 250 && angle < 290) {\n                    positions.sin.x += nudge; positions.csc.x -= nudge;\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) {\n                    return d2;\n                }\n\n                let newD = 'M ';\n                for (let i = 0; i < nums1.length; i += 2) {\n                    const x = nums1[i] * (1 - t) + nums2[i] * t;\n                    const y = nums1[i + 1] * (1 - t) + nums2[i + 1] * t;\n                    if (i > 0) newD += 'L ';\n                    newD += `${x} ${y} `;\n                }\n                return newD + 'Z';\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n                const p = Math.acosh(secVal);\n\n                const highlightElements = ['line-sec', 'line-tan', 'line-cosh', 'line-sinh', 'circular-area', 'hyperbolic-area'];\n                highlightElements.forEach(id => document.getElementById(id)?.classList.add('highlight-pulse'));\n                await sleep(1200);\n                highlightElements.forEach(id => document.getElementById(id)?.classList.remove('highlight-pulse'));\n\n                const createAnimationPromise = (clone, finalTransform) => {\n                    return new Promise(resolve => {\n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        requestAnimationFrame(() => clone.setAttribute('transform', finalTransform));\n                    });\n                };\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                const secAnimation = createAnimationPromise(secClone, `rotate(${-state.currentDeg} 0 0)`);\n\n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n                const tanAnimation = createAnimationPromise(tanClone, `translate(${Hx - 1} 0)`);\n\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 800;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => 0.5 - 0.5 * Math.cos(t * Math.PI);\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n\n                await Promise.all([secAnimation, tanAnimation, areaAnimation]);\n                await sleep(1500);\n\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n                max-height: calc(75vh + 2rem); /* Match viz height */\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden {\n            opacity: 0.5;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .animating-area-clone {\n            transition: d 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        path {\n            /* For path morphing animation */\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Areas -->\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points and Interaction -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <!-- Animation Layer -->\n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A project by CodeIntegrator Elite. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function getLineIntersectionWithBoundary(x1, y1, x2, y2) {\n                const dx = x2 - x1;\n                const dy = y2 - y1;\n                let t = Infinity;\n\n                if (dx !== 0) {\n                    t = Math.min(t, (Math.sign(dx) * SVG_BOUNDS - x1) / dx);\n                }\n                if (dy !== 0) {\n                    t = Math.min(t, (Math.sign(dy) * SVG_BOUNDS - y1) / dy);\n                }\n                \n                if (t > 0 && t < 1) {\n                    return { x: x1 + t * dx, y: y1 + t * dy, clipped: true };\n                }\n                return { x: x2, y: y2, clipped: false };\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelPositions = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2, value) => {\n                    const line = elements[`line-${name}`];\n                    const group = elements[`group-${name}`];\n                    const label = elements[`label-${name}`];\n                    \n                    let end = { x: x2, y: y2 };\n                    let opacity = 1;\n                    if (!isFinite(value)) {\n                        end = getLineIntersectionWithBoundary(x1, y1, x2, y2);\n                        opacity = 0;\n                    }\n                    \n                    line.setAttribute('x1', x1);\n                    line.setAttribute('y1', y1);\n                    line.setAttribute('x2', end.x);\n                    line.setAttribute('y2', end.y);\n                    group.style.opacity = opacity;\n\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelPositions[name] = {\n                        el: label,\n                        x: (x1 + end.x) / 2 + labelOffset * Math.sin(labelAngleRad),\n                        y: (y1 + end.y) / 2 - labelOffset * Math.cos(labelAngleRad),\n                        angle: (state.currentDeg % 360 + 360) % 360\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0, s);\n                setLineAndLabel('cos', Px, 0, 0, 0, c);\n                setLineAndLabel('tan', 1, 0, 1, -t, t);\n                setLineAndLabel('sec', 0, 0, 1, -t, sec);\n                setLineAndLabel('csc', 0, 0, cot, -1, csc);\n                setLineAndLabel('cot', cot, -1, 0, -1, cot);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0, Hx);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelPositions);\n                Object.values(labelPositions).forEach(pos => pos.el.setAttribute('transform', `translate(${pos.x}, ${pos.y})`));\n            }\n            \n            function resolveLabelCollisions(positions) {\n                const angle = positions.cos.angle;\n                const nudge = 0.2;\n                // cos vs sec near 0/360\n                if (angle < 20 || angle > 340) {\n                    positions.cos.y += nudge;\n                    positions.sec.y -= nudge;\n                }\n                // sin vs csc near 90\n                if (angle > 70 && angle < 110) {\n                    positions.sin.x -= nudge;\n                    positions.csc.x += nudge;\n                }\n                 // cos vs sec near 180\n                if (angle > 160 && angle < 200) {\n                    positions.cos.y -= nudge;\n                    positions.sec.y += nudge;\n                }\n                // sin vs csc near 270\n                if (angle > 250 && angle < 290) {\n                    positions.sin.x += nudge;\n                    positions.csc.x -= nudge;\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2 * Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n                const p = Math.acosh(secVal);\n\n                const highlightElements = ['line-sec', 'line-tan', 'line-cosh', 'line-sinh', 'circular-area', 'hyperbolic-area'];\n                highlightElements.forEach(id => document.getElementById(id)?.classList.add('highlight-pulse'));\n                await sleep(1200);\n                highlightElements.forEach(id => document.getElementById(id)?.classList.remove('highlight-pulse'));\n\n                const createAnimationPromise = (clone, finalStyle) => {\n                    return new Promise(resolve => {\n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        requestAnimationFrame(() => {\n                            for (const prop in finalStyle) {\n                                clone.style[prop] = finalStyle[prop];\n                            }\n                        });\n                    });\n                };\n\n                // Animate sec -> cosh\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = '';\n                secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                const secAnimation = createAnimationPromise(secClone, { transform: `rotate(${-state.currentDeg}deg)` });\n\n                // Animate tan -> sinh\n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = '';\n                tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n                const tanAnimation = createAnimationPromise(tanClone, { transform: `translateX(${Hx - 1}px)` });\n\n                // Animate circular area -> hyperbolic area\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 800;\n                    const startD = areaClone.getAttribute('d');\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        const easedProgress = 0.5 - 0.5 * Math.cos(progress * Math.PI);\n\n                        const interpolatedD = interpolatePath(startD, finalAreaD, easedProgress);\n                        areaClone.setAttribute('d', interpolatedD);\n\n                        if (progress < 1) {\n                            requestAnimationFrame(morph);\n                        } else {\n                            resolve();\n                        }\n                    }\n                    requestAnimationFrame(morph);\n                });\n\n                await Promise.all([secAnimation, tanAnimation, areaAnimation]);\n                \n                await sleep(1500);\n\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                render(state.currentDeg);\n            }\n            \n            function interpolatePath(d1, d2, t) {\n                const points1 = d1.match(/[LMCZ] ([\\d.-]+) ([\\d.-]+)/g).map(s => s.slice(2).split(' ').map(Number));\n                const points2 = d2.match(/[LMCZ] ([\\d.-]+) ([\\d.-]+)/g).map(s => s.slice(2).split(' ').map(Number));\n                if (points1.length !== points2.length) return d2;\n\n                let newD = 'M 0 0 ';\n                for (let i = 0; i < points1.length; i++) {\n                    const x = points1[i][0] * (1 - t) + points2[i][0] * t;\n                    const y = points1[i][1] * (1 - t) + points2[i][1] * t;\n                    newD += `L ${x} ${y} `;\n                }\n                return newD + 'Z';\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                if (angleRad < 0) angleRad += 2 * Math.PI;\n                const newDeg = angleRad * 180 / Math.PI;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                // Direct manipulation listeners\n                svg.addEventListener('mousedown', handleDragStart);\n                svg.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                svg.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                overflow-y: auto;\n                max-height: calc(75vh + 2rem); /* Match viz height */\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            color: var(--secondary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--bg-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved, and lines representing sin, cos, tan, sec, csc, and cot are drawn. Toggles control the visibility of each function and its label. A button demonstrates the geometric relationship between circular and hyperbolic functions.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <!-- Grid -->\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <!-- Axes -->\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <!-- Unit Circle and Hyperbola -->\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <!-- Hyperbolic Elements & Projections -->\n                <g id=\"hyperbolic-elements\">\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" />\n                    <g id=\"group-cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <!-- Angle Arc -->\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <!-- Trigonometric Triangles -->\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <!-- Points -->\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <!-- Animation Layer -->\n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <label id=\"control-group-title-angle\" for=\"angle-slider\" class=\"control-group-title\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>A project by CodeAuditor Maximus. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (!isFinite(val)) return val > 0 ? 'â' : 'ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateHyperbolicAreaPath(p, steps = 30) {\n                if (Math.abs(p) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const currentP = (i / steps) * p;\n                    const x = Math.cosh(currentP);\n                    const y = Math.sinh(currentP);\n                    pathD += `L ${x} ${-y} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    elements[`label-${name}`].setAttribute('x', (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad));\n                    elements[`label-${name}`].setAttribute('y', (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad));\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                const tanY = isFinite(t) ? -t : -Math.sign(t) * SVG_BOUNDS;\n                setLineAndLabel('tan', 1, 0, 1, tanY);\n                setLineAndLabel('sec', 0, 0, 1, tanY);\n                const cotX = isFinite(cot) ? cot : Math.sign(cot) * SVG_BOUNDS;\n                setLineAndLabel('csc', 0, 0, cotX, -1);\n                setLineAndLabel('cot', cotX, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateHyperbolicAreaPath(p));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                elements.angleDisplay.textContent = `${(deg % 360).toFixed(1)}Â° / ${(rad % (2 * Math.PI)).toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${(deg % 360).toFixed(1)} degrees`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, cot, csc;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n\n                const createAnimationPromise = (sourceId, targetTransform) => {\n                    return new Promise(resolve => {\n                        const source = document.getElementById(sourceId);\n                        const clone = source.cloneNode(true);\n                        clone.id = '';\n                        clone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(clone);\n                        \n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        \n                        requestAnimationFrame(() => {\n                            clone.style.transform = targetTransform;\n                        });\n                    });\n                };\n\n                const secAnimation = createAnimationPromise('line-sec', `rotate(${-state.currentDeg} 0 0)`);\n                const tanAnimation = createAnimationPromise('line-tan', `translate(${Hx - 1} 0)`);\n\n                Promise.all([secAnimation, tanAnimation]).then(() => {\n                    setTimeout(() => { // Brief pause to admire the result\n                        elements.animationLayer.innerHTML = '';\n                        state.isDemoRunning = false;\n                        slider.disabled = false;\n                        render(state.currentDeg);\n                    }, 400);\n                });\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                const addHighlightListeners = (name1, name2) => {\n                    const item1 = elements[`toggle-item-${name1}`];\n                    const item2 = elements[`toggle-item-${name2}`];\n                    if (!item1 || !item2) return;\n                    const line1 = elements[`line-${name1}`];\n                    const line2 = elements[`line-${name2}`];\n                    \n                    const highlightOn = () => {\n                        if (item1.closest('.is-disabled')) return;\n                        line1.classList.add('highlight-pulse');\n                        line2.classList.add('highlight-pulse');\n                    };\n                    const highlightOff = () => {\n                        line1.classList.remove('highlight-pulse');\n                        line2.classList.remove('highlight-pulse');\n                    };\n\n                    [item1, item2].forEach(item => {\n                        item.addEventListener('mouseenter', highlightOn);\n                        item.addEventListener('mouseleave', highlightOff);\n                        item.querySelectorAll('input, label').forEach(el => {\n                            el.addEventListener('focus', highlightOn);\n                            el.addEventListener('blur', highlightOff);\n                        });\n                    });\n                };\n\n                addHighlightListeners('sec', 'cosh');\n                addHighlightListeners('tan', 'sinh');\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Refine the 'Demonstrate Connection' animation into a comprehensive teaching tool. The current animation is functionally basic and its transform logic is not intuitive. This enhancement involves: 1. Correcting the transform logic to accurately show the `sec(Î¸)` line (hypotenuse) rotating and scaling to become the horizontal `cosh(p)` line. 2. Simultaneously animating the `tan(Î¸)` line translating and stretching to become the `sinh(p)` line. 3. Introducing a new, high-impact animation that visually morphs the circular sector (area Î¸/2) into the hyperbolic sector (area p/2), directly illustrating the deep connection between the angle `Î¸` and the hyperbolic parameter `p`. 4. Improving the UX with pre-animation highlighting of the involved elements and a post-animation pause to create a clear, guided demonstration.; Implement direct manipulation and improve interactive robustness. The current slider-only control is limiting and the visualization is jarring at asymptotes. This involves: 1. Enabling users to click and drag the point `P` directly on the unit circle for a more intuitive and engaging exploration experience, which requires adding mouse/touch event listeners to the SVG and converting screen coordinates to the corresponding angle. 2. Gracefully handling asymptotic values (when Î¸ approaches 90Â°, 270Â°, etc.) by fading out the trig lines as they extend beyond the viewport and updating their value displays to show an arrow (e.g., 'â â') instead of an abrupt 'Infinity' text. 3. Implementing a dynamic label collision avoidance system to prevent text overlap at critical angles, ensuring all function labels remain legible throughout the interaction.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden {\n            opacity: 0.5;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function getLineIntersectionWithBoundary(x1, y1, x2, y2) {\n                const dx = x2 - x1;\n                const dy = y2 - y1;\n                let t = Infinity;\n\n                if (Math.abs(dx) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dx) * SVG_BOUNDS - x1) / dx);\n                }\n                if (Math.abs(dy) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dy) * SVG_BOUNDS - y1) / dy);\n                }\n                \n                if (t > 0 && t < 1) {\n                    return { x: x1 + t * dx, y: y1 + t * dy };\n                }\n                return { x: x2, y: y2 };\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelPositions = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2, value) => {\n                    const line = elements[`line-${name}`];\n                    const group = elements[`group-${name}`];\n                    const label = elements[`label-${name}`];\n                    \n                    let end = { x: x2, y: y2 };\n                    let opacity = 1;\n                    if (!isFinite(value)) {\n                        end = getLineIntersectionWithBoundary(x1, y1, x2, y2);\n                        opacity = 0;\n                    }\n                    \n                    line.setAttribute('x1', x1);\n                    line.setAttribute('y1', y1);\n                    line.setAttribute('x2', end.x);\n                    line.setAttribute('y2', end.y);\n                    group.style.opacity = opacity;\n\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelPositions[name] = {\n                        el: label,\n                        x: (x1 + end.x) / 2 + labelOffset * Math.sin(labelAngleRad),\n                        y: (y1 + end.y) / 2 - labelOffset * Math.cos(labelAngleRad),\n                        angle: (state.currentDeg % 360 + 360) % 360\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0, s);\n                setLineAndLabel('cos', Px, 0, 0, 0, c);\n                setLineAndLabel('tan', 1, 0, 1, -t, t);\n                setLineAndLabel('sec', 0, 0, 1, -t, sec);\n                setLineAndLabel('csc', 0, 0, cot, -1, csc);\n                setLineAndLabel('cot', cot, -1, 0, -1, cot);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0, Hx);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelPositions);\n                Object.values(labelPositions).forEach(pos => pos.el.setAttribute('transform', `translate(${pos.x}, ${pos.y})`));\n            }\n            \n            function resolveLabelCollisions(positions) {\n                const angle = positions.cos.angle;\n                const nudge = 0.2;\n                if (angle < 20 || angle > 340) {\n                    positions.cos.y += nudge; positions.sec.y -= nudge;\n                }\n                if (angle > 70 && angle < 110) {\n                    positions.sin.x -= nudge; positions.csc.x += nudge;\n                }\n                if (angle > 160 && angle < 200) {\n                    positions.cos.y -= nudge; positions.sec.y += nudge;\n                }\n                if (angle > 250 && angle < 290) {\n                    positions.sin.x += nudge; positions.csc.x -= nudge;\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) {\n                    return d2;\n                }\n\n                let newD = 'M ';\n                for (let i = 0; i < nums1.length; i += 2) {\n                    const x = nums1[i] * (1 - t) + nums2[i] * t;\n                    const y = nums1[i + 1] * (1 - t) + nums2[i + 1] * t;\n                    if (i > 0) newD += 'L ';\n                    newD += `${x} ${y} `;\n                }\n                return newD + 'Z';\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n                const p = Math.acosh(secVal);\n\n                const highlightElements = ['line-sec', 'line-tan', 'line-cosh', 'line-sinh', 'circular-area', 'hyperbolic-area'];\n                highlightElements.forEach(id => document.getElementById(id)?.classList.add('highlight-pulse'));\n                await sleep(1200);\n                highlightElements.forEach(id => document.getElementById(id)?.classList.remove('highlight-pulse'));\n\n                const createAnimationPromise = (clone, finalTransform) => {\n                    return new Promise(resolve => {\n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        requestAnimationFrame(() => clone.setAttribute('transform', finalTransform));\n                    });\n                };\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                const secAnimation = createAnimationPromise(secClone, `rotate(${-state.currentDeg} 0 0)`);\n\n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n                const tanAnimation = createAnimationPromise(tanClone, `translate(${Hx - 1} 0)`);\n\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 800;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => 0.5 - 0.5 * Math.cos(t * Math.PI);\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n\n                await Promise.all([secAnimation, tanAnimation, areaAnimation]);\n                await sleep(1500);\n\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement a multi-stage, guided animation for the 'Demonstrate Connection' feature. Instead of the current single-step transition, break the animation into sequential, annotated steps: 1. Briefly highlight the `sec(Î¸)` and `tan(Î¸)` lines with a pulse effect. 2. Animate the `sec(Î¸)` line rotating down to the x-axis, explicitly relabeling it as `cosh(p)` upon arrival. 3. Simultaneously, animate the `tan(Î¸)` line segment translating along the `x=1` axis to its corresponding position as `sinh(p)`. 4. Animate the circular area sector (`Î¸/2`) visually morphing into the hyperbolic area sector (`p/2`). Each stage should be accompanied by temporary, on-SVG text annotations (e.g., 'sec(Î¸) becomes cosh(p)') to maximize pedagogical clarity.",
            "Overhaul the dynamic label placement and the handling of infinite values for superior visual clarity. Replace the current hardcoded label collision logic with a dynamic algorithm that prevents label overlaps at all angles by slightly repositioning them and using leader lines if necessary, ensuring readability across the entire 360-degree range. Concurrently, improve the visualization of infinite values: instead of lines simply disappearing (e.g., `tan(Î¸)` at 90Â°), animate them extending rapidly towards the SVG boundary and fading out to visually represent approaching infinity. In the info panel, supplement the 'â â' symbol by also graying out the entire corresponding row to provide clearer feedback on undefined states."
          ]
        },
        {
          "iterationNumber": 4,
          "title": "Refine 4: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888; /* WCAG AA compliant (4.65:1 on #1e1e1e) */\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n        }\n        .info-item dt {\n            flex-grow: 1;\n        }\n        .info-item dt label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt label {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .leader-line {\n            stroke: var(--secondary-text-color);\n            stroke-width: 0.01px;\n            fill: none;\n            opacity: 0.7;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .is-fading-out {\n            animation: fadeOut 0.4s ease-out forwards;\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out;\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"leader-lines-group\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <dl class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div class=\"info-item\" id=\"info-item-sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                </dl>\n                <dl id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div class=\"info-item\" id=\"info-item-cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                </dl>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                leaderLinesGroup: document.getElementById('leader-lines-group'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.sin(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelData = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelData[name] = {\n                        el: elements[`label-${name}`],\n                        anchorX: (x1 + x2) / 2,\n                        anchorY: (y1 + y2) / 2,\n                        offsetX: labelOffset * Math.sin(labelAngleRad),\n                        offsetY: -labelOffset * Math.cos(labelAngleRad),\n                        x: 0, y: 0,\n                        bbox: null\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelData);\n            }\n            \n            function resolveLabelCollisions(labelData) {\n                elements.leaderLinesGroup.innerHTML = '';\n                const activeLabels = Object.values(labelData).filter(d => state.visibility[d.el.id.replace('label-', '')]);\n\n                activeLabels.forEach(d => {\n                    d.x = d.anchorX + d.offsetX;\n                    d.y = d.anchorY + d.offsetY;\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    d.bbox = d.el.getBBox();\n                });\n\n                const checkOverlap = (d1, d2) => {\n                    const pad = 0.05;\n                    return d1.x - d1.bbox.width / 2 - pad < d2.x + d2.bbox.width / 2 + pad &&\n                           d1.x + d1.bbox.width / 2 + pad > d2.x - d2.bbox.width / 2 - pad &&\n                           d1.y - d1.bbox.height / 2 - pad < d2.y + d2.bbox.height / 2 + pad &&\n                           d1.y + d1.bbox.height / 2 + pad > d2.y - d2.bbox.height / 2 - pad;\n                };\n\n                for (let i = 0; i < 5; i++) { // Iterative nudging\n                    let collisions = 0;\n                    for (let j = 0; j < activeLabels.length; j++) {\n                        for (let k = j + 1; k < activeLabels.length; k++) {\n                            const d1 = activeLabels[j];\n                            const d2 = activeLabels[k];\n                            if (checkOverlap(d1, d2)) {\n                                collisions++;\n                                const dx = d2.x - d1.x;\n                                const dy = d2.y - d1.y;\n                                const dist = Math.sqrt(dx * dx + dy * dy) + EPSILON;\n                                const move = 0.05 / dist;\n                                d1.x -= dx * move; d1.y -= dy * move;\n                                d2.x += dx * move; d2.y += dy * move;\n                            }\n                        }\n                    }\n                    if (collisions === 0) break;\n                }\n\n                activeLabels.forEach(d => {\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    const distMoved = Math.sqrt(Math.pow(d.x - (d.anchorX + d.offsetX), 2) + Math.pow(d.y - (d.anchorY + d.offsetY), 2));\n                    if (distMoved > 0.02) {\n                        const leader = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        leader.setAttribute('class', 'leader-line');\n                        leader.setAttribute('d', `M ${d.anchorX} ${d.anchorY} L ${d.x} ${d.y}`);\n                        elements.leaderLinesGroup.appendChild(leader);\n                    }\n                });\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function createAnnotation(text, x, y) {\n                const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                textEl.setAttribute('class', 'demo-annotation');\n                textEl.setAttribute('x', x);\n                textEl.setAttribute('y', y);\n                textEl.textContent = text;\n                elements.animationLayer.appendChild(textEl);\n                return textEl;\n            }\n\n            /**\n             * Linearly interpolates the numerical values within two SVG path 'd' strings.\n             * Assumes both paths have the same structure and number of points.\n             * @param {string} d1 - The starting path data.\n             * @param {string} d2 - The ending path data.\n             * @param {number} t - The interpolation factor (0.0 to 1.0).\n             * @returns {string} The interpolated path data.\n             */\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) return d2;\n\n                let i = 0;\n                return d1.replace(numRegex, () => {\n                    const val = nums1[i] * (1 - t) + nums2[i] * t;\n                    i++;\n                    return val.toFixed(5);\n                });\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n                elements.animationLayer.innerHTML = '';\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const p = Math.acosh(secVal);\n                const Hx = Math.cosh(p);\n\n                // Stage 1: Highlight sec and tan\n                const annotation1 = createAnnotation('sec(Î¸) and tan(Î¸) define the point', 0, 1.8);\n                elements['group-sec'].classList.add('highlight-pulse');\n                elements['group-tan'].classList.add('highlight-pulse');\n                await sleep(2500);\n                elements['group-sec'].classList.remove('highlight-pulse');\n                elements['group-tan'].classList.remove('highlight-pulse');\n                annotation1.remove();\n\n                // Stage 2 & 3: Animate sec -> cosh and tan -> sinh\n                const annotation2 = createAnnotation('sec(Î¸) â cosh(p)', -1.2, 1.8);\n                const annotation3 = createAnnotation('tan(Î¸) â sinh(p)', 1.2, 1.8);\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                \n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n\n                const secAnimation = new Promise(resolve => {\n                    secClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        secClone.setAttribute('transform', `rotate(${-state.currentDeg} 0 0)`);\n                        secClone.style.stroke = 'var(--color-cosh)';\n                    });\n                });\n                \n                const tanAnimation = new Promise(resolve => {\n                    tanClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        tanClone.setAttribute('transform', `translate(${Hx - 1} 0)`);\n                        tanClone.style.stroke = 'var(--color-sinh)';\n                    });\n                });\n\n                await Promise.all([secAnimation, tanAnimation]);\n                await sleep(2500);\n                annotation2.remove();\n                annotation3.remove();\n\n                // Stage 4: Morph area\n                const annotation4 = createAnnotation('Area: Î¸/2 = p/2', 0, 1.8);\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 1000;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n                \n                await areaAnimation;\n                await sleep(2500);\n\n                // Cleanup\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.isDemoRunning) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg); // Re-render to update label collisions\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden {\n            opacity: 0.5;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n        .toggle-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .toggle-item.is-undefined .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .leader-line {\n            stroke: var(--secondary-text-color);\n            stroke-width: 0.01px;\n            fill: none;\n            opacity: 0.7;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .is-fading-out {\n            animation: fadeOut 0.4s ease-out forwards;\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out;\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"leader-lines-group\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                leaderLinesGroup: document.getElementById('leader-lines-group'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                const sign = Math.sign(param);\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function getLineIntersectionWithBoundary(x1, y1, x2, y2) {\n                const dx = x2 - x1;\n                const dy = y2 - y1;\n                let t = Infinity;\n\n                if (Math.abs(dx) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dx) * SVG_BOUNDS - x1) / dx);\n                }\n                if (Math.abs(dy) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dy) * SVG_BOUNDS - y1) / dy);\n                }\n                \n                if (t > 0 && t < 1.5) { // Extend slightly beyond 1 to ensure it hits boundary\n                    return { x: x1 + t * dx, y: y1 + t * dy };\n                }\n                return { x: x2, y: y2 };\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelData = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2, value) => {\n                    const line = elements[`line-${name}`];\n                    const group = elements[`group-${name}`];\n                    \n                    let end = { x: x2, y: y2 };\n                    if (!isFinite(value)) {\n                        end = getLineintersectionWithBoundary(x1, y1, x2, y2);\n                        group.classList.add('is-fading-out');\n                        setTimeout(() => group.classList.remove('is-fading-out'), 400);\n                    } else {\n                        group.classList.remove('is-fading-out');\n                    }\n                    \n                    line.setAttribute('x1', x1);\n                    line.setAttribute('y1', y1);\n                    line.setAttribute('x2', end.x);\n                    line.setAttribute('y2', end.y);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelData[name] = {\n                        el: elements[`label-${name}`],\n                        anchorX: (x1 + end.x) / 2,\n                        anchorY: (y1 + end.y) / 2,\n                        offsetX: labelOffset * Math.sin(labelAngleRad),\n                        offsetY: -labelOffset * Math.cos(labelAngleRad),\n                        x: 0, y: 0,\n                        bbox: null\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0, s);\n                setLineAndLabel('cos', Px, 0, 0, 0, c);\n                setLineAndLabel('tan', 1, 0, 1, -t, t);\n                setLineAndLabel('sec', 0, 0, 1, -t, sec);\n                setLineAndLabel('csc', 0, 0, cot, -1, csc);\n                setLineAndLabel('cot', cot, -1, 0, -1, cot);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0, Hx);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelData);\n            }\n            \n            function resolveLabelCollisions(labelData) {\n                elements.leaderLinesGroup.innerHTML = '';\n                const activeLabels = Object.values(labelData).filter(d => state.visibility[d.el.id.replace('label-', '')]);\n\n                activeLabels.forEach(d => {\n                    d.x = d.anchorX + d.offsetX;\n                    d.y = d.anchorY + d.offsetY;\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    d.bbox = d.el.getBBox();\n                });\n\n                const checkOverlap = (d1, d2) => {\n                    const pad = 0.05;\n                    return d1.x - d1.bbox.width / 2 - pad < d2.x + d2.bbox.width / 2 + pad &&\n                           d1.x + d1.bbox.width / 2 + pad > d2.x - d2.bbox.width / 2 - pad &&\n                           d1.y - d1.bbox.height / 2 - pad < d2.y + d2.bbox.height / 2 + pad &&\n                           d1.y + d1.bbox.height / 2 + pad > d2.y - d2.bbox.height / 2 - pad;\n                };\n\n                for (let i = 0; i < 5; i++) { // Iterative nudging\n                    let collisions = 0;\n                    for (let j = 0; j < activeLabels.length; j++) {\n                        for (let k = j + 1; k < activeLabels.length; k++) {\n                            const d1 = activeLabels[j];\n                            const d2 = activeLabels[k];\n                            if (checkOverlap(d1, d2)) {\n                                collisions++;\n                                const dx = d2.x - d1.x;\n                                const dy = d2.y - d1.y;\n                                const dist = Math.sqrt(dx * dx + dy * dy) + EPSILON;\n                                const move = 0.05 / dist;\n                                d1.x -= dx * move; d1.y -= dy * move;\n                                d2.x += dx * move; d2.y += dy * move;\n                            }\n                        }\n                    }\n                    if (collisions === 0) break;\n                }\n\n                activeLabels.forEach(d => {\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    const distMoved = Math.sqrt(Math.pow(d.x - (d.anchorX + d.offsetX), 2) + Math.pow(d.y - (d.anchorY + d.offsetY), 2));\n                    if (distMoved > 0.02) {\n                        const leader = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        leader.setAttribute('class', 'leader-line');\n                        leader.setAttribute('d', `M ${d.anchorX} ${d.anchorY} L ${d.x} ${d.y}`);\n                        elements.leaderLinesGroup.appendChild(leader);\n                    }\n                });\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p };\n                const domMap = { s: 'sin', c: 'cos', t: 'tan', sec: 'sec', csc: 'csc', cot: 'cot', p: 'p', sinh_p: 'sinh', cosh_p: 'cosh', tanh_p: 'tanh' };\n                \n                for (const key in domMap) {\n                    const fnName = domMap[key];\n                    const value = valueMap[key];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`toggle-item-${fnName}`];\n                    if (itemEl) {\n                        itemEl.classList.toggle('is-undefined', !isFinite(value));\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function createAnnotation(text, x, y) {\n                const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                textEl.setAttribute('class', 'demo-annotation');\n                textEl.setAttribute('x', x);\n                textEl.setAttribute('y', y);\n                textEl.textContent = text;\n                elements.animationLayer.appendChild(textEl);\n                return textEl;\n            }\n\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) return d2;\n\n                let newD = d1.slice(0, d1.search(numRegex));\n                for (let i = 0; i < nums1.length; i++) {\n                    const val = nums1[i] * (1 - t) + nums2[i] * t;\n                    newD = newD.replace(nums1[i], val.toFixed(5));\n                }\n                return newD;\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n                elements.animationLayer.innerHTML = '';\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const tanVal = Math.tan(rad);\n                const p = Math.acosh(secVal);\n                const Hx = Math.cosh(p);\n\n                // Stage 1: Highlight sec and tan\n                const annotation1 = createAnnotation('sec(Î¸) and tan(Î¸) define the point', 0, 1.8);\n                elements['group-sec'].classList.add('highlight-pulse');\n                elements['group-tan'].classList.add('highlight-pulse');\n                await sleep(2500);\n                elements['group-sec'].classList.remove('highlight-pulse');\n                elements['group-tan'].classList.remove('highlight-pulse');\n                annotation1.remove();\n\n                // Stage 2 & 3: Animate sec -> cosh and tan -> sinh\n                const annotation2 = createAnnotation('sec(Î¸) â cosh(p)', -1.2, 1.8);\n                const annotation3 = createAnnotation('tan(Î¸) â sinh(p)', 1.2, 1.8);\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                \n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n\n                const secAnimation = new Promise(resolve => {\n                    secClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        secClone.setAttribute('transform', `rotate(${-state.currentDeg} 0 0)`);\n                        secClone.style.stroke = 'var(--color-cosh)';\n                    });\n                });\n                \n                const tanAnimation = new Promise(resolve => {\n                    tanClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        tanClone.setAttribute('transform', `translate(${Hx - 1} 0)`);\n                        tanClone.style.stroke = 'var(--color-sinh)';\n                    });\n                });\n\n                await Promise.all([secAnimation, tanAnimation]);\n                await sleep(2500);\n                annotation2.remove();\n                annotation3.remove();\n\n                // Stage 4: Morph area\n                const annotation4 = createAnnotation('Area: Î¸/2 = p/2', 0, 1.8);\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 1000;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => t < 0.5 ? 2 * t * t : 1 - Math.pow(-2 * t + 2, 2) / 2;\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n                \n                await areaAnimation;\n                await sleep(2500);\n\n                // Cleanup\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg); // Re-render to update label collisions\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #555;\n            --disabled-text-color: #777;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group.is-disabled {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .toggle-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease;\n        }\n        .toggle-item label, .toggle-item .item-label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            flex-grow: 1;\n        }\n        .toggle-item.is-static .item-label {\n            cursor: default;\n        }\n        .toggle-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .toggle-item .info-value {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .toggle-item.is-hidden {\n            opacity: 0.5;\n        }\n        .toggle-item.is-hidden .info-value {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 38px;\n            height: 20px;\n            background-color: var(--bg-color);\n            border-radius: 10px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 14px;\n            height: 14px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 3px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(17px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            opacity: 0.7;\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 0.8s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"1\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div id=\"toggle-item-sin\" class=\"toggle-item\"><label for=\"toggle-sin\"><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label><span id=\"val-sin\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-cos\" class=\"toggle-item\"><label for=\"toggle-cos\"><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label><span id=\"val-cos\" class=\"info-value\">0.707</span></div>\n                    <div id=\"toggle-item-tan\" class=\"toggle-item\"><label for=\"toggle-tan\"><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label><span id=\"val-tan\" class=\"info-value\">1.000</span></div>\n                    <div id=\"toggle-item-sec\" class=\"toggle-item\"><label for=\"toggle-sec\"><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label><span id=\"val-sec\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-csc\" class=\"toggle-item\"><label for=\"toggle-csc\"><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label><span id=\"val-csc\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-cot\" class=\"toggle-item\"><label for=\"toggle-cot\"><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label><span id=\"val-cot\" class=\"info-value\">1.000</span></div>\n                </div>\n                <div id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div id=\"toggle-item-cosh\" class=\"toggle-item\"><label for=\"toggle-cosh\"><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label><span id=\"val-cosh\" class=\"info-value\">1.414</span></div>\n                    <div id=\"toggle-item-sinh\" class=\"toggle-item\"><label for=\"toggle-sinh\"><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label><span id=\"val-sinh\" class=\"info-value\">1.000</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</span><span id=\"val-tanh\" class=\"info-value\">0.707</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</span><span id=\"val-area\" class=\"info-value\">0.441</span></div>\n                    <div class=\"toggle-item is-static\"><span class=\"item-label\"><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</span><span id=\"val-p\" class=\"info-value\">0.881</span></div>\n                </div>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const TOGGLED_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            TOGGLED_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`toggle-item-${fn}`] = document.getElementById(`toggle-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`toggle-item-${fn}`]) {\n                        elements[`toggle-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function getLineIntersectionWithBoundary(x1, y1, x2, y2) {\n                const dx = x2 - x1;\n                const dy = y2 - y1;\n                let t = Infinity;\n\n                if (Math.abs(dx) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dx) * SVG_BOUNDS - x1) / dx);\n                }\n                if (Math.abs(dy) > EPSILON) {\n                    t = Math.min(t, (Math.sign(dy) * SVG_BOUNDS - y1) / dy);\n                }\n                \n                if (t > 0 && t < 1) {\n                    return { x: x1 + t * dx, y: y1 + t * dy };\n                }\n                return { x: x2, y: y2 };\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelPositions = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2, value) => {\n                    const line = elements[`line-${name}`];\n                    const group = elements[`group-${name}`];\n                    const label = elements[`label-${name}`];\n                    \n                    let end = { x: x2, y: y2 };\n                    let opacity = 1;\n                    if (!isFinite(value)) {\n                        end = getLineIntersectionWithBoundary(x1, y1, x2, y2);\n                        opacity = 0;\n                    }\n                    \n                    line.setAttribute('x1', x1);\n                    line.setAttribute('y1', y1);\n                    line.setAttribute('x2', end.x);\n                    line.setAttribute('y2', end.y);\n                    group.style.opacity = opacity;\n\n                    const labelOffset = (name === 'cos' || name === 'cot') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelPositions[name] = {\n                        el: label,\n                        x: (x1 + end.x) / 2 + labelOffset * Math.sin(labelAngleRad),\n                        y: (y1 + end.y) / 2 - labelOffset * Math.cos(labelAngleRad),\n                        angle: (state.currentDeg % 360 + 360) % 360\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0, s);\n                setLineAndLabel('cos', Px, 0, 0, 0, c);\n                setLineAndLabel('tan', 1, 0, 1, -t, t);\n                setLineAndLabel('sec', 0, 0, 1, -t, sec);\n                setLineAndLabel('csc', 0, 0, cot, -1, csc);\n                setLineAndLabel('cot', cot, -1, 0, -1, cot);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0, Hx);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelPositions);\n                Object.values(labelPositions).forEach(pos => pos.el.setAttribute('transform', `translate(${pos.x}, ${pos.y})`));\n            }\n            \n            function resolveLabelCollisions(positions) {\n                const angle = positions.cos.angle;\n                const nudge = 0.2;\n                if (angle < 20 || angle > 340) {\n                    positions.cos.y += nudge; positions.sec.y -= nudge;\n                }\n                if (angle > 70 && angle < 110) {\n                    positions.sin.x -= nudge; positions.csc.x += nudge;\n                }\n                if (angle > 160 && angle < 200) {\n                    positions.cos.y -= nudge; positions.sec.y += nudge;\n                }\n                if (angle > 250 && angle < 290) {\n                    positions.sin.x += nudge; positions.csc.x -= nudge;\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                elements.valSin.textContent = formatValue(s);\n                elements.valCos.textContent = formatValue(c);\n                elements.valTan.textContent = formatValue(t);\n                elements.valSec.textContent = formatValue(sec);\n                elements.valCsc.textContent = formatValue(csc);\n                elements.valCot.textContent = formatValue(cot);\n\n                elements.valP.textContent = formatValue(p);\n                elements.valSinh.textContent = formatValue(sinh_p);\n                elements.valCosh.textContent = formatValue(cosh_p);\n                elements.valTanh.textContent = formatValue(tanh_p);\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.classList.toggle('is-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n                elements['toggle-sinh'].disabled = !isHyperbolicDefined;\n                elements['toggle-cosh'].disabled = !isHyperbolicDefined;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) {\n                    return d2;\n                }\n\n                let newD = 'M ';\n                for (let i = 0; i < nums1.length; i += 2) {\n                    const x = nums1[i] * (1 - t) + nums2[i] * t;\n                    const y = nums1[i + 1] * (1 - t) + nums2[i + 1] * t;\n                    if (i > 0) newD += 'L ';\n                    newD += `${x} ${y} `;\n                }\n                return newD + 'Z';\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const Hx = Math.cosh(Math.acosh(secVal));\n                const p = Math.acosh(secVal);\n\n                const highlightElements = ['line-sec', 'line-tan', 'line-cosh', 'line-sinh', 'circular-area', 'hyperbolic-area'];\n                highlightElements.forEach(id => document.getElementById(id)?.classList.add('highlight-pulse'));\n                await sleep(1200);\n                highlightElements.forEach(id => document.getElementById(id)?.classList.remove('highlight-pulse'));\n\n                const createAnimationPromise = (clone, finalTransform) => {\n                    return new Promise(resolve => {\n                        clone.addEventListener('transitionend', resolve, { once: true });\n                        requestAnimationFrame(() => clone.setAttribute('transform', finalTransform));\n                    });\n                };\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                const secAnimation = createAnimationPromise(secClone, `rotate(${-state.currentDeg} 0 0)`);\n\n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n                const tanAnimation = createAnimationPromise(tanClone, `translate(${Hx - 1} 0)`);\n\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 800;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => 0.5 - 0.5 * Math.cos(t * Math.PI);\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n\n                await Promise.all([secAnimation, tanAnimation, areaAnimation]);\n                await sleep(1500);\n\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                TOGGLED_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement a multi-stage, guided animation for the 'Demonstrate Connection' feature. Instead of the current single-step transition, break the animation into sequential, annotated steps: 1. Briefly highlight the `sec(Î¸)` and `tan(Î¸)` lines with a pulse effect. 2. Animate the `sec(Î¸)` line rotating down to the x-axis, explicitly relabeling it as `cosh(p)` upon arrival. 3. Simultaneously, animate the `tan(Î¸)` line segment translating along the `x=1` axis to its corresponding position as `sinh(p)`. 4. Animate the circular area sector (`Î¸/2`) visually morphing into the hyperbolic area sector (`p/2`). Each stage should be accompanied by temporary, on-SVG text annotations (e.g., 'sec(Î¸) becomes cosh(p)') to maximize pedagogical clarity.; Overhaul the dynamic label placement and the handling of infinite values for superior visual clarity. Replace the current hardcoded label collision logic with a dynamic algorithm that prevents label overlaps at all angles by slightly repositioning them and using leader lines if necessary, ensuring readability across the entire 360-degree range. Concurrently, improve the visualization of infinite values: instead of lines simply disappearing (e.g., `tan(Î¸)` at 90Â°), animate them extending rapidly towards the SVG boundary and fading out to visually represent approaching infinity. In the info panel, supplement the 'â â' symbol by also graying out the entire corresponding row to provide clearer feedback on undefined states.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888; /* WCAG AA compliant (4.65:1 on #1e1e1e) */\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n        }\n        .info-item dt {\n            flex-grow: 1;\n        }\n        .info-item dt label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt label {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .leader-line {\n            stroke: var(--secondary-text-color);\n            stroke-width: 0.01px;\n            fill: none;\n            opacity: 0.7;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .is-fading-out {\n            animation: fadeOut 0.4s ease-out forwards;\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out;\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"leader-lines-group\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <dl class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div class=\"info-item\" id=\"info-item-sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                </dl>\n                <dl id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div class=\"info-item\" id=\"info-item-cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                </dl>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                leaderLinesGroup: document.getElementById('leader-lines-group'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.sin(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelData = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelData[name] = {\n                        el: elements[`label-${name}`],\n                        anchorX: (x1 + x2) / 2,\n                        anchorY: (y1 + y2) / 2,\n                        offsetX: labelOffset * Math.sin(labelAngleRad),\n                        offsetY: -labelOffset * Math.cos(labelAngleRad),\n                        x: 0, y: 0,\n                        bbox: null\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelData);\n            }\n            \n            function resolveLabelCollisions(labelData) {\n                elements.leaderLinesGroup.innerHTML = '';\n                const activeLabels = Object.values(labelData).filter(d => state.visibility[d.el.id.replace('label-', '')]);\n\n                activeLabels.forEach(d => {\n                    d.x = d.anchorX + d.offsetX;\n                    d.y = d.anchorY + d.offsetY;\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    d.bbox = d.el.getBBox();\n                });\n\n                const checkOverlap = (d1, d2) => {\n                    const pad = 0.05;\n                    return d1.x - d1.bbox.width / 2 - pad < d2.x + d2.bbox.width / 2 + pad &&\n                           d1.x + d1.bbox.width / 2 + pad > d2.x - d2.bbox.width / 2 - pad &&\n                           d1.y - d1.bbox.height / 2 - pad < d2.y + d2.bbox.height / 2 + pad &&\n                           d1.y + d1.bbox.height / 2 + pad > d2.y - d2.bbox.height / 2 - pad;\n                };\n\n                for (let i = 0; i < 5; i++) { // Iterative nudging\n                    let collisions = 0;\n                    for (let j = 0; j < activeLabels.length; j++) {\n                        for (let k = j + 1; k < activeLabels.length; k++) {\n                            const d1 = activeLabels[j];\n                            const d2 = activeLabels[k];\n                            if (checkOverlap(d1, d2)) {\n                                collisions++;\n                                const dx = d2.x - d1.x;\n                                const dy = d2.y - d1.y;\n                                const dist = Math.sqrt(dx * dx + dy * dy) + EPSILON;\n                                const move = 0.05 / dist;\n                                d1.x -= dx * move; d1.y -= dy * move;\n                                d2.x += dx * move; d2.y += dy * move;\n                            }\n                        }\n                    }\n                    if (collisions === 0) break;\n                }\n\n                activeLabels.forEach(d => {\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    const distMoved = Math.sqrt(Math.pow(d.x - (d.anchorX + d.offsetX), 2) + Math.pow(d.y - (d.anchorY + d.offsetY), 2));\n                    if (distMoved > 0.02) {\n                        const leader = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        leader.setAttribute('class', 'leader-line');\n                        leader.setAttribute('d', `M ${d.anchorX} ${d.anchorY} L ${d.x} ${d.y}`);\n                        elements.leaderLinesGroup.appendChild(leader);\n                    }\n                });\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function createAnnotation(text, x, y) {\n                const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                textEl.setAttribute('class', 'demo-annotation');\n                textEl.setAttribute('x', x);\n                textEl.setAttribute('y', y);\n                textEl.textContent = text;\n                elements.animationLayer.appendChild(textEl);\n                return textEl;\n            }\n\n            /**\n             * Linearly interpolates the numerical values within two SVG path 'd' strings.\n             * Assumes both paths have the same structure and number of points.\n             * @param {string} d1 - The starting path data.\n             * @param {string} d2 - The ending path data.\n             * @param {number} t - The interpolation factor (0.0 to 1.0).\n             * @returns {string} The interpolated path data.\n             */\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) return d2;\n\n                let i = 0;\n                return d1.replace(numRegex, () => {\n                    const val = nums1[i] * (1 - t) + nums2[i] * t;\n                    i++;\n                    return val.toFixed(5);\n                });\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n                elements.animationLayer.innerHTML = '';\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const p = Math.acosh(secVal);\n                const Hx = Math.cosh(p);\n\n                // Stage 1: Highlight sec and tan\n                const annotation1 = createAnnotation('sec(Î¸) and tan(Î¸) define the point', 0, 1.8);\n                elements['group-sec'].classList.add('highlight-pulse');\n                elements['group-tan'].classList.add('highlight-pulse');\n                await sleep(2500);\n                elements['group-sec'].classList.remove('highlight-pulse');\n                elements['group-tan'].classList.remove('highlight-pulse');\n                annotation1.remove();\n\n                // Stage 2 & 3: Animate sec -> cosh and tan -> sinh\n                const annotation2 = createAnnotation('sec(Î¸) â cosh(p)', -1.2, 1.8);\n                const annotation3 = createAnnotation('tan(Î¸) â sinh(p)', 1.2, 1.8);\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                \n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n\n                const secAnimation = new Promise(resolve => {\n                    secClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        secClone.setAttribute('transform', `rotate(${-state.currentDeg} 0 0)`);\n                        secClone.style.stroke = 'var(--color-cosh)';\n                    });\n                });\n                \n                const tanAnimation = new Promise(resolve => {\n                    tanClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        tanClone.setAttribute('transform', `translate(${Hx - 1} 0)`);\n                        tanClone.style.stroke = 'var(--color-sinh)';\n                    });\n                });\n\n                await Promise.all([secAnimation, tanAnimation]);\n                await sleep(2500);\n                annotation2.remove();\n                annotation3.remove();\n\n                // Stage 4: Morph area\n                const annotation4 = createAnnotation('Area: Î¸/2 = p/2', 0, 1.8);\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 1000;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n                \n                await areaAnimation;\n                await sleep(2500);\n\n                // Cleanup\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.isDemoRunning) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg); // Re-render to update label collisions\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement a user-controlled, stepped animation for the 'Demonstrate Connection' feature. Replace the single-play button with 'Next/Previous Step' controls and a scrubbable progress bar. Each step should isolate a part of the transformation (e.g., '1. Identify sec(Î¸) and tan(Î¸)', '2. Transform sec(Î¸) to cosh(p)', '3. Transform tan(Î¸) to sinh(p)', '4. Morph areas') and display a persistent, clear textual explanation in the control panel. This transforms the passive demo into an interactive, self-paced learning module, dramatically increasing its educational value and robustness by removing brittle `sleep()` timers.",
            "Introduce an interactive 'Focus Mode' to solve visual clutter and improve clarity. When a user hovers over or clicks a function in the info panel (e.g., 'tan(Î¸)'), the corresponding line and its construction geometry in the SVG are highlighted (full opacity, thicker stroke), while all other trigonometric lines fade to low opacity. This allows users to isolate and study each function's geometric definition without being overwhelmed, making the tool more exploratory and accessible for learning. This would replace the complex and imperfect label collision logic with a more intuitive, user-driven approach to managing visual information."
          ]
        },
        {
          "iterationNumber": 5,
          "title": "Refine 5: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html {\n                scroll-behavior: auto;\n            }\n            *, *::before, *::after, *::backdrop {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin-inline: auto;\n            padding-inline: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-inline: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:disabled {\n            background: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb {\n            background: var(--disabled-text-color);\n        }\n        input[type=\"range\"]:disabled::-moz-range-thumb {\n            background: var(--disabled-text-color);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group > h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group > dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: grid;\n            grid-template-columns: 1fr auto;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n            border-radius: 4px;\n        }\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 4px;\n            border-radius: 4px;\n        }\n        .info-item dt > label {\n            display: contents; /* Allow label to wrap contents without adding a DOM node for layout */\n            cursor: pointer;\n        }\n        .info-item dt:has(> label):hover, .info-item dt:has(> label):focus-within {\n            background-color: var(--bg-color);\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n            padding-right: 4px;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        .demo-controls {\n            background-color: var(--bg-color);\n            border: 1px solid var(--color-grid);\n            border-radius: 8px;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        .demo-controls[hidden] {\n            display: none;\n        }\n        .demo-explanation {\n            font-size: 0.9rem;\n            color: var(--primary-text-color);\n            min-height: 100px;\n            background-color: var(--surface-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n        }\n        .demo-explanation strong {\n            color: var(--accent-color);\n            font-weight: 600;\n        }\n        .demo-nav {\n            display: flex;\n            gap: 0.75rem;\n            align-items: center;\n        }\n        .demo-nav button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 0.9rem;\n        }\n        .demo-nav button:hover:not(:disabled), .demo-nav button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        .demo-nav button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        #demo-progress {\n            height: 12px;\n        }\n        #demo-progress::-webkit-slider-thumb {\n            width: 18px;\n            height: 18px;\n        }\n        #demo-progress::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n        }\n\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line, #line-radius {\n            transition: opacity 0.3s ease, stroke-width 0.3s ease;\n        }\n        .in-focus-mode .trig-line, .in-focus-mode #line-radius {\n            opacity: 0.15;\n        }\n        .in-focus-mode .trig-line.is-focused, .in-focus-mode #line-radius.is-focused {\n            opacity: 1;\n            stroke-width: 0.05 !important;\n        }\n\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out, opacity 0.3s ease;\n        }\n        .in-focus-mode .dynamic-label {\n            opacity: 0;\n        }\n        .in-focus-mode .is-focused .dynamic-label {\n            opacity: 1;\n        }\n\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out, d 1s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Hover over or focus on function names in the panel to highlight them in the visualization. Use the interactive demo to see how circular and hyperbolic functions are related.</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn. Hovering over a function name in the control panel isolates it visually. A stepped, interactive demo shows the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh).</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\" data-focus-group=\"cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\" data-focus-group=\"sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\" data-focus-group=\"cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\" data-focus-group=\"csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\" data-focus-group=\"tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\" data-focus-group=\"sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\" data-focus-group=\"cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\" data-focus-group=\"sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"animation-layer\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" aria-hidden=\"true\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"control-group\">\n                <button id=\"demo-toggle-button\" type=\"button\" aria-pressed=\"false\">Start Interactive Demo</button>\n                <div id=\"demo-controls\" class=\"demo-controls\" hidden>\n                    <div id=\"demo-explanation\" class=\"demo-explanation\" aria-live=\"polite\" role=\"status\"></div>\n                    <label for=\"demo-progress\" class=\"visually-hidden\">Demo Step</label>\n                    <input type=\"range\" id=\"demo-progress\" min=\"0\" max=\"4\" step=\"1\" value=\"0\">\n                    <div class=\"demo-nav\">\n                        <button id=\"demo-prev\" type=\"button\">Previous</button>\n                        <button id=\"demo-next\" type=\"button\">Next</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\" id=\"trig-info-group\">\n                    <h3 id=\"trig-info-heading\">Trigonometric</h3>\n                    <dl aria-labelledby=\"trig-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-sin\" data-focus-group=\"sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cos\" data-focus-group=\"cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-tan\" data-focus-group=\"tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sec\" data-focus-group=\"sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-csc\" data-focus-group=\"csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cot\" data-focus-group=\"cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                    </dl>\n                </div>\n                <div class=\"info-group\" id=\"hyperbolic-info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3 id=\"hyperbolic-info-heading\">Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <dl aria-labelledby=\"hyperbolic-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-cosh\" data-focus-group=\"cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sinh\" data-focus-group=\"sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                trigLinesGroup: document.getElementById('trig-lines'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n                demoToggleButton: document.getElementById('demo-toggle-button'),\n                demoControls: document.getElementById('demo-controls'),\n                demoExplanation: document.getElementById('demo-explanation'),\n                demoProgress: document.getElementById('demo-progress'),\n                demoPrev: document.getElementById('demo-prev'),\n                demoNext: document.getElementById('demo-next'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                },\n                demo: {\n                    active: false,\n                    step: 0,\n                    values: {}\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || !isFinite(val)) {\n                    if (val === Infinity) return 'â â';\n                    if (val === -Infinity) return 'â ââ';\n                    return 'undef';\n                }\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                    pathD_bottom += `L ${x.toPrecision(5)} ${y.toPrecision(5)} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 ';\n                const isCircular = type === 'circular';\n                const endPointX = isCircular ? Math.cos(param) : Math.cosh(param);\n                const endPointY = isCircular ? Math.sin(param) : Math.sinh(param);\n                pathD += `L ${isCircular ? 1 : endPointX} ${isCircular ? 0 : -endPointY} `;\n\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = isCircular ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = isCircular ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    const lx = (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad);\n                    const ly = (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad);\n                    elements[`label-${name}`].setAttribute('transform', `translate(${lx}, ${ly})`);\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                elements.demoToggleButton.disabled = !isHyperbolicDefined;\n            }\n\n            function calculateValues(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                return { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n            }\n\n            function render(deg) {\n                const values = calculateValues(deg);\n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (prefersReducedMotion || Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleFocus(event) {\n                const infoItem = event.currentTarget;\n                if (!infoItem || state.demo.active) return;\n                const focusGroup = infoItem.dataset.focusGroup;\n                if (!focusGroup || elements[`toggle-${focusGroup}`]?.checked === false) return;\n\n                elements.trigLinesGroup.classList.add('in-focus-mode');\n                elements.hyperbolicElements.classList.add('in-focus-mode');\n                \n                document.querySelectorAll(`[data-focus-group=\"${focusGroup}\"]`).forEach(el => el.classList.add('is-focused'));\n                \n                if (['sin', 'cos', 'tan', 'sec', 'csc', 'cot'].includes(focusGroup)) {\n                    elements.lineRadius.classList.add('is-focused');\n                }\n            }\n\n            function handleBlur() {\n                if (state.demo.active) return;\n                elements.trigLinesGroup.classList.remove('in-focus-mode');\n                elements.hyperbolicElements.classList.remove('in-focus-mode');\n                document.querySelectorAll('.is-focused').forEach(el => el.classList.remove('is-focused'));\n            }\n\n            const demoSteps = [\n                {\n                    title: \"Introduction\",\n                    description: \"This demo shows how <strong>sec(Î¸)</strong> and <strong>tan(Î¸)</strong> from the unit circle relate to <strong>cosh(p)</strong> and <strong>sinh(p)</strong> on the unit hyperbola. The key is that the circular sector area (Î¸/2) equals the hyperbolic sector area (p/2).\"\n                },\n                {\n                    title: \"Identify sec(Î¸) and tan(Î¸)\",\n                    description: \"On the unit circle, the line tangent at (1,0) gives us <strong>tan(Î¸)</strong>. The line from the origin to this point on the tangent is <strong>sec(Î¸)</strong>.\",\n                    action: (v) => {\n                        elements['group-sec'].classList.add('highlight-pulse');\n                        elements['group-tan'].classList.add('highlight-pulse');\n                    }\n                },\n                {\n                    title: \"Transform sec(Î¸) to cosh(p)\",\n                    description: \"The length of <strong>sec(Î¸)</strong> is equal to <strong>cosh(p)</strong>. This animation moves the secant line to the x-axis to represent cosh(p).\",\n                    action: (v) => {\n                        const secClone = elements['line-sec'].cloneNode(true);\n                        secClone.id = ''; secClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(secClone);\n                        requestAnimationFrame(() => {\n                            secClone.setAttribute('transform', `rotate(${-v.deg} 0 0)`);\n                            secClone.style.stroke = 'var(--color-cosh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Transform tan(Î¸) to sinh(p)\",\n                    description: \"Similarly, the length of <strong>tan(Î¸)</strong> is equal to <strong>sinh(p)</strong>. This animation moves the tangent line to its position on the hyperbola.\",\n                    action: (v) => {\n                        const tanClone = elements['line-tan'].cloneNode(true);\n                        tanClone.id = ''; tanClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(tanClone);\n                        requestAnimationFrame(() => {\n                            tanClone.setAttribute('transform', `translate(${v.Hx - 1} 0)`);\n                            tanClone.style.stroke = 'var(--color-sinh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Morph Areas\",\n                    description: \"Crucially, the area of the circular sector shown is <strong>Î¸/2</strong>. This is numerically equal to the hyperbolic sector area, <strong>p/2</strong>. This equality is the foundation of the geometric relationship.\",\n                    action: (v) => {\n                        const areaClone = elements['circular-area'].cloneNode(true);\n                        areaClone.id = ''; areaClone.classList.add('animating-clone');\n                        areaClone.style.fill = 'var(--color-p-area)';\n                        elements.animationLayer.appendChild(areaClone);\n                        const finalAreaD = generateAreaPath('hyperbolic', v.p, ANIMATION_SEGMENTS);\n                        requestAnimationFrame(() => {\n                            areaClone.setAttribute('d', finalAreaD);\n                        });\n                    }\n                }\n            ];\n\n            function setDemoStep(index) {\n                state.demo.step = index;\n                elements.animationLayer.innerHTML = '';\n                document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n\n                const step = demoSteps[index];\n                elements.demoExplanation.innerHTML = step.description;\n                elements.demoProgress.value = index;\n                elements.demoPrev.disabled = index === 0;\n                elements.demoNext.disabled = index === demoSteps.length - 1;\n\n                if (step.action) {\n                    step.action(state.demo.values);\n                }\n            }\n\n            function toggleDemo() {\n                state.demo.active = !state.demo.active;\n                if (state.demo.active) {\n                    state.demo.values = calculateValues(state.currentDeg);\n                    elements.demoToggleButton.textContent = \"End Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'true');\n                    elements.demoControls.hidden = false;\n                    slider.disabled = true;\n                    svg.style.cursor = 'default';\n                    handleBlur();\n                    setDemoStep(0);\n                } else {\n                    elements.demoToggleButton.textContent = \"Start Interactive Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'false');\n                    elements.demoControls.hidden = true;\n                    slider.disabled = false;\n                    svg.style.cursor = 'grab';\n                    elements.animationLayer.innerHTML = '';\n                    document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n                }\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.demo.active) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                document.querySelectorAll('.info-item[data-focus-group]').forEach(item => {\n                    item.addEventListener('mouseenter', handleFocus);\n                    item.addEventListener('mouseleave', handleBlur);\n                    item.addEventListener('focusin', handleFocus);\n                    item.addEventListener('focusout', handleBlur);\n                });\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg);\n                        });\n                    }\n                });\n\n                elements.demoToggleButton.addEventListener('click', toggleDemo);\n                elements.demoNext.addEventListener('click', () => setDemoStep(state.demo.step + 1));\n                elements.demoPrev.addEventListener('click', () => setDemoStep(state.demo.step - 1));\n                elements.demoProgress.addEventListener('input', () => setDemoStep(parseInt(elements.demoProgress.value)));\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:disabled {\n            background: var(--disabled-color);\n        }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb {\n            background: var(--disabled-text-color);\n        }\n        input[type=\"range\"]:disabled::-moz-range-thumb {\n            background: var(--disabled-text-color);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n            border-radius: 4px;\n        }\n        .info-item dt {\n            flex-grow: 1;\n        }\n        .info-item dt label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n            padding: 4px;\n            border-radius: 4px;\n        }\n        .info-item dt label:hover, .info-item dt label:focus-within {\n            background-color: var(--bg-color);\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n            padding-right: 4px;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt label {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        .demo-controls {\n            background-color: var(--bg-color);\n            border: 1px solid var(--color-grid);\n            border-radius: 8px;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        .demo-controls[hidden] {\n            display: none;\n        }\n        .demo-explanation {\n            font-size: 0.9rem;\n            color: var(--primary-text-color);\n            min-height: 100px;\n            background-color: var(--surface-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n        }\n        .demo-explanation strong {\n            color: var(--accent-color);\n            font-weight: 600;\n        }\n        .demo-nav {\n            display: flex;\n            gap: 0.75rem;\n            align-items: center;\n        }\n        .demo-nav button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 0.9rem;\n        }\n        .demo-nav button:hover:not(:disabled), .demo-nav button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        .demo-nav button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        #demo-progress {\n            height: 12px;\n        }\n        #demo-progress::-webkit-slider-thumb {\n            width: 18px;\n            height: 18px;\n        }\n        #demo-progress::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n        }\n\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line, #line-radius {\n            transition: opacity 0.3s ease, stroke-width 0.3s ease;\n        }\n        .in-focus-mode .trig-line, .in-focus-mode #line-radius {\n            opacity: 0.15;\n        }\n        .in-focus-mode .trig-line.is-focused, .in-focus-mode #line-radius.is-focused {\n            opacity: 1;\n            stroke-width: 0.05 !important;\n        }\n\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out, opacity 0.3s ease;\n        }\n        .in-focus-mode .dynamic-label {\n            opacity: 0;\n        }\n        .in-focus-mode .is-focused .dynamic-label {\n            opacity: 1;\n        }\n\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out, d 1s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Hover over function names in the panel to focus on them. Use the interactive demo to see how circular and hyperbolic functions are related.</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn. Hovering over a function name in the control panel isolates it visually. A stepped, interactive demo shows the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh).</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\" data-focus-group=\"cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\" data-focus-group=\"sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\" data-focus-group=\"cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\" data-focus-group=\"csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\" data-focus-group=\"tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\" data-focus-group=\"sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\" data-focus-group=\"cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\" data-focus-group=\"sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"animation-layer\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"control-group\">\n                <button id=\"demo-toggle-button\" type=\"button\">Start Interactive Demo</button>\n                <div id=\"demo-controls\" class=\"demo-controls\" hidden>\n                    <div id=\"demo-explanation\" class=\"demo-explanation\" aria-live=\"polite\"></div>\n                    <input type=\"range\" id=\"demo-progress\" min=\"0\" max=\"4\" step=\"1\" value=\"0\">\n                    <div class=\"demo-nav\">\n                        <button id=\"demo-prev\" type=\"button\">Previous</button>\n                        <button id=\"demo-next\" type=\"button\">Next</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <dl class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div class=\"info-item\" id=\"info-item-sin\" data-focus-group=\"sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cos\" data-focus-group=\"cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-tan\" data-focus-group=\"tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sec\" data-focus-group=\"sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-csc\" data-focus-group=\"csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cot\" data-focus-group=\"cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                </dl>\n                <dl id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div class=\"info-item\" id=\"info-item-cosh\" data-focus-group=\"cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sinh\" data-focus-group=\"sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                </dl>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                trigLinesGroup: document.getElementById('trig-lines'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n                // Demo controls\n                demoToggleButton: document.getElementById('demo-toggle-button'),\n                demoControls: document.getElementById('demo-controls'),\n                demoExplanation: document.getElementById('demo-explanation'),\n                demoProgress: document.getElementById('demo-progress'),\n                demoPrev: document.getElementById('demo-prev'),\n                demoNext: document.getElementById('demo-next'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                },\n                demo: {\n                    active: false,\n                    step: 0,\n                    values: {}\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 ';\n                const isCircular = type === 'circular';\n                const endPointX = isCircular ? Math.cos(param) : Math.cosh(param);\n                const endPointY = isCircular ? Math.sin(param) : Math.sinh(param);\n                pathD += `L ${isCircular ? 1 : endPointX} ${isCircular ? 0 : -endPointY} `;\n\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = isCircular ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = isCircular ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    const lx = (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad);\n                    const ly = (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad);\n                    elements[`label-${name}`].setAttribute('transform', `translate(${lx}, ${ly})`);\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                elements.demoToggleButton.disabled = !isHyperbolicDefined;\n            }\n\n            function calculateValues(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                return { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n            }\n\n            function render(deg) {\n                const values = calculateValues(deg);\n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            // --- Focus Mode ---\n            function handleFocus(event) {\n                const infoItem = event.currentTarget.closest('.info-item');\n                if (!infoItem || state.demo.active) return;\n                const focusGroup = infoItem.dataset.focusGroup;\n                if (!focusGroup || elements[`toggle-${focusGroup}`]?.checked === false) return;\n\n                elements.trigLinesGroup.classList.add('in-focus-mode');\n                elements.hyperbolicElements.classList.add('in-focus-mode');\n                \n                document.querySelectorAll(`[data-focus-group=\"${focusGroup}\"]`).forEach(el => el.classList.add('is-focused'));\n                \n                // Also highlight construction lines\n                const constructionMap = {\n                    sin: ['cos'], cos: ['sin'], tan: ['sec'], sec: ['tan'], csc: ['cot'], cot: ['csc']\n                };\n                if (['sin', 'cos', 'tan', 'sec', 'csc', 'cot'].includes(focusGroup)) {\n                    elements.lineRadius.classList.add('is-focused');\n                }\n            }\n\n            function handleBlur() {\n                if (state.demo.active) return;\n                elements.trigLinesGroup.classList.remove('in-focus-mode');\n                elements.hyperbolicElements.classList.remove('in-focus-mode');\n                document.querySelectorAll('.is-focused').forEach(el => el.classList.remove('is-focused'));\n            }\n\n            // --- Stepped Demo ---\n            const demoSteps = [\n                {\n                    title: \"Introduction\",\n                    description: \"This demo shows how <strong>sec(Î¸)</strong> and <strong>tan(Î¸)</strong> from the unit circle relate to <strong>cosh(p)</strong> and <strong>sinh(p)</strong> on the unit hyperbola. The key is that the circular sector area (Î¸/2) equals the hyperbolic sector area (p/2).\"\n                },\n                {\n                    title: \"Identify sec(Î¸) and tan(Î¸)\",\n                    description: \"On the unit circle, the line tangent at (1,0) gives us <strong>tan(Î¸)</strong>. The line from the origin to this point on the tangent is <strong>sec(Î¸)</strong>.\",\n                    action: (v) => {\n                        elements['group-sec'].classList.add('highlight-pulse');\n                        elements['group-tan'].classList.add('highlight-pulse');\n                    }\n                },\n                {\n                    title: \"Transform sec(Î¸) to cosh(p)\",\n                    description: \"The length of <strong>sec(Î¸)</strong> is equal to <strong>cosh(p)</strong>. This animation moves the secant line to the x-axis to represent cosh(p).\",\n                    action: (v) => {\n                        const secClone = elements['line-sec'].cloneNode(true);\n                        secClone.id = ''; secClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(secClone);\n                        requestAnimationFrame(() => {\n                            secClone.setAttribute('transform', `rotate(${-v.deg} 0 0)`);\n                            secClone.style.stroke = 'var(--color-cosh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Transform tan(Î¸) to sinh(p)\",\n                    description: \"Similarly, the length of <strong>tan(Î¸)</strong> is equal to <strong>sinh(p)</strong>. This animation moves the tangent line to its position on the hyperbola.\",\n                    action: (v) => {\n                        const tanClone = elements['line-tan'].cloneNode(true);\n                        tanClone.id = ''; tanClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(tanClone);\n                        requestAnimationFrame(() => {\n                            tanClone.setAttribute('transform', `translate(${v.Hx - 1} 0)`);\n                            tanClone.style.stroke = 'var(--color-sinh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Morph Areas\",\n                    description: \"Crucially, the area of the circular sector shown is <strong>Î¸/2</strong>. This is numerically equal to the hyperbolic sector area, <strong>p/2</strong>. This equality is the foundation of the geometric relationship.\",\n                    action: (v) => {\n                        const areaClone = elements['circular-area'].cloneNode(true);\n                        areaClone.id = ''; areaClone.classList.add('animating-clone');\n                        areaClone.style.fill = 'var(--color-p-area)';\n                        elements.animationLayer.appendChild(areaClone);\n                        const finalAreaD = generateAreaPath('hyperbolic', v.p, ANIMATION_SEGMENTS);\n                        requestAnimationFrame(() => {\n                            areaClone.setAttribute('d', finalAreaD);\n                        });\n                    }\n                }\n            ];\n\n            function setDemoStep(index) {\n                state.demo.step = index;\n                elements.animationLayer.innerHTML = '';\n                document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n\n                const step = demoSteps[index];\n                elements.demoExplanation.innerHTML = step.description;\n                elements.demoProgress.value = index;\n                elements.demoPrev.disabled = index === 0;\n                elements.demoNext.disabled = index === demoSteps.length - 1;\n\n                if (step.action) {\n                    step.action(state.demo.values);\n                }\n            }\n\n            function toggleDemo() {\n                state.demo.active = !state.demo.active;\n                if (state.demo.active) {\n                    state.demo.values = calculateValues(state.currentDeg);\n                    elements.demoToggleButton.textContent = \"End Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'true');\n                    elements.demoControls.hidden = false;\n                    slider.disabled = true;\n                    svg.style.cursor = 'default';\n                    handleBlur(); // Clear any existing focus\n                    setDemoStep(0);\n                } else {\n                    elements.demoToggleButton.textContent = \"Start Interactive Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'false');\n                    elements.demoControls.hidden = true;\n                    slider.disabled = false;\n                    svg.style.cursor = 'grab';\n                    elements.animationLayer.innerHTML = '';\n                    document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n                }\n            }\n\n            // --- Event Listeners ---\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.demo.active) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg);\n                        });\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        const label = elements[`info-item-${fn}`].querySelector('label, dt');\n                        if (label) {\n                            label.addEventListener('mouseenter', handleFocus);\n                            label.addEventListener('mouseleave', handleBlur);\n                            label.addEventListener('focusin', handleFocus);\n                            label.addEventListener('focusout', handleBlur);\n                        }\n                    }\n                });\n\n                // Demo listeners\n                elements.demoToggleButton.addEventListener('click', toggleDemo);\n                elements.demoNext.addEventListener('click', () => setDemoStep(state.demo.step + 1));\n                elements.demoPrev.addEventListener('click', () => setDemoStep(state.demo.step - 1));\n                elements.demoProgress.addEventListener('input', () => setDemoStep(parseInt(elements.demoProgress.value)));\n\n                // Drag listeners\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888; /* WCAG AA compliant (4.65:1 on #1e1e1e) */\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin: 0 auto;\n            padding: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-left: auto;\n            margin-right: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-item {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n        }\n        .info-item dt {\n            flex-grow: 1;\n        }\n        .info-item dt label {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            cursor: pointer;\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt label {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        #demo-button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.75rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 1rem;\n            width: 100%;\n        }\n        #demo-button:hover:not(:disabled), #demo-button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        #demo-button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line {\n            transition: opacity 0.3s ease;\n        }\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out;\n        }\n        .leader-line {\n            stroke: var(--secondary-text-color);\n            stroke-width: 0.01px;\n            fill: none;\n            opacity: 0.7;\n        }\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .is-fading-out {\n            animation: fadeOut 0.4s ease-out forwards;\n        }\n        @keyframes fadeOut {\n            from { opacity: 1; }\n            to { opacity: 0; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out;\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Use the toggles to show/hide functions. Observe the connection between circular and hyperbolic functions on the unit hyperbola (xÂ² â yÂ² = 1).</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn and their visibility can be toggled. A button demonstrates the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh) through an animation.</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"leader-lines-group\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n                \n                <g id=\"animation-layer\"></g>\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <dl class=\"info-group\">\n                    <h3>Trigonometric</h3>\n                    <div class=\"info-item\" id=\"info-item-sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" role=\"presentation\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" role=\"presentation\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                    <div class=\"info-item\" id=\"info-item-tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" role=\"presentation\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" role=\"presentation\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" role=\"presentation\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                </dl>\n                <dl id=\"hyperbolic-info-group\" class=\"info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3>Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <div class=\"info-item\" id=\"info-item-cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" role=\"presentation\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                    <div class=\"info-item\" id=\"info-item-sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" role=\"presentation\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" role=\"presentation\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" role=\"presentation\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                    <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" role=\"presentation\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                </dl>\n            </div>\n            <div class=\"control-group\">\n                <button id=\"demo-button\" type=\"button\">Demonstrate Connection</button>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            const demoButton = document.getElementById('demo-button');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                leaderLinesGroup: document.getElementById('leader-lines-group'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDemoRunning: false,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || isNaN(val)) return 'N/A';\n                if (val === Infinity) return 'â â';\n                if (val === -Infinity) return 'â ââ';\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x} ${-y} `;\n                    pathD_bottom += `L ${x} ${y} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 L 1,0 ';\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = type === 'circular' ? Math.cos(currentP) : Math.sin(currentP);\n                    const y = type === 'circular' ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const labelData = {};\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    labelData[name] = {\n                        el: elements[`label-${name}`],\n                        anchorX: (x1 + x2) / 2,\n                        anchorY: (y1 + y2) / 2,\n                        offsetX: labelOffset * Math.sin(labelAngleRad),\n                        offsetY: -labelOffset * Math.cos(labelAngleRad),\n                        x: 0, y: 0,\n                        bbox: null\n                    };\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n                \n                resolveLabelCollisions(labelData);\n            }\n            \n            function resolveLabelCollisions(labelData) {\n                elements.leaderLinesGroup.innerHTML = '';\n                const activeLabels = Object.values(labelData).filter(d => state.visibility[d.el.id.replace('label-', '')]);\n\n                activeLabels.forEach(d => {\n                    d.x = d.anchorX + d.offsetX;\n                    d.y = d.anchorY + d.offsetY;\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    d.bbox = d.el.getBBox();\n                });\n\n                const checkOverlap = (d1, d2) => {\n                    const pad = 0.05;\n                    return d1.x - d1.bbox.width / 2 - pad < d2.x + d2.bbox.width / 2 + pad &&\n                           d1.x + d1.bbox.width / 2 + pad > d2.x - d2.bbox.width / 2 - pad &&\n                           d1.y - d1.bbox.height / 2 - pad < d2.y + d2.bbox.height / 2 + pad &&\n                           d1.y + d1.bbox.height / 2 + pad > d2.y - d2.bbox.height / 2 - pad;\n                };\n\n                for (let i = 0; i < 5; i++) { // Iterative nudging\n                    let collisions = 0;\n                    for (let j = 0; j < activeLabels.length; j++) {\n                        for (let k = j + 1; k < activeLabels.length; k++) {\n                            const d1 = activeLabels[j];\n                            const d2 = activeLabels[k];\n                            if (checkOverlap(d1, d2)) {\n                                collisions++;\n                                const dx = d2.x - d1.x;\n                                const dy = d2.y - d1.y;\n                                const dist = Math.sqrt(dx * dx + dy * dy) + EPSILON;\n                                const move = 0.05 / dist;\n                                d1.x -= dx * move; d1.y -= dy * move;\n                                d2.x += dx * move; d2.y += dy * move;\n                            }\n                        }\n                    }\n                    if (collisions === 0) break;\n                }\n\n                activeLabels.forEach(d => {\n                    d.el.setAttribute('transform', `translate(${d.x}, ${d.y})`);\n                    const distMoved = Math.sqrt(Math.pow(d.x - (d.anchorX + d.offsetX), 2) + Math.pow(d.y - (d.anchorY + d.offsetY), 2));\n                    if (distMoved > 0.02) {\n                        const leader = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n                        leader.setAttribute('class', 'leader-line');\n                        leader.setAttribute('d', `M ${d.anchorX} ${d.anchorY} L ${d.x} ${d.y}`);\n                        elements.leaderLinesGroup.appendChild(leader);\n                    }\n                });\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                demoButton.disabled = !isHyperbolicDefined || state.isDemoRunning;\n            }\n\n            function render(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                const values = { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n                \n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            function createAnnotation(text, x, y) {\n                const textEl = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n                textEl.setAttribute('class', 'demo-annotation');\n                textEl.setAttribute('x', x);\n                textEl.setAttribute('y', y);\n                textEl.textContent = text;\n                elements.animationLayer.appendChild(textEl);\n                return textEl;\n            }\n\n            /**\n             * Linearly interpolates the numerical values within two SVG path 'd' strings.\n             * Assumes both paths have the same structure and number of points.\n             * @param {string} d1 - The starting path data.\n             * @param {string} d2 - The ending path data.\n             * @param {number} t - The interpolation factor (0.0 to 1.0).\n             * @returns {string} The interpolated path data.\n             */\n            function interpolatePath(d1, d2, t) {\n                const numRegex = /-?[\\d.e-]+/g;\n                const nums1 = d1.match(numRegex)?.map(Number) || [];\n                const nums2 = d2.match(numRegex)?.map(Number) || [];\n\n                if (nums1.length !== nums2.length || nums1.length === 0) return d2;\n\n                let i = 0;\n                return d1.replace(numRegex, () => {\n                    const val = nums1[i] * (1 - t) + nums2[i] * t;\n                    i++;\n                    return val.toFixed(5);\n                });\n            }\n\n            async function runConnectionDemo() {\n                if (state.isDemoRunning) return;\n                state.isDemoRunning = true;\n                slider.disabled = true;\n                demoButton.disabled = true;\n                svg.style.cursor = 'wait';\n                svg.setAttribute('aria-busy', 'true');\n                elements.animationLayer.innerHTML = '';\n\n                const rad = state.currentDeg * Math.PI / 180;\n                const secVal = 1 / Math.cos(rad);\n                const p = Math.acosh(secVal);\n                const Hx = Math.cosh(p);\n\n                // Stage 1: Highlight sec and tan\n                const annotation1 = createAnnotation('sec(Î¸) and tan(Î¸) define the point', 0, 1.8);\n                elements['group-sec'].classList.add('highlight-pulse');\n                elements['group-tan'].classList.add('highlight-pulse');\n                await sleep(2500);\n                elements['group-sec'].classList.remove('highlight-pulse');\n                elements['group-tan'].classList.remove('highlight-pulse');\n                annotation1.remove();\n\n                // Stage 2 & 3: Animate sec -> cosh and tan -> sinh\n                const annotation2 = createAnnotation('sec(Î¸) â cosh(p)', -1.2, 1.8);\n                const annotation3 = createAnnotation('tan(Î¸) â sinh(p)', 1.2, 1.8);\n\n                const secClone = elements['line-sec'].cloneNode(true);\n                secClone.id = ''; secClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(secClone);\n                \n                const tanClone = elements['line-tan'].cloneNode(true);\n                tanClone.id = ''; tanClone.classList.add('animating-clone');\n                elements.animationLayer.appendChild(tanClone);\n\n                const secAnimation = new Promise(resolve => {\n                    secClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        secClone.setAttribute('transform', `rotate(${-state.currentDeg} 0 0)`);\n                        secClone.style.stroke = 'var(--color-cosh)';\n                    });\n                });\n                \n                const tanAnimation = new Promise(resolve => {\n                    tanClone.addEventListener('transitionend', resolve, { once: true });\n                    requestAnimationFrame(() => {\n                        tanClone.setAttribute('transform', `translate(${Hx - 1} 0)`);\n                        tanClone.style.stroke = 'var(--color-sinh)';\n                    });\n                });\n\n                await Promise.all([secAnimation, tanAnimation]);\n                await sleep(2500);\n                annotation2.remove();\n                annotation3.remove();\n\n                // Stage 4: Morph area\n                const annotation4 = createAnnotation('Area: Î¸/2 = p/2', 0, 1.8);\n                const areaClone = elements['circular-area'].cloneNode(true);\n                areaClone.id = '';\n                elements.animationLayer.appendChild(areaClone);\n                const finalAreaD = generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS);\n                const areaAnimation = new Promise(resolve => {\n                    let start = null;\n                    const duration = 1000;\n                    const startD = areaClone.getAttribute('d');\n                    const ease = t => t < 0.5 ? 4 * t * t * t : 1 - Math.pow(-2 * t + 2, 3) / 2;\n\n                    function morph(timestamp) {\n                        if (!start) start = timestamp;\n                        const progress = Math.min((timestamp - start) / duration, 1);\n                        areaClone.setAttribute('d', interpolatePath(startD, finalAreaD, ease(progress)));\n                        if (progress < 1) requestAnimationFrame(morph);\n                        else resolve();\n                    }\n                    requestAnimationFrame(morph);\n                });\n                \n                await areaAnimation;\n                await sleep(2500);\n\n                // Cleanup\n                elements.animationLayer.innerHTML = '';\n                state.isDemoRunning = false;\n                slider.disabled = false;\n                svg.style.cursor = 'grab';\n                svg.setAttribute('aria-busy', 'false');\n                render(state.currentDeg);\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.isDemoRunning) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                demoButton.addEventListener('click', runConnectionDemo);\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg); // Re-render to update label collisions\n                        });\n                    }\n                });\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement a user-controlled, stepped animation for the 'Demonstrate Connection' feature. Replace the single-play button with 'Next/Previous Step' controls and a scrubbable progress bar. Each step should isolate a part of the transformation (e.g., '1. Identify sec(Î¸) and tan(Î¸)', '2. Transform sec(Î¸) to cosh(p)', '3. Transform tan(Î¸) to sinh(p)', '4. Morph areas') and display a persistent, clear textual explanation in the control panel. This transforms the passive demo into an interactive, self-paced learning module, dramatically increasing its educational value and robustness by removing brittle `sleep()` timers.; Introduce an interactive 'Focus Mode' to solve visual clutter and improve clarity. When a user hovers over or clicks a function in the info panel (e.g., 'tan(Î¸)'), the corresponding line and its construction geometry in the SVG are highlighted (full opacity, thicker stroke), while all other trigonometric lines fade to low opacity. This allows users to isolate and study each function's geometric definition without being overwhelmed, making the tool more exploratory and accessible for learning. This would replace the complex and imperfect label collision logic with a more intuitive, user-driven approach to managing visual information.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html {\n                scroll-behavior: auto;\n            }\n            *, *::before, *::after, *::backdrop {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin-inline: auto;\n            padding-inline: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-inline: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:disabled {\n            background: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb {\n            background: var(--disabled-text-color);\n        }\n        input[type=\"range\"]:disabled::-moz-range-thumb {\n            background: var(--disabled-text-color);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group > h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group > dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: grid;\n            grid-template-columns: 1fr auto;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n            border-radius: 4px;\n        }\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 4px;\n            border-radius: 4px;\n        }\n        .info-item dt > label {\n            display: contents; /* Allow label to wrap contents without adding a DOM node for layout */\n            cursor: pointer;\n        }\n        .info-item dt:has(> label):hover, .info-item dt:has(> label):focus-within {\n            background-color: var(--bg-color);\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n            padding-right: 4px;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        .demo-controls {\n            background-color: var(--bg-color);\n            border: 1px solid var(--color-grid);\n            border-radius: 8px;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        .demo-controls[hidden] {\n            display: none;\n        }\n        .demo-explanation {\n            font-size: 0.9rem;\n            color: var(--primary-text-color);\n            min-height: 100px;\n            background-color: var(--surface-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n        }\n        .demo-explanation strong {\n            color: var(--accent-color);\n            font-weight: 600;\n        }\n        .demo-nav {\n            display: flex;\n            gap: 0.75rem;\n            align-items: center;\n        }\n        .demo-nav button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 0.9rem;\n        }\n        .demo-nav button:hover:not(:disabled), .demo-nav button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        .demo-nav button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        #demo-progress {\n            height: 12px;\n        }\n        #demo-progress::-webkit-slider-thumb {\n            width: 18px;\n            height: 18px;\n        }\n        #demo-progress::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n        }\n\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line, #line-radius {\n            transition: opacity 0.3s ease, stroke-width 0.3s ease;\n        }\n        .in-focus-mode .trig-line, .in-focus-mode #line-radius {\n            opacity: 0.15;\n        }\n        .in-focus-mode .trig-line.is-focused, .in-focus-mode #line-radius.is-focused {\n            opacity: 1;\n            stroke-width: 0.05 !important;\n        }\n\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out, opacity 0.3s ease;\n        }\n        .in-focus-mode .dynamic-label {\n            opacity: 0;\n        }\n        .in-focus-mode .is-focused .dynamic-label {\n            opacity: 1;\n        }\n\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out, d 1s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Hover over or focus on function names in the panel to highlight them in the visualization. Use the interactive demo to see how circular and hyperbolic functions are related.</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn. Hovering over a function name in the control panel isolates it visually. A stepped, interactive demo shows the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh).</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\" data-focus-group=\"cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\" data-focus-group=\"sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\" data-focus-group=\"cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\" data-focus-group=\"csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\" data-focus-group=\"tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\" data-focus-group=\"sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\" data-focus-group=\"cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\" data-focus-group=\"sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"animation-layer\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" aria-hidden=\"true\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"control-group\">\n                <button id=\"demo-toggle-button\" type=\"button\" aria-pressed=\"false\">Start Interactive Demo</button>\n                <div id=\"demo-controls\" class=\"demo-controls\" hidden>\n                    <div id=\"demo-explanation\" class=\"demo-explanation\" aria-live=\"polite\" role=\"status\"></div>\n                    <label for=\"demo-progress\" class=\"visually-hidden\">Demo Step</label>\n                    <input type=\"range\" id=\"demo-progress\" min=\"0\" max=\"4\" step=\"1\" value=\"0\">\n                    <div class=\"demo-nav\">\n                        <button id=\"demo-prev\" type=\"button\">Previous</button>\n                        <button id=\"demo-next\" type=\"button\">Next</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\" id=\"trig-info-group\">\n                    <h3 id=\"trig-info-heading\">Trigonometric</h3>\n                    <dl aria-labelledby=\"trig-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-sin\" data-focus-group=\"sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cos\" data-focus-group=\"cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-tan\" data-focus-group=\"tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sec\" data-focus-group=\"sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-csc\" data-focus-group=\"csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cot\" data-focus-group=\"cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                    </dl>\n                </div>\n                <div class=\"info-group\" id=\"hyperbolic-info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3 id=\"hyperbolic-info-heading\">Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <dl aria-labelledby=\"hyperbolic-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-cosh\" data-focus-group=\"cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sinh\" data-focus-group=\"sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                trigLinesGroup: document.getElementById('trig-lines'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n                demoToggleButton: document.getElementById('demo-toggle-button'),\n                demoControls: document.getElementById('demo-controls'),\n                demoExplanation: document.getElementById('demo-explanation'),\n                demoProgress: document.getElementById('demo-progress'),\n                demoPrev: document.getElementById('demo-prev'),\n                demoNext: document.getElementById('demo-next'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                },\n                demo: {\n                    active: false,\n                    step: 0,\n                    values: {}\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || !isFinite(val)) {\n                    if (val === Infinity) return 'â â';\n                    if (val === -Infinity) return 'â ââ';\n                    return 'undef';\n                }\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                    pathD_bottom += `L ${x.toPrecision(5)} ${y.toPrecision(5)} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 ';\n                const isCircular = type === 'circular';\n                const endPointX = isCircular ? Math.cos(param) : Math.cosh(param);\n                const endPointY = isCircular ? Math.sin(param) : Math.sinh(param);\n                pathD += `L ${isCircular ? 1 : endPointX} ${isCircular ? 0 : -endPointY} `;\n\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = isCircular ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = isCircular ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    const lx = (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad);\n                    const ly = (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad);\n                    elements[`label-${name}`].setAttribute('transform', `translate(${lx}, ${ly})`);\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                elements.demoToggleButton.disabled = !isHyperbolicDefined;\n            }\n\n            function calculateValues(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                return { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n            }\n\n            function render(deg) {\n                const values = calculateValues(deg);\n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (prefersReducedMotion || Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleFocus(event) {\n                const infoItem = event.currentTarget;\n                if (!infoItem || state.demo.active) return;\n                const focusGroup = infoItem.dataset.focusGroup;\n                if (!focusGroup || elements[`toggle-${focusGroup}`]?.checked === false) return;\n\n                elements.trigLinesGroup.classList.add('in-focus-mode');\n                elements.hyperbolicElements.classList.add('in-focus-mode');\n                \n                document.querySelectorAll(`[data-focus-group=\"${focusGroup}\"]`).forEach(el => el.classList.add('is-focused'));\n                \n                if (['sin', 'cos', 'tan', 'sec', 'csc', 'cot'].includes(focusGroup)) {\n                    elements.lineRadius.classList.add('is-focused');\n                }\n            }\n\n            function handleBlur() {\n                if (state.demo.active) return;\n                elements.trigLinesGroup.classList.remove('in-focus-mode');\n                elements.hyperbolicElements.classList.remove('in-focus-mode');\n                document.querySelectorAll('.is-focused').forEach(el => el.classList.remove('is-focused'));\n            }\n\n            const demoSteps = [\n                {\n                    title: \"Introduction\",\n                    description: \"This demo shows how <strong>sec(Î¸)</strong> and <strong>tan(Î¸)</strong> from the unit circle relate to <strong>cosh(p)</strong> and <strong>sinh(p)</strong> on the unit hyperbola. The key is that the circular sector area (Î¸/2) equals the hyperbolic sector area (p/2).\"\n                },\n                {\n                    title: \"Identify sec(Î¸) and tan(Î¸)\",\n                    description: \"On the unit circle, the line tangent at (1,0) gives us <strong>tan(Î¸)</strong>. The line from the origin to this point on the tangent is <strong>sec(Î¸)</strong>.\",\n                    action: (v) => {\n                        elements['group-sec'].classList.add('highlight-pulse');\n                        elements['group-tan'].classList.add('highlight-pulse');\n                    }\n                },\n                {\n                    title: \"Transform sec(Î¸) to cosh(p)\",\n                    description: \"The length of <strong>sec(Î¸)</strong> is equal to <strong>cosh(p)</strong>. This animation moves the secant line to the x-axis to represent cosh(p).\",\n                    action: (v) => {\n                        const secClone = elements['line-sec'].cloneNode(true);\n                        secClone.id = ''; secClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(secClone);\n                        requestAnimationFrame(() => {\n                            secClone.setAttribute('transform', `rotate(${-v.deg} 0 0)`);\n                            secClone.style.stroke = 'var(--color-cosh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Transform tan(Î¸) to sinh(p)\",\n                    description: \"Similarly, the length of <strong>tan(Î¸)</strong> is equal to <strong>sinh(p)</strong>. This animation moves the tangent line to its position on the hyperbola.\",\n                    action: (v) => {\n                        const tanClone = elements['line-tan'].cloneNode(true);\n                        tanClone.id = ''; tanClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(tanClone);\n                        requestAnimationFrame(() => {\n                            tanClone.setAttribute('transform', `translate(${v.Hx - 1} 0)`);\n                            tanClone.style.stroke = 'var(--color-sinh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Morph Areas\",\n                    description: \"Crucially, the area of the circular sector shown is <strong>Î¸/2</strong>. This is numerically equal to the hyperbolic sector area, <strong>p/2</strong>. This equality is the foundation of the geometric relationship.\",\n                    action: (v) => {\n                        const areaClone = elements['circular-area'].cloneNode(true);\n                        areaClone.id = ''; areaClone.classList.add('animating-clone');\n                        areaClone.style.fill = 'var(--color-p-area)';\n                        elements.animationLayer.appendChild(areaClone);\n                        const finalAreaD = generateAreaPath('hyperbolic', v.p, ANIMATION_SEGMENTS);\n                        requestAnimationFrame(() => {\n                            areaClone.setAttribute('d', finalAreaD);\n                        });\n                    }\n                }\n            ];\n\n            function setDemoStep(index) {\n                state.demo.step = index;\n                elements.animationLayer.innerHTML = '';\n                document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n\n                const step = demoSteps[index];\n                elements.demoExplanation.innerHTML = step.description;\n                elements.demoProgress.value = index;\n                elements.demoPrev.disabled = index === 0;\n                elements.demoNext.disabled = index === demoSteps.length - 1;\n\n                if (step.action) {\n                    step.action(state.demo.values);\n                }\n            }\n\n            function toggleDemo() {\n                state.demo.active = !state.demo.active;\n                if (state.demo.active) {\n                    state.demo.values = calculateValues(state.currentDeg);\n                    elements.demoToggleButton.textContent = \"End Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'true');\n                    elements.demoControls.hidden = false;\n                    slider.disabled = true;\n                    svg.style.cursor = 'default';\n                    handleBlur();\n                    setDemoStep(0);\n                } else {\n                    elements.demoToggleButton.textContent = \"Start Interactive Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'false');\n                    elements.demoControls.hidden = true;\n                    slider.disabled = false;\n                    svg.style.cursor = 'grab';\n                    elements.animationLayer.innerHTML = '';\n                    document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n                }\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.demo.active) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                document.querySelectorAll('.info-item[data-focus-group]').forEach(item => {\n                    item.addEventListener('mouseenter', handleFocus);\n                    item.addEventListener('mouseleave', handleBlur);\n                    item.addEventListener('focusin', handleFocus);\n                    item.addEventListener('focusout', handleBlur);\n                });\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg);\n                        });\n                    }\n                });\n\n                elements.demoToggleButton.addEventListener('click', toggleDemo);\n                elements.demoNext.addEventListener('click', () => setDemoStep(state.demo.step + 1));\n                elements.demoPrev.addEventListener('click', () => setDemoStep(state.demo.step - 1));\n                elements.demoProgress.addEventListener('input', () => setDemoStep(parseInt(elements.demoProgress.value)));\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": [
            "Refactor the 'Interactive Demo' into a single, fluid, scrubbable animation. Replace the current discrete 'Next'/'Previous' steps with a new 'Transformation Progress' slider (0-100%). As the user scrubs this new slider, the `sec(Î¸)` line should smoothly rotate and morph into the `cosh(p)` line, the `tan(Î¸)` line should translate into the `sinh(p)` line, and most importantly, the circular area sector (`Î¸/2`) must visually and smoothly interpolate its path shape to become the hyperbolic area sector (`p/2`). This directly fulfills the core 'CONNECTED Animation' concept by allowing users to explore the geometric transformation continuously, rather than observing disjointed steps.",
            "Implement a direct input mode for the angle and add a dynamic equation display. Augment the current angle slider and display with a text input field that accepts degrees (e.g., '45', '120deg') and radians (e.g., 'pi/4', '1.57rad'). Below the visualization, add a new panel that displays the key connecting equations with live values, such as 'p = ln(sec(Î¸) + tan(Î¸)) = ln(1.414 + 1.000) = 0.881'. Make this display interactive, so hovering over 'sec(Î¸)' in the equation highlights both the secant line on the circle and the cosh line on the hyperbola, visually reinforcing their equality in real-time."
          ]
        },
        {
          "iterationNumber": 6,
          "title": "Final Polish & Fix",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptHtml_BugFix": "AI-Generated HTML for Final, ABSOLUTE Production Readiness (CRITICAL WARNING: Assume, despite all prior work, SUBTLE AND CRITICAL FLAWS may still exist):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html {\n                scroll-behavior: auto;\n            }\n            *, *::before, *::after, *::backdrop {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin-inline: auto;\n            padding-inline: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-inline: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:disabled {\n            background: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb {\n            background: var(--disabled-text-color);\n        }\n        input[type=\"range\"]:disabled::-moz-range-thumb {\n            background: var(--disabled-text-color);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group > h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group > dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: grid;\n            grid-template-columns: 1fr auto;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n            border-radius: 4px;\n        }\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 4px;\n            border-radius: 4px;\n        }\n        .info-item dt > label {\n            display: contents; /* Allow label to wrap contents without adding a DOM node for layout */\n            cursor: pointer;\n        }\n        .info-item dt:has(> label):hover, .info-item dt:has(> label):focus-within {\n            background-color: var(--bg-color);\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n            padding-right: 4px;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        .demo-controls {\n            background-color: var(--bg-color);\n            border: 1px solid var(--color-grid);\n            border-radius: 8px;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        .demo-controls[hidden] {\n            display: none;\n        }\n        .demo-explanation {\n            font-size: 0.9rem;\n            color: var(--primary-text-color);\n            min-height: 100px;\n            background-color: var(--surface-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n        }\n        .demo-explanation strong {\n            color: var(--accent-color);\n            font-weight: 600;\n        }\n        .demo-nav {\n            display: flex;\n            gap: 0.75rem;\n            align-items: center;\n        }\n        .demo-nav button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 0.9rem;\n        }\n        .demo-nav button:hover:not(:disabled), .demo-nav button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        .demo-nav button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        #demo-progress {\n            height: 12px;\n        }\n        #demo-progress::-webkit-slider-thumb {\n            width: 18px;\n            height: 18px;\n        }\n        #demo-progress::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n        }\n\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line, #line-radius {\n            transition: opacity 0.3s ease, stroke-width 0.3s ease;\n        }\n        .in-focus-mode .trig-line, .in-focus-mode #line-radius {\n            opacity: 0.15;\n        }\n        .in-focus-mode .trig-line.is-focused, .in-focus-mode #line-radius.is-focused {\n            opacity: 1;\n            stroke-width: 0.05 !important;\n        }\n\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out, opacity 0.3s ease;\n        }\n        .in-focus-mode .dynamic-label {\n            opacity: 0;\n        }\n        .in-focus-mode .is-focused .dynamic-label {\n            opacity: 1;\n        }\n\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out, d 1s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Hover over or focus on function names in the panel to highlight them in the visualization. Use the interactive demo to see how circular and hyperbolic functions are related.</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\" lang=\"en\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn. Hovering over a function name in the control panel isolates it visually. A stepped, interactive demo shows the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh).</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\" data-focus-group=\"cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\" data-focus-group=\"sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\" data-focus-group=\"cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\" data-focus-group=\"csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\" data-focus-group=\"tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\" data-focus-group=\"sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\" data-focus-group=\"cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\" data-focus-group=\"sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"animation-layer\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" aria-hidden=\"true\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"control-group\">\n                <button id=\"demo-toggle-button\" type=\"button\" aria-pressed=\"false\">Start Interactive Demo</button>\n                <div id=\"demo-controls\" class=\"demo-controls\" hidden>\n                    <div id=\"demo-explanation\" class=\"demo-explanation\" aria-live=\"polite\" role=\"status\"></div>\n                    <label for=\"demo-progress\" class=\"visually-hidden\">Demo Step</label>\n                    <input type=\"range\" id=\"demo-progress\" min=\"0\" max=\"4\" step=\"1\" value=\"0\">\n                    <div class=\"demo-nav\">\n                        <button id=\"demo-prev\" type=\"button\">Previous</button>\n                        <button id=\"demo-next\" type=\"button\">Next</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\" id=\"trig-info-group\">\n                    <h3 id=\"trig-info-heading\">Trigonometric</h3>\n                    <dl aria-labelledby=\"trig-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-sin\" data-focus-group=\"sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cos\" data-focus-group=\"cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-tan\" data-focus-group=\"tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sec\" data-focus-group=\"sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-csc\" data-focus-group=\"csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cot\" data-focus-group=\"cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                    </dl>\n                </div>\n                <div class=\"info-group\" id=\"hyperbolic-info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3 id=\"hyperbolic-info-heading\">Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <dl aria-labelledby=\"hyperbolic-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-cosh\" data-focus-group=\"cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sinh\" data-focus-group=\"sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>&copy; 2024 Interactive Trigonometry Explorer. All rights reserved.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                trigLinesGroup: document.getElementById('trig-lines'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n                demoToggleButton: document.getElementById('demo-toggle-button'),\n                demoControls: document.getElementById('demo-controls'),\n                demoExplanation: document.getElementById('demo-explanation'),\n                demoProgress: document.getElementById('demo-progress'),\n                demoPrev: document.getElementById('demo-prev'),\n                demoNext: document.getElementById('demo-next'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                },\n                demo: {\n                    active: false,\n                    step: 0,\n                    values: {}\n                }\n            };\n\n            function formatValue(val) {\n                if (val === null || val === undefined || !isFinite(val)) {\n                    if (val === Infinity) return 'â â';\n                    if (val === -Infinity) return 'â ââ';\n                    return 'undef';\n                }\n                return val.toFixed(3);\n            }\n\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                    pathD_bottom += `L ${x.toPrecision(5)} ${y.toPrecision(5)} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 ';\n                const isCircular = type === 'circular';\n                const endPointX = isCircular ? Math.cos(param) : Math.cosh(param);\n                const endPointY = isCircular ? Math.sin(param) : Math.sinh(param);\n                pathD += `L ${isCircular ? 1 : endPointX} ${isCircular ? 0 : -endPointY} `;\n\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = isCircular ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = isCircular ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    const lx = (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad);\n                    const ly = (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad);\n                    elements[`label-${name}`].setAttribute('transform', `translate(${lx}, ${ly})`);\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n            }\n\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                elements.demoToggleButton.disabled = !isHyperbolicDefined;\n            }\n\n            function calculateValues(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                return { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n            }\n\n            function render(deg) {\n                const values = calculateValues(deg);\n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (prefersReducedMotion || Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                } else {\n                    state.currentDeg += diff * 0.15; // Easing\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleFocus(event) {\n                const infoItem = event.currentTarget;\n                if (!infoItem || state.demo.active) return;\n                const focusGroup = infoItem.dataset.focusGroup;\n                if (!focusGroup || elements[`toggle-${focusGroup}`]?.checked === false) return;\n\n                elements.trigLinesGroup.classList.add('in-focus-mode');\n                elements.hyperbolicElements.classList.add('in-focus-mode');\n                \n                document.querySelectorAll(`[data-focus-group=\"${focusGroup}\"]`).forEach(el => el.classList.add('is-focused'));\n                \n                if (['sin', 'cos', 'tan', 'sec', 'csc', 'cot'].includes(focusGroup)) {\n                    elements.lineRadius.classList.add('is-focused');\n                }\n            }\n\n            function handleBlur() {\n                if (state.demo.active) return;\n                elements.trigLinesGroup.classList.remove('in-focus-mode');\n                elements.hyperbolicElements.classList.remove('in-focus-mode');\n                document.querySelectorAll('.is-focused').forEach(el => el.classList.remove('is-focused'));\n            }\n\n            const demoSteps = [\n                {\n                    title: \"Introduction\",\n                    description: \"This demo shows how <strong>sec(Î¸)</strong> and <strong>tan(Î¸)</strong> from the unit circle relate to <strong>cosh(p)</strong> and <strong>sinh(p)</strong> on the unit hyperbola. The key is that the circular sector area (Î¸/2) equals the hyperbolic sector area (p/2).\"\n                },\n                {\n                    title: \"Identify sec(Î¸) and tan(Î¸)\",\n                    description: \"On the unit circle, the line tangent at (1,0) gives us <strong>tan(Î¸)</strong>. The line from the origin to this point on the tangent is <strong>sec(Î¸)</strong>.\",\n                    action: (v) => {\n                        elements['group-sec'].classList.add('highlight-pulse');\n                        elements['group-tan'].classList.add('highlight-pulse');\n                    }\n                },\n                {\n                    title: \"Transform sec(Î¸) to cosh(p)\",\n                    description: \"The length of <strong>sec(Î¸)</strong> is equal to <strong>cosh(p)</strong>. This animation moves the secant line to the x-axis to represent cosh(p).\",\n                    action: (v) => {\n                        const secClone = elements['line-sec'].cloneNode(true);\n                        secClone.id = ''; secClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(secClone);\n                        requestAnimationFrame(() => {\n                            secClone.setAttribute('transform', `rotate(${-v.deg} 0 0)`);\n                            secClone.style.stroke = 'var(--color-cosh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Transform tan(Î¸) to sinh(p)\",\n                    description: \"Similarly, the length of <strong>tan(Î¸)</strong> is equal to <strong>sinh(p)</strong>. This animation moves the tangent line to its position on the hyperbola.\",\n                    action: (v) => {\n                        const tanClone = elements['line-tan'].cloneNode(true);\n                        tanClone.id = ''; tanClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(tanClone);\n                        requestAnimationFrame(() => {\n                            tanClone.setAttribute('transform', `translate(${v.Hx - 1} 0)`);\n                            tanClone.style.stroke = 'var(--color-sinh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Morph Areas\",\n                    description: \"Crucially, the area of the circular sector shown is <strong>Î¸/2</strong>. This is numerically equal to the hyperbolic sector area, <strong>p/2</strong>. This equality is the foundation of the geometric relationship.\",\n                    action: (v) => {\n                        const areaClone = elements['circular-area'].cloneNode(true);\n                        areaClone.id = ''; areaClone.classList.add('animating-clone');\n                        areaClone.style.fill = 'var(--color-p-area)';\n                        elements.animationLayer.appendChild(areaClone);\n                        const finalAreaD = generateAreaPath('hyperbolic', v.p, ANIMATION_SEGMENTS);\n                        requestAnimationFrame(() => {\n                            areaClone.setAttribute('d', finalAreaD);\n                        });\n                    }\n                }\n            ];\n\n            function setDemoStep(index) {\n                state.demo.step = index;\n                elements.animationLayer.innerHTML = '';\n                document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n\n                const step = demoSteps[index];\n                elements.demoExplanation.innerHTML = step.description;\n                elements.demoProgress.value = index;\n                elements.demoPrev.disabled = index === 0;\n                elements.demoNext.disabled = index === demoSteps.length - 1;\n\n                if (step.action) {\n                    step.action(state.demo.values);\n                }\n            }\n\n            function toggleDemo() {\n                state.demo.active = !state.demo.active;\n                if (state.demo.active) {\n                    state.demo.values = calculateValues(state.currentDeg);\n                    elements.demoToggleButton.textContent = \"End Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'true');\n                    elements.demoControls.hidden = false;\n                    slider.disabled = true;\n                    svg.style.cursor = 'default';\n                    handleBlur();\n                    setDemoStep(0);\n                } else {\n                    elements.demoToggleButton.textContent = \"Start Interactive Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'false');\n                    elements.demoControls.hidden = true;\n                    slider.disabled = false;\n                    svg.style.cursor = 'grab';\n                    elements.animationLayer.innerHTML = '';\n                    document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n                }\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.demo.active) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.style.cursor = 'grabbing';\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.style.cursor = 'grab';\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                document.querySelectorAll('.info-item[data-focus-group]').forEach(item => {\n                    item.addEventListener('mouseenter', handleFocus);\n                    item.addEventListener('mouseleave', handleBlur);\n                    item.addEventListener('focusin', handleFocus);\n                    item.addEventListener('focusout', handleBlur);\n                });\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg);\n                        });\n                    }\n                });\n\n                elements.demoToggleButton.addEventListener('click', toggleDemo);\n                elements.demoNext.addEventListener('click', () => setDemoStep(state.demo.step + 1));\n                elements.demoPrev.addEventListener('click', () => setDemoStep(state.demo.step - 1));\n                elements.demoProgress.addEventListener('input', () => setDemoStep(parseInt(elements.demoProgress.value)));\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>\n```\nPerform an exhaustive, uncompromising final review and polish as per your 'CodeValidator OmegaPrime' persona and system instructions. Scrutinize every conceivable aspect: functionality (including all edge cases), bug eradication, styling and layout precision, flawless responsiveness, universal accessibility (WCAG 2.1 AA+), peak performance, code quality, and security best practices. Ensure all features are 100% complete, utterly intuitive, and any underdeveloped or unrefined aspects are fully addressed to an absolutely production-PERFECT standard. The output must be the final, polished, complete, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle &amp; Hyperbolic Trigonometry</title>\n    <style>\n        :root {\n            --bg-color: #121212;\n            --surface-color: #1e1e1e;\n            --primary-text-color: #e0e0e0;\n            --secondary-text-color: #a0a0a0;\n            --accent-color: #03dac6;\n            --accent-color-dark: #018786;\n            --error-color: #cf6679;\n            --disabled-color: #404040;\n            --disabled-text-color: #888888;\n\n            --font-family-sans: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n            --font-family-mono: \"SF Mono\", \"Fira Code\", \"Fira Mono\", \"Roboto Mono\", monospace;\n\n            /* Visualization Colors */\n            --color-grid: #333;\n            --color-axis: #666;\n            --color-circle: #888;\n            --color-hyperbola: #f0a060;\n            --color-radius: var(--accent-color);\n            --color-projection: rgba(3, 218, 198, 0.5);\n            \n            --color-sin: #ff6b6b;\n            --color-cos: #4d96ff;\n            --color-tan: #f9c74f;\n            --color-sec: #90be6d;\n            --color-csc: #f8961e;\n            --color-cot: #577590;\n\n            --color-sinh: #ff8fab;\n            --color-cosh: #bde0fe;\n            --color-p-area: rgba(189, 224, 254, 0.2);\n            --color-theta-area: rgba(3, 218, 198, 0.15);\n            \n            --slider-progress: 12.5%; /* 45/360 */\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html {\n                scroll-behavior: auto;\n            }\n            *, *::before, *::after, *::backdrop {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        html {\n            font-size: 16px;\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-family-sans);\n            background-color: var(--bg-color);\n            color: var(--primary-text-color);\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            line-height: 1.6;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1600px;\n            margin-inline: auto;\n            padding-inline: 1rem;\n        }\n\n        header {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            border-bottom: 1px solid var(--surface-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-text-color);\n            font-weight: 600;\n        }\n\n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--secondary-text-color);\n            margin-top: 0.5rem;\n            max-width: 800px;\n            margin-inline: auto;\n        }\n\n        main {\n            flex-grow: 1;\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 2rem;\n            padding: 2rem 1rem;\n        }\n\n        @media (min-width: 1024px) {\n            main {\n                grid-template-columns: minmax(0, 1fr) 380px;\n                align-items: start;\n            }\n        }\n\n        .visualization-wrapper {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1rem;\n            min-height: 50vh;\n            overflow: hidden;\n            position: relative;\n        }\n\n        #trig-visualization {\n            width: 100%;\n            height: 100%;\n            max-height: 75vh;\n            font-family: var(--font-family-mono);\n            user-select: none;\n            cursor: grab;\n        }\n        #trig-visualization:active {\n            cursor: grabbing;\n        }\n        body.is-demo-active #trig-visualization {\n            cursor: default;\n        }\n\n        .controls-and-info {\n            background-color: var(--surface-color);\n            border-radius: 12px;\n            padding: 1.5rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n        \n        @media (min-width: 1024px) {\n            .controls-and-info {\n                position: sticky;\n                top: 2rem;\n                max-height: calc(100vh - 4rem);\n                overflow-y: auto;\n            }\n        }\n\n        .control-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-group-title {\n            font-weight: 500;\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--color-grid);\n            margin: 0;\n        }\n\n        #angle-display {\n            font-family: var(--font-family-mono);\n            font-size: 1.1rem;\n            color: var(--accent-color);\n            font-weight: bold;\n            text-align: center;\n            background: var(--bg-color);\n            padding: 0.5rem;\n            border-radius: 6px;\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: linear-gradient(to right, var(--accent-color) var(--slider-progress), var(--bg-color) var(--slider-progress));\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n            transition: background 0.1s linear, opacity 0.2s ease;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 24px;\n            height: 24px;\n            background: var(--accent-color);\n            border-radius: 50%;\n            border: 3px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb,\n        input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb,\n        input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color-dark);\n        }\n        input[type=\"range\"]:disabled {\n            background: var(--disabled-color);\n            cursor: not-allowed;\n            opacity: 0.7;\n        }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb {\n            background: var(--disabled-text-color);\n        }\n        input[type=\"range\"]:disabled::-moz-range-thumb {\n            background: var(--disabled-text-color);\n        }\n\n        .info-panel {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n            transition: opacity 0.3s ease;\n        }\n        body.is-demo-active .info-panel {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n            transition: opacity 0.3s ease;\n        }\n        .info-group[aria-disabled=\"true\"] {\n            opacity: 0.6;\n            pointer-events: none;\n        }\n\n        .info-group > h3 {\n            font-size: 1.1rem;\n            color: var(--primary-text-color);\n            border-bottom: 2px solid var(--accent-color);\n            padding-bottom: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .info-group > dl {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .info-item {\n            display: grid;\n            grid-template-columns: 1fr auto;\n            align-items: center;\n            font-family: var(--font-family-mono);\n            font-size: 0.9rem;\n            gap: 1rem;\n            transition: opacity 0.2s ease, color 0.2s ease;\n            border-radius: 4px;\n        }\n        .info-item dt {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n            padding: 4px;\n            border-radius: 4px;\n        }\n        .info-item dt > label {\n            display: contents; /* Allow label to wrap contents without adding a DOM node for layout */\n        }\n        .info-item dt:has(> label) {\n            cursor: pointer;\n        }\n        .info-item dt:has(> label):hover, .info-item dt:has(> label):focus-within {\n            background-color: var(--bg-color);\n        }\n        .info-item.is-static dt {\n            cursor: default;\n        }\n        .info-item dd {\n            font-weight: bold;\n            color: var(--primary-text-color);\n            min-width: 60px;\n            text-align: right;\n            padding-right: 4px;\n        }\n        .info-item .color-swatch {\n            width: 12px;\n            height: 12px;\n            border-radius: 2px;\n            flex-shrink: 0;\n        }\n        .info-item.is-hidden {\n            opacity: 0.5;\n        }\n        .info-item.is-hidden dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined {\n            opacity: 0.6;\n            color: var(--disabled-text-color);\n        }\n        .info-item.is-undefined dd {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] {\n            color: var(--disabled-text-color);\n        }\n        .info-item[aria-disabled=\"true\"] dt {\n            cursor: not-allowed;\n        }\n        .info-item[aria-disabled=\"true\"] dd {\n            color: var(--disabled-text-color);\n        }\n\n        input[type=\"checkbox\"].visibility-toggle {\n            -webkit-appearance: none;\n            appearance: none;\n            position: relative;\n            width: 42px;\n            height: 22px;\n            background-color: var(--bg-color);\n            border-radius: 11px;\n            cursor: pointer;\n            transition: background-color 0.2s ease;\n            border: 1px solid var(--secondary-text-color);\n            flex-shrink: 0;\n        }\n        input[type=\"checkbox\"].visibility-toggle::before {\n            content: '';\n            position: absolute;\n            width: 16px;\n            height: 16px;\n            border-radius: 50%;\n            background-color: var(--secondary-text-color);\n            top: 2px;\n            left: 2px;\n            transition: transform 0.2s ease, background-color 0.2s ease;\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked {\n            background-color: var(--accent-color-dark);\n            border-color: var(--accent-color-dark);\n        }\n        input[type=\"checkbox\"].visibility-toggle:checked::before {\n            transform: translateX(20px);\n            background-color: var(--surface-color);\n        }\n        input[type=\"checkbox\"].visibility-toggle:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled {\n            background-color: var(--disabled-color);\n            border-color: var(--disabled-color);\n            cursor: not-allowed;\n        }\n        input[type=\"checkbox\"].visibility-toggle:disabled::before {\n            background-color: var(--secondary-text-color);\n        }\n\n        .demo-controls {\n            background-color: var(--bg-color);\n            border: 1px solid var(--color-grid);\n            border-radius: 8px;\n            padding: 1rem;\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n        .demo-controls[hidden] {\n            display: none;\n        }\n        .demo-explanation {\n            font-size: 0.9rem;\n            color: var(--primary-text-color);\n            min-height: 100px;\n            background-color: var(--surface-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n        }\n        .demo-explanation strong {\n            color: var(--accent-color);\n            font-weight: 600;\n        }\n        .demo-nav {\n            display: flex;\n            gap: 0.75rem;\n            align-items: center;\n        }\n        .demo-nav button {\n            background-color: var(--accent-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: 6px;\n            font-weight: 600;\n            cursor: pointer;\n            transition: background-color 0.2s ease, opacity 0.2s ease;\n            font-size: 0.9rem;\n        }\n        .demo-nav button:hover:not(:disabled), .demo-nav button:focus-visible:not(:disabled) {\n            background-color: var(--accent-color-dark);\n        }\n        .demo-nav button:disabled {\n            background-color: var(--disabled-color);\n            color: var(--disabled-text-color);\n            cursor: not-allowed;\n        }\n        #demo-progress {\n            height: 12px;\n        }\n        #demo-progress::-webkit-slider-thumb {\n            width: 18px;\n            height: 18px;\n        }\n        #demo-progress::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n        }\n\n        .notice-text {\n            font-size: 0.85rem;\n            color: var(--secondary-text-color);\n            background-color: var(--bg-color);\n            padding: 0.75rem;\n            border-radius: 4px;\n            text-align: center;\n            border: 1px solid var(--color-grid);\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem 1rem;\n            margin-top: auto;\n            font-size: 0.9rem;\n            color: var(--secondary-text-color);\n            border-top: 1px solid var(--surface-color);\n        }\n        \n        footer a {\n            color: var(--accent-color);\n            text-decoration: none;\n            border-radius: 2px;\n            font-weight: 500;\n        }\n        \n        footer a:hover, footer a:focus-visible {\n            text-decoration: underline;\n            text-decoration-thickness: 2px;\n            text-underline-offset: 3px;\n        }\n        footer a:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .visually-hidden {\n            clip: rect(0 0 0 0);\n            clip-path: inset(50%);\n            height: 1px;\n            overflow: hidden;\n            position: absolute;\n            white-space: nowrap;\n            width: 1px;\n        }\n\n        /* SVG Specific Styles */\n        .trig-line, #line-radius {\n            transition: opacity 0.3s ease, stroke-width 0.3s ease;\n        }\n        .in-focus-mode .trig-line, .in-focus-mode #line-radius {\n            opacity: 0.15;\n        }\n        .in-focus-mode .trig-line.is-focused, .in-focus-mode #line-radius.is-focused {\n            opacity: 1;\n            stroke-width: 0.05 !important;\n        }\n\n        .dynamic-label {\n            font-size: 0.12px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.05px;\n            pointer-events: none;\n            transition: transform 0.1s ease-out, opacity 0.3s ease;\n        }\n        .in-focus-mode .dynamic-label {\n            opacity: 0;\n        }\n        .in-focus-mode .is-focused .dynamic-label {\n            opacity: 1;\n        }\n\n        .angle-label {\n            font-size: 0.15px;\n            text-anchor: middle;\n            dominant-baseline: middle;\n            fill: var(--accent-color);\n            font-weight: bold;\n        }\n        .axis-label {\n            fill: var(--secondary-text-color);\n            font-size: 0.1px;\n            text-anchor: middle;\n        }\n        .highlight-pulse {\n            animation: pulse 1.2s infinite ease-in-out;\n        }\n        @keyframes pulse {\n            0%, 100% { stroke-width: 0.03; }\n            50% { stroke-width: 0.07; }\n        }\n        .animating-clone {\n            transition: transform 1s cubic-bezier(0.65, 0, 0.35, 1), stroke 0.5s ease-in-out, d 1s cubic-bezier(0.65, 0, 0.35, 1);\n        }\n        .demo-annotation {\n            font-size: 0.1px;\n            fill: var(--primary-text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--bg-color);\n            stroke-width: 0.04px;\n            opacity: 0;\n            animation: fadeIn 0.5s ease-out forwards;\n        }\n        @keyframes fadeIn {\n            to { opacity: 1; }\n        }\n        path {\n            transition: d 0.1s linear;\n        }\n    </style>\n</head>\n<body>\n\n    <header class=\"container\">\n        <h1>Interactive Unit Circle &amp; Hyperbolic Trigonometry</h1>\n        <p>Drag the point on the circle or use the slider to change the angle (Î¸). Hover over or focus on function names in the panel to highlight them in the visualization. Use the interactive demo to see how circular and hyperbolic functions are related.</p>\n    </header>\n\n    <main class=\"container\">\n        <section class=\"visualization-wrapper\" aria-labelledby=\"viz-title\">\n            <svg id=\"trig-visualization\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" role=\"img\" aria-labelledby=\"viz-title viz-desc\" aria-busy=\"false\">\n                <title id=\"viz-title\">Interactive Trigonometry Visualization</title>\n                <desc id=\"viz-desc\">An interactive diagram showing the unit circle and unit hyperbola. A point on the circle can be moved by dragging or using a slider. Lines representing sin, cos, tan, sec, csc, and cot are drawn. Hovering over a function name in the control panel isolates it visually. A stepped, interactive demo shows the geometric relationship between circular functions (sec, tan) and hyperbolic functions (cosh, sinh).</desc>\n                \n                <defs>\n                    <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--color-axis)\">\n                        <polygon points=\"0 0, 10 3.5, 0 7\" />\n                    </marker>\n                </defs>\n\n                <g id=\"grid-group\" stroke=\"var(--color-grid)\" stroke-width=\"0.01\">\n                    <line x1=\"-2\" y1=\"-1\" x2=\"2\" y2=\"-1\" /><line x1=\"-2\" y1=\"1\" x2=\"2\" y2=\"1\" />\n                    <line x1=\"-1\" y1=\"-2\" x2=\"-1\" y2=\"2\" /><line x1=\"1\" y1=\"-2\" x2=\"1\" y2=\"2\" />\n                </g>\n\n                <g id=\"axes-group\" stroke=\"var(--color-axis)\" stroke-width=\"0.02\">\n                    <line x1=\"-2.1\" y1=\"0\" x2=\"2.1\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                    <line x1=\"0\" y1=\"2.1\" x2=\"0\" y2=\"-2.1\" marker-end=\"url(#arrowhead)\" />\n                    <text class=\"axis-label\" x=\"2.1\" y=\"-0.1\">x</text>\n                    <text class=\"axis-label\" x=\"0.1\" y=\"-2.1\">y</text>\n                </g>\n\n                <circle cx=\"0\" cy=\"0\" r=\"1\" fill=\"none\" stroke=\"var(--color-circle)\" stroke-width=\"0.02\" />\n                <path id=\"hyperbola-path\" fill=\"none\" stroke=\"var(--color-hyperbola)\" stroke-width=\"0.02\" stroke-dasharray=\"0.05 0.05\" />\n\n                <g id=\"areas-group\">\n                    <path id=\"circular-area\" fill=\"var(--color-theta-area)\" stroke=\"none\" opacity=\"0.7\" />\n                    <path id=\"hyperbolic-area\" fill=\"var(--color-p-area)\" stroke=\"none\" opacity=\"0.7\" />\n                </g>\n\n                <g id=\"hyperbolic-elements\">\n                    <g id=\"group-cosh\" class=\"trig-line\" data-focus-group=\"cosh\">\n                        <line id=\"line-cosh\" x1=\"0\" y1=\"0\" stroke=\"var(--color-cosh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cosh\" class=\"dynamic-label\" fill=\"var(--color-cosh)\">cosh</text>\n                    </g>\n                    <g id=\"group-sinh\" class=\"trig-line\" data-focus-group=\"sinh\">\n                        <line id=\"line-sinh\" y1=\"0\" stroke=\"var(--color-sinh)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sinh\" class=\"dynamic-label\" fill=\"var(--color-sinh)\">sinh</text>\n                    </g>\n                    <circle id=\"point-H\" r=\"0.04\" fill=\"var(--color-hyperbola)\" />\n                    <line id=\"projection-line\" stroke=\"var(--color-projection)\" stroke-width=\"0.015\" stroke-dasharray=\"0.04 0.04\" />\n                </g>\n\n                <path id=\"angle-arc\" fill=\"none\" stroke=\"var(--color-radius)\" stroke-width=\"0.02\" />\n                <text id=\"angle-label\" class=\"angle-label\">Î¸</text>\n\n                <g id=\"trig-lines\">\n                    <g id=\"group-cot\" class=\"trig-line\" data-focus-group=\"cot\">\n                        <line id=\"line-cot\" x1=\"0\" y1=\"-1\" stroke=\"var(--color-cot)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cot\" class=\"dynamic-label\" fill=\"var(--color-cot)\">cot</text>\n                    </g>\n                    <g id=\"group-csc\" class=\"trig-line\" data-focus-group=\"csc\">\n                        <line id=\"line-csc\" x1=\"0\" y1=\"0\" y2=\"-1\" stroke=\"var(--color-csc)\" stroke-width=\"0.03\" />\n                        <text id=\"label-csc\" class=\"dynamic-label\" fill=\"var(--color-csc)\">csc</text>\n                    </g>\n                    <g id=\"group-tan\" class=\"trig-line\" data-focus-group=\"tan\">\n                        <line id=\"line-tan\" x1=\"1\" y1=\"0\" stroke=\"var(--color-tan)\" stroke-width=\"0.03\" />\n                        <text id=\"label-tan\" class=\"dynamic-label\" fill=\"var(--color-tan)\">tan</text>\n                    </g>\n                    <g id=\"group-sec\" class=\"trig-line\" data-focus-group=\"sec\">\n                        <line id=\"line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" stroke=\"var(--color-sec)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sec\" class=\"dynamic-label\" fill=\"var(--color-sec)\">sec</text>\n                    </g>\n                    <g id=\"group-cos\" class=\"trig-line\" data-focus-group=\"cos\">\n                        <line id=\"line-cos\" x2=\"0\" y2=\"0\" stroke=\"var(--color-cos)\" stroke-width=\"0.03\" />\n                        <text id=\"label-cos\" class=\"dynamic-label\" fill=\"var(--color-cos)\">cos</text>\n                    </g>\n                    <g id=\"group-sin\" class=\"trig-line\" data-focus-group=\"sin\">\n                        <line id=\"line-sin\" y2=\"0\" stroke=\"var(--color-sin)\" stroke-width=\"0.03\" />\n                        <text id=\"label-sin\" class=\"dynamic-label\" fill=\"var(--color-sin)\">sin</text>\n                    </g>\n                    <line id=\"line-radius\" x1=\"0\" y1=\"0\" stroke=\"var(--color-radius)\" stroke-width=\"0.03\" />\n                </g>\n                \n                <g id=\"animation-layer\"></g>\n\n                <circle id=\"point-P\" r=\"0.04\" fill=\"var(--accent-color)\" style=\"pointer-events: none;\" />\n                <circle id=\"point-P-hitbox\" r=\"0.2\" fill=\"transparent\" style=\"cursor: grab;\" tabindex=\"-1\" aria-hidden=\"true\" />\n                <circle cx=\"0\" cy=\"0\" r=\"0.03\" fill=\"var(--bg-color)\" stroke=\"var(--primary-text-color)\" stroke-width=\"0.01\" />\n            </svg>\n        </section>\n\n        <aside class=\"controls-and-info\">\n            <div class=\"control-group\" role=\"group\" aria-labelledby=\"control-group-title-angle\">\n                <h2 id=\"control-group-title-angle\" class=\"control-group-title\">Angle (Î¸) Control</h2>\n                <label for=\"angle-slider\" class=\"visually-hidden\">Angle (Î¸)</label>\n                <input type=\"range\" id=\"angle-slider\" min=\"0\" max=\"360\" step=\"0.5\" value=\"45\" aria-valuetext=\"Angle: 45.0 degrees\">\n                <div id=\"angle-display\" aria-live=\"polite\">45.0Â° / 0.785 rad</div>\n            </div>\n\n            <div class=\"control-group\">\n                <button id=\"demo-toggle-button\" type=\"button\" aria-pressed=\"false\">Start Interactive Demo</button>\n                <div id=\"demo-controls\" class=\"demo-controls\" hidden>\n                    <div id=\"demo-explanation\" class=\"demo-explanation\" aria-live=\"polite\" role=\"status\"></div>\n                    <label for=\"demo-progress\" class=\"visually-hidden\">Demo Step</label>\n                    <input type=\"range\" id=\"demo-progress\" min=\"0\" max=\"4\" step=\"1\" value=\"0\">\n                    <div class=\"demo-nav\">\n                        <button id=\"demo-prev\" type=\"button\">Previous</button>\n                        <button id=\"demo-next\" type=\"button\">Next</button>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"info-panel\" role=\"group\" aria-labelledby=\"info-panel-title\">\n                <h2 id=\"info-panel-title\" class=\"visually-hidden\">Function Controls and Values</h2>\n                <div class=\"info-group\" id=\"trig-info-group\">\n                    <h3 id=\"trig-info-heading\">Trigonometric</h3>\n                    <dl aria-labelledby=\"trig-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-sin\" data-focus-group=\"sin\"><dt><label><input type=\"checkbox\" id=\"toggle-sin\" class=\"visibility-toggle\" data-target=\"sin\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sin);\" aria-hidden=\"true\"></span>sin(Î¸)</label></dt><dd id=\"val-sin\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cos\" data-focus-group=\"cos\"><dt><label><input type=\"checkbox\" id=\"toggle-cos\" class=\"visibility-toggle\" data-target=\"cos\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cos);\" aria-hidden=\"true\"></span>cos(Î¸)</label></dt><dd id=\"val-cos\">0.707</dd></div>\n                        <div class=\"info-item\" id=\"info-item-tan\" data-focus-group=\"tan\"><dt><label><input type=\"checkbox\" id=\"toggle-tan\" class=\"visibility-toggle\" data-target=\"tan\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tan(Î¸)</label></dt><dd id=\"val-tan\">1.000</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sec\" data-focus-group=\"sec\"><dt><label><input type=\"checkbox\" id=\"toggle-sec\" class=\"visibility-toggle\" data-target=\"sec\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sec);\" aria-hidden=\"true\"></span>sec(Î¸)</label></dt><dd id=\"val-sec\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-csc\" data-focus-group=\"csc\"><dt><label><input type=\"checkbox\" id=\"toggle-csc\" class=\"visibility-toggle\" data-target=\"csc\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-csc);\" aria-hidden=\"true\"></span>csc(Î¸)</label></dt><dd id=\"val-csc\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-cot\" data-focus-group=\"cot\"><dt><label><input type=\"checkbox\" id=\"toggle-cot\" class=\"visibility-toggle\" data-target=\"cot\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cot);\" aria-hidden=\"true\"></span>cot(Î¸)</label></dt><dd id=\"val-cot\">1.000</dd></div>\n                    </dl>\n                </div>\n                <div class=\"info-group\" id=\"hyperbolic-info-group\" aria-describedby=\"hyperbolic-notice\">\n                    <h3 id=\"hyperbolic-info-heading\">Hyperbolic</h3>\n                    <p id=\"hyperbolic-notice\" class=\"notice-text\" hidden>Hyperbolic functions are defined when sec(Î¸) â¥ 1 (approx. -90Â° to +90Â°).</p>\n                    <dl aria-labelledby=\"hyperbolic-info-heading\">\n                        <div class=\"info-item\" id=\"info-item-cosh\" data-focus-group=\"cosh\"><dt><label><input type=\"checkbox\" id=\"toggle-cosh\" class=\"visibility-toggle\" data-target=\"cosh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-cosh);\" aria-hidden=\"true\"></span>cosh(p)</label></dt><dd id=\"val-cosh\">1.414</dd></div>\n                        <div class=\"info-item\" id=\"info-item-sinh\" data-focus-group=\"sinh\"><dt><label><input type=\"checkbox\" id=\"toggle-sinh\" class=\"visibility-toggle\" data-target=\"sinh\" checked><span class=\"color-swatch\" style=\"background-color: var(--color-sinh);\" aria-hidden=\"true\"></span>sinh(p)</label></dt><dd id=\"val-sinh\">1.000</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-tan);\" aria-hidden=\"true\"></span>tanh(p)</dt><dd id=\"val-tanh\">0.707</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--color-p-area);\" aria-hidden=\"true\"></span>Area (p/2)</dt><dd id=\"val-area\">0.441</dd></div>\n                        <div class=\"info-item is-static\"><dt><span class=\"color-swatch\" style=\"background-color: var(--accent-color);\" aria-hidden=\"true\"></span>Parameter (p)</dt><dd id=\"val-p\">0.881</dd></div>\n                    </dl>\n                </div>\n            </div>\n        </aside>\n    </main>\n\n    <footer class=\"container\">\n        <p>An interactive visualization by OmegaPrime. View <a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener noreferrer\">source on GitHub</a>.</p>\n    </footer>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', () => {\n            const svg = document.getElementById('trig-visualization');\n            const slider = document.getElementById('angle-slider');\n            \n            const elements = {\n                angleDisplay: document.getElementById('angle-display'),\n                pointP: document.getElementById('point-P'),\n                pointPHitbox: document.getElementById('point-P-hitbox'),\n                pointH: document.getElementById('point-H'),\n                lineRadius: document.getElementById('line-radius'),\n                angleArc: document.getElementById('angle-arc'),\n                angleLabel: document.getElementById('angle-label'),\n                hyperbolaPath: document.getElementById('hyperbola-path'),\n                hyperbolicElements: document.getElementById('hyperbolic-elements'),\n                hyperbolicInfoGroup: document.getElementById('hyperbolic-info-group'),\n                hyperbolicNotice: document.getElementById('hyperbolic-notice'),\n                circularArea: document.getElementById('circular-area'),\n                hyperbolicArea: document.getElementById('hyperbolic-area'),\n                projectionLine: document.getElementById('projection-line'),\n                animationLayer: document.getElementById('animation-layer'),\n                trigLinesGroup: document.getElementById('trig-lines'),\n                valSin: document.getElementById('val-sin'), valCos: document.getElementById('val-cos'),\n                valTan: document.getElementById('val-tan'), valSec: document.getElementById('val-sec'),\n                valCsc: document.getElementById('val-csc'), valCot: document.getElementById('val-cot'),\n                valP: document.getElementById('val-p'), valSinh: document.getElementById('val-sinh'),\n                valCosh: document.getElementById('val-cosh'), valTanh: document.getElementById('val-tanh'),\n                valArea: document.getElementById('val-area'),\n                demoToggleButton: document.getElementById('demo-toggle-button'),\n                demoControls: document.getElementById('demo-controls'),\n                demoExplanation: document.getElementById('demo-explanation'),\n                demoProgress: document.getElementById('demo-progress'),\n                demoPrev: document.getElementById('demo-prev'),\n                demoNext: document.getElementById('demo-next'),\n            };\n\n            const ALL_FUNCTIONS = ['sin', 'cos', 'tan', 'sec', 'csc', 'cot', 'sinh', 'cosh'];\n            ALL_FUNCTIONS.forEach(fn => {\n                elements[`line-${fn}`] = document.getElementById(`line-${fn}`);\n                elements[`label-${fn}`] = document.getElementById(`label-${fn}`);\n                elements[`group-${fn}`] = document.getElementById(`group-${fn}`);\n                elements[`toggle-${fn}`] = document.getElementById(`toggle-${fn}`);\n                elements[`info-item-${fn}`] = document.getElementById(`info-item-${fn}`);\n            });\n\n            const SVG_BOUNDS = 2.2;\n            const EPSILON = 1e-9;\n            const ARC_RADIUS = 0.3;\n            const LABEL_RADIUS = 0.4;\n            const ANIMATION_SEGMENTS = 50;\n            const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n            const state = {\n                currentDeg: parseFloat(slider.value),\n                targetDeg: parseFloat(slider.value),\n                animationFrameId: null,\n                isDragging: false,\n                visibility: {\n                    sin: true, cos: true, tan: true, sec: true, csc: true, cot: true, sinh: true, cosh: true\n                },\n                demo: {\n                    active: false,\n                    step: 0,\n                    values: {}\n                }\n            };\n\n            /**\n             * Formats a numeric value for display, handling undefined and infinite cases.\n             * @param {number | null | undefined} val The value to format.\n             * @returns {string} The formatted string (e.g., \"1.234\", \"â â\", \"undef\").\n             */\n            function formatValue(val) {\n                if (val === null || val === undefined || !isFinite(val)) {\n                    if (val === Infinity) return 'â â';\n                    if (val === -Infinity) return 'â ââ';\n                    return 'undef';\n                }\n                return val.toFixed(3);\n            }\n\n            /**\n             * Generates the SVG path data for the unit hyperbola.\n             * @param {number} maxP The maximum hyperbolic parameter 'p' to draw.\n             * @param {number} [steps=50] The number of line segments to use.\n             * @returns {string} The SVG 'd' attribute string for the path.\n             */\n            function generateHyperbolaPath(maxP, steps = 50) {\n                let pathD_top = 'M 1 0 ';\n                let pathD_bottom = 'M 1 0 ';\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (x > SVG_BOUNDS) break;\n                    pathD_top += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                    pathD_bottom += `L ${x.toPrecision(5)} ${y.toPrecision(5)} `;\n                }\n                return pathD_top + pathD_bottom;\n            }\n\n            /**\n             * Generates the SVG path data for a circular or hyperbolic sector area.\n             * @param {'circular' | 'hyperbolic'} type The type of area to generate.\n             * @param {number} param The angle in radians (for circular) or parameter 'p' (for hyperbolic).\n             * @param {number} segments The number of segments for the curve.\n             * @returns {string} The SVG 'd' attribute string for the path.\n             */\n            function generateAreaPath(type, param, segments) {\n                if (Math.abs(param) < EPSILON) return 'M 0,0 Z';\n                let pathD = 'M 0,0 ';\n                const isCircular = type === 'circular';\n                const endPointX = isCircular ? Math.cos(param) : Math.cosh(param);\n                const endPointY = isCircular ? Math.sin(param) : Math.sinh(param);\n                pathD += `L ${isCircular ? 1 : endPointX} ${isCircular ? 0 : -endPointY} `;\n\n                for (let i = 1; i <= segments; i++) {\n                    const t = i / segments;\n                    const currentP = t * param;\n                    const x = isCircular ? Math.cos(currentP) : Math.cosh(currentP);\n                    const y = isCircular ? Math.sin(currentP) : Math.sinh(currentP);\n                    pathD += `L ${x.toPrecision(5)} ${(-y).toPrecision(5)} `;\n                }\n                pathD += 'Z';\n                return pathD;\n            }\n\n            /**\n             * Updates the visibility of SVG elements based on the state.visibility object.\n             */\n            function updateVisibility() {\n                for (const fn in state.visibility) {\n                    const isVisible = state.visibility[fn];\n                    if (elements[`group-${fn}`]) {\n                        elements[`group-${fn}`].style.visibility = isVisible ? 'visible' : 'hidden';\n                    }\n                    if (elements[`info-item-${fn}`]) {\n                        elements[`info-item-${fn}`].classList.toggle('is-hidden', !isVisible);\n                    }\n                }\n            }\n\n            /**\n             * Updates all SVG elements based on calculated trigonometric values.\n             * @param {object} values - An object containing all calculated trig values.\n             */\n            function updateSvgElements(values) {\n                const { rad, s, c, t, sec, csc, cot, Px, Py, p, Hx, Hy, isHyperbolicDefined } = values;\n\n                elements.pointP.setAttribute('cx', Px);\n                elements.pointP.setAttribute('cy', Py);\n                elements.pointPHitbox.setAttribute('cx', Px);\n                elements.pointPHitbox.setAttribute('cy', Py);\n                elements.lineRadius.setAttribute('x2', Px);\n                elements.lineRadius.setAttribute('y2', Py);\n\n                const largeArcFlag = (state.currentDeg % 360) > 180 ? 1 : 0;\n                const arcPath = `M ${ARC_RADIUS} 0 A ${ARC_RADIUS} ${ARC_RADIUS} 0 ${largeArcFlag} 0 ${ARC_RADIUS * c} ${-ARC_RADIUS * s}`;\n                elements.angleArc.setAttribute('d', arcPath);\n                elements.angleLabel.setAttribute('x', LABEL_RADIUS * Math.cos(rad / 2));\n                elements.angleLabel.setAttribute('y', -LABEL_RADIUS * Math.sin(rad / 2));\n\n                elements.circularArea.setAttribute('d', generateAreaPath('circular', rad, ANIMATION_SEGMENTS));\n\n                const setLineAndLabel = (name, x1, y1, x2, y2) => {\n                    elements[`line-${name}`].setAttribute('x1', x1);\n                    elements[`line-${name}`].setAttribute('y1', y1);\n                    elements[`line-${name}`].setAttribute('x2', x2);\n                    elements[`line-${name}`].setAttribute('y2', y2);\n\n                    const labelOffset = (name === 'cos' || name === 'cot' || name === 'cosh') ? 0.12 : -0.12;\n                    const labelAngleRad = Math.atan2(y2 - y1, x2 - x1);\n                    const lx = (x1 + x2) / 2 + labelOffset * Math.sin(labelAngleRad);\n                    const ly = (y1 + y2) / 2 - labelOffset * Math.cos(labelAngleRad);\n                    elements[`label-${name}`].setAttribute('transform', `translate(${lx}, ${ly})`);\n                };\n\n                setLineAndLabel('sin', Px, Py, Px, 0);\n                setLineAndLabel('cos', Px, 0, 0, 0);\n                setLineAndLabel('tan', 1, 0, 1, -t);\n                setLineAndLabel('sec', 0, 0, 1, -t);\n                setLineAndLabel('csc', 0, 0, cot, -1);\n                setLineAndLabel('cot', cot, -1, 0, -1);\n\n                elements.hyperbolicElements.style.visibility = isHyperbolicDefined ? 'visible' : 'hidden';\n                if (isHyperbolicDefined) {\n                    elements.pointH.setAttribute('cx', Hx);\n                    elements.pointH.setAttribute('cy', Hy);\n                    setLineAndLabel('cosh', 0, 0, Hx, 0);\n                    setLineAndLabel('sinh', Hx, 0, Hx, Hy);\n                    elements.hyperbolicArea.setAttribute('d', generateAreaPath('hyperbolic', p, ANIMATION_SEGMENTS));\n                    elements.projectionLine.setAttribute('x1', 1);\n                    elements.projectionLine.setAttribute('y1', -t);\n                    elements.projectionLine.setAttribute('x2', Hx);\n                    elements.projectionLine.setAttribute('y2', Hy);\n                } else {\n                    elements.hyperbolicArea.setAttribute('d', 'M 0,0 Z');\n                }\n            }\n\n            /**\n             * Updates the information panel with calculated values and state.\n             * @param {object} values - An object containing all calculated trig values.\n             */\n            function updateInfoPanel(values) {\n                const { deg, rad, s, c, t, sec, csc, cot, p, sinh_p, cosh_p, tanh_p, isHyperbolicDefined } = values;\n\n                const normDeg = (deg % 360 + 360) % 360;\n                const normRad = (rad % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI);\n                elements.angleDisplay.textContent = `${normDeg.toFixed(1)}Â° / ${normRad.toFixed(3)} rad`;\n                slider.setAttribute('aria-valuetext', `Angle: ${normDeg.toFixed(1)} degrees`);\n                slider.style.setProperty('--slider-progress', `${(normDeg / 360) * 100}%`);\n\n                const valueMap = { sin: s, cos: c, tan: t, sec: sec, csc: csc, cot: cot, p: p, sinh: sinh_p, cosh: cosh_p, tanh: tanh_p };\n                \n                for (const fnName in valueMap) {\n                    const value = valueMap[fnName];\n                    const valEl = elements[`val-${fnName}`];\n                    if (valEl) valEl.textContent = formatValue(value);\n                    \n                    const itemEl = elements[`info-item-${fnName}`];\n                    if (itemEl) {\n                        const isUndef = !isFinite(value);\n                        itemEl.classList.toggle('is-undefined', isUndef);\n                        \n                        const toggleEl = elements[`toggle-${fnName}`];\n                        if (toggleEl) {\n                            toggleEl.disabled = isUndef;\n                            itemEl.setAttribute('aria-disabled', isUndef);\n                        }\n                    }\n                }\n                elements.valArea.textContent = formatValue(p / 2);\n\n                elements.hyperbolicInfoGroup.setAttribute('aria-disabled', !isHyperbolicDefined);\n                elements.hyperbolicNotice.hidden = isHyperbolicDefined;\n                elements.demoToggleButton.disabled = !isHyperbolicDefined;\n            }\n\n            /**\n             * Calculates all trigonometric and hyperbolic values for a given angle.\n             * @param {number} deg - The angle in degrees.\n             * @returns {object} An object containing all calculated values.\n             */\n            function calculateValues(deg) {\n                const rad = deg * Math.PI / 180;\n                let s = Math.sin(rad);\n                let c = Math.cos(rad);\n                let t, sec, csc, cot;\n\n                if (Math.abs(c) < EPSILON) {\n                    c = 0; t = s > 0 ? Infinity : -Infinity; sec = t; csc = 1 / s; cot = 0;\n                } else if (Math.abs(s) < EPSILON) {\n                    s = 0; t = 0; sec = 1 / c; csc = c > 0 ? Infinity : -Infinity; cot = csc;\n                } else {\n                    t = s / c; sec = 1 / c; csc = 1 / s; cot = c / s;\n                }\n\n                const Px = c;\n                const Py = -s;\n\n                let p = NaN, sinh_p = NaN, cosh_p = NaN, tanh_p = NaN, Hx = NaN, Hy = NaN;\n                const isHyperbolicDefined = sec >= 1 - EPSILON && isFinite(sec);\n\n                if (isHyperbolicDefined) {\n                    p = Math.acosh(sec);\n                    sinh_p = Math.sinh(p);\n                    cosh_p = Math.cosh(p);\n                    tanh_p = Math.tanh(p);\n                    Hx = cosh_p;\n                    Hy = -sinh_p;\n                }\n\n                return { deg, rad, s, c, t, sec, csc, cot, Px, Py, p, sinh_p, cosh_p, tanh_p, Hx, Hy, isHyperbolicDefined };\n            }\n\n            /**\n             * Main render function. Calls calculation and update functions.\n             * @param {number} deg - The angle in degrees to render.\n             */\n            function render(deg) {\n                const values = calculateValues(deg);\n                updateSvgElements(values);\n                updateInfoPanel(values);\n            }\n\n            /**\n             * The main animation loop, using requestAnimationFrame for smooth updates.\n             */\n            function animationLoop() {\n                const diff = state.targetDeg - state.currentDeg;\n                if (prefersReducedMotion || Math.abs(diff) < 0.05) {\n                    state.currentDeg = state.targetDeg;\n                    cancelAnimationFrame(state.animationFrameId);\n                    state.animationFrameId = null;\n                    svg.setAttribute('aria-busy', 'false');\n                } else {\n                    // Simple easing for smoother transitions\n                    state.currentDeg += diff * 0.15; \n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n                render(state.currentDeg);\n            }\n\n            function startAnimation() {\n                if (!state.animationFrameId) {\n                    svg.setAttribute('aria-busy', 'true');\n                    state.animationFrameId = requestAnimationFrame(animationLoop);\n                }\n            }\n\n            function handleFocus(event) {\n                const infoItem = event.currentTarget;\n                if (!infoItem || state.demo.active) return;\n                const focusGroup = infoItem.dataset.focusGroup;\n                if (!focusGroup || elements[`toggle-${focusGroup}`]?.checked === false) return;\n\n                elements.trigLinesGroup.classList.add('in-focus-mode');\n                elements.hyperbolicElements.classList.add('in-focus-mode');\n                \n                document.querySelectorAll(`[data-focus-group=\"${focusGroup}\"]`).forEach(el => el.classList.add('is-focused'));\n                \n                if (['sin', 'cos', 'tan', 'sec', 'csc', 'cot'].includes(focusGroup)) {\n                    elements.lineRadius.classList.add('is-focused');\n                }\n            }\n\n            function handleBlur() {\n                if (state.demo.active) return;\n                elements.trigLinesGroup.classList.remove('in-focus-mode');\n                elements.hyperbolicElements.classList.remove('in-focus-mode');\n                document.querySelectorAll('.is-focused').forEach(el => el.classList.remove('is-focused'));\n            }\n\n            const demoSteps = [\n                {\n                    title: \"Introduction\",\n                    description: \"This demo shows how <strong>sec(Î¸)</strong> and <strong>tan(Î¸)</strong> from the unit circle relate to <strong>cosh(p)</strong> and <strong>sinh(p)</strong> on the unit hyperbola. The key is that the circular sector area (Î¸/2) equals the hyperbolic sector area (p/2).\"\n                },\n                {\n                    title: \"Identify sec(Î¸) and tan(Î¸)\",\n                    description: \"On the unit circle, the line tangent at (1,0) gives us <strong>tan(Î¸)</strong>. The line from the origin to this point on the tangent is <strong>sec(Î¸)</strong>.\",\n                    action: (v) => {\n                        elements['group-sec'].classList.add('highlight-pulse');\n                        elements['group-tan'].classList.add('highlight-pulse');\n                    }\n                },\n                {\n                    title: \"Transform sec(Î¸) to cosh(p)\",\n                    description: \"The length of <strong>sec(Î¸)</strong> is equal to <strong>cosh(p)</strong>. This animation moves the secant line to the x-axis to represent cosh(p).\",\n                    action: (v) => {\n                        const secClone = elements['line-sec'].cloneNode(true);\n                        secClone.id = ''; secClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(secClone);\n                        requestAnimationFrame(() => {\n                            secClone.setAttribute('transform', `rotate(${-v.deg} 0 0)`);\n                            secClone.style.stroke = 'var(--color-cosh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Transform tan(Î¸) to sinh(p)\",\n                    description: \"Similarly, the length of <strong>tan(Î¸)</strong> is equal to <strong>sinh(p)</strong>. This animation moves the tangent line to its position on the hyperbola.\",\n                    action: (v) => {\n                        const tanClone = elements['line-tan'].cloneNode(true);\n                        tanClone.id = ''; tanClone.classList.add('animating-clone');\n                        elements.animationLayer.appendChild(tanClone);\n                        requestAnimationFrame(() => {\n                            tanClone.setAttribute('transform', `translate(${v.Hx - 1} 0)`);\n                            tanClone.style.stroke = 'var(--color-sinh)';\n                        });\n                    }\n                },\n                {\n                    title: \"Morph Areas\",\n                    description: \"Crucially, the area of the circular sector shown is <strong>Î¸/2</strong>. This is numerically equal to the hyperbolic sector area, <strong>p/2</strong>. This equality is the foundation of the geometric relationship.\",\n                    action: (v) => {\n                        const areaClone = elements['circular-area'].cloneNode(true);\n                        areaClone.id = ''; areaClone.classList.add('animating-clone');\n                        areaClone.style.fill = 'var(--color-p-area)';\n                        elements.animationLayer.appendChild(areaClone);\n                        const finalAreaD = generateAreaPath('hyperbolic', v.p, ANIMATION_SEGMENTS);\n                        requestAnimationFrame(() => {\n                            areaClone.setAttribute('d', finalAreaD);\n                        });\n                    }\n                }\n            ];\n\n            function setDemoStep(index) {\n                state.demo.step = index;\n                elements.animationLayer.innerHTML = '';\n                document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n\n                const step = demoSteps[index];\n                elements.demoExplanation.innerHTML = step.description;\n                elements.demoProgress.value = index;\n                elements.demoPrev.disabled = index === 0;\n                elements.demoNext.disabled = index === demoSteps.length - 1;\n\n                if (step.action) {\n                    step.action(state.demo.values);\n                }\n            }\n\n            function toggleDemo() {\n                state.demo.active = !state.demo.active;\n                svg.setAttribute('aria-busy', state.demo.active);\n                if (state.demo.active) {\n                    state.demo.values = calculateValues(state.currentDeg);\n                    document.body.classList.add('is-demo-active');\n                    elements.demoToggleButton.textContent = \"End Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'true');\n                    elements.demoControls.hidden = false;\n                    slider.disabled = true;\n                    handleBlur(); // Clear any existing focus highlights\n                    setDemoStep(0);\n                } else {\n                    document.body.classList.remove('is-demo-active');\n                    elements.demoToggleButton.textContent = \"Start Interactive Demo\";\n                    elements.demoToggleButton.setAttribute('aria-pressed', 'false');\n                    elements.demoControls.hidden = true;\n                    slider.disabled = false;\n                    elements.animationLayer.innerHTML = '';\n                    document.querySelectorAll('.highlight-pulse').forEach(el => el.classList.remove('highlight-pulse'));\n                }\n            }\n\n            function getSVGPoint(event) {\n                const pt = svg.createSVGPoint();\n                const touch = event.touches ? event.touches[0] : event;\n                pt.x = touch.clientX;\n                pt.y = touch.clientY;\n                return pt.matrixTransform(svg.getScreenCTM().inverse());\n            }\n\n            function handleDragStart(e) {\n                if (state.demo.active) return;\n                e.preventDefault();\n                state.isDragging = true;\n                svg.setAttribute('aria-busy', 'true');\n                document.body.style.cursor = 'grabbing';\n                handleDragMove(e);\n            }\n\n            function handleDragMove(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                const { x, y } = getSVGPoint(e);\n                let angleRad = Math.atan2(-y, x);\n                const newDeg = (angleRad * 180 / Math.PI + 360) % 360;\n                \n                state.currentDeg = newDeg;\n                state.targetDeg = newDeg;\n                slider.value = newDeg;\n                render(newDeg);\n            }\n\n            function handleDragEnd(e) {\n                if (!state.isDragging) return;\n                e.preventDefault();\n                state.isDragging = false;\n                svg.setAttribute('aria-busy', 'false');\n                document.body.style.cursor = '';\n            }\n\n            function initialize() {\n                const maxP = Math.acosh(SVG_BOUNDS);\n                elements.hyperbolaPath.setAttribute('d', generateHyperbolaPath(maxP));\n                \n                slider.addEventListener('input', () => {\n                    state.targetDeg = parseFloat(slider.value);\n                    if (!state.isDragging) startAnimation();\n                });\n\n                document.querySelectorAll('.info-item[data-focus-group]').forEach(item => {\n                    item.addEventListener('mouseenter', handleFocus);\n                    item.addEventListener('mouseleave', handleBlur);\n                    item.addEventListener('focusin', handleFocus);\n                    item.addEventListener('focusout', handleBlur);\n                });\n\n                ALL_FUNCTIONS.forEach(fn => {\n                    if (elements[`toggle-${fn}`]) {\n                        elements[`toggle-${fn}`].addEventListener('change', (e) => {\n                            state.visibility[fn] = e.target.checked;\n                            updateVisibility();\n                            render(state.currentDeg);\n                        });\n                    }\n                });\n\n                elements.demoToggleButton.addEventListener('click', toggleDemo);\n                elements.demoNext.addEventListener('click', () => setDemoStep(state.demo.step + 1));\n                elements.demoPrev.addEventListener('click', () => setDemoStep(state.demo.step - 1));\n                elements.demoProgress.addEventListener('input', () => setDemoStep(parseInt(elements.demoProgress.value)));\n\n                svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                updateVisibility();\n                render(state.currentDeg);\n            }\n\n            initialize();\n        });\n    </script>\n\n</body>\n</html>",
          "suggestedFeatures": []
        }
      ],
      "status": "completed",
      "isStopRequested": false
    },
    {
      "id": 1,
      "originalTemperatureIndex": 2,
      "temperature": 1,
      "modelName": "gemini-2.5-pro",
      "iterations": [
        {
          "iterationNumber": 0,
          "title": "Initial Gen, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent AI-Generated HTML (CRITICAL: Assume this HTML is flawed, incomplete, and requires substantial improvement):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border-width: 0;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* Data Panel */\n        .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        /* Overlap secant with cosh to show connection */\n        .svg-line-cosh { stroke: var(--red-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        .svg-line-sinh { stroke: var(--green-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.12px;\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04px;\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec { fill: var(--red-color); }\n        .svg-label-tan { fill: var(--green-color); }\n        .svg-label-cosh { fill: var(--red-color); }\n        .svg-label-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 641px) {\n            .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code style=\"color:var(--red-color)\">sec(Î¸) = cosh(p)</code> and <code style=\"color:var(--green-color)\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"img\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-2.5 -2.5 5 5\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p).</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--text-muted-color)\">\n                                <polygon points=\"0 0, 10 3.5, 0 7\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-2.5\" y=\"-2.5\" width=\"5\" height=\"5\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-2.5\" y1=\"0\" x2=\"2.5\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"2.5\" x2=\"0\" y2=\"-2.5\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-connector\" class=\"svg-guideline\" />\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            \n                            <!-- Circular Functions -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan\" class=\"svg-line-tan\" />\n                            <line id=\"svg-line-sec\" class=\"svg-line-sec\" />\n                            \n                            <!-- Hyperbolic Functions (to overlap and show connection) -->\n                            <line id=\"svg-line-cosh\" class=\"svg-line-cosh\" />\n                            <line id=\"svg-line-sinh\" class=\"svg-line-sinh\" />\n\n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan\" class=\"svg-label svg-label-tan\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sinh\" class=\"svg-label svg-label-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec\" class=\"svg-label svg-label-sec\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cosh\" class=\"svg-label svg-label-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\" class=\"sr-only\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-88\" max=\"88\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: block;\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <span>Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE ---\n            let isPlaying = false;\n            let animationFrameId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playPauseIcon: document.getElementById('play-pause-btn').querySelector('svg'),\n                playPauseText: document.getElementById('play-pause-btn').querySelector('span'),\n                data: {\n                    p: document.getElementById('val-p'),\n                    sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'),\n                    cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    tanh: document.getElementById('val-tanh'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arc: document.getElementById('svg-arc-theta'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                        connector: document.getElementById('svg-guideline-connector'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'),\n                        sin: document.getElementById('svg-line-sin'),\n                        tan: document.getElementById('svg-line-tan'),\n                        sec: document.getElementById('svg-line-sec'),\n                        cosh: document.getElementById('svg-line-cosh'),\n                        sinh: document.getElementById('svg-line-sinh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'),\n                        tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'),\n                        cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'),\n                        tan: document.getElementById('svg-label-tan'),\n                        sec: document.getElementById('svg-label-sec'),\n                        sinh: document.getElementById('svg-label-sinh'),\n                        cosh: document.getElementById('svg-label-cosh'),\n                    }\n                }\n            };\n\n            const playIconSVG = '<path d=\"M8 5v14l11-7z\"></path>';\n            const pauseIconSVG = '<path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path>';\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setLine = (el, p1, p2) => {\n                el.setAttribute('x1', p1.x); el.setAttribute('y1', p1.y);\n                el.setAttribute('x2', p2.x); el.setAttribute('y2', p2.y);\n            };\n            const setPoint = (el, p) => {\n                el.setAttribute('cx', p.x); el.setAttribute('cy', p.y);\n            };\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const theta = (deg * Math.PI) / 180;\n                const clampRange = 88.5 * Math.PI / 180;\n                const clampedTheta = Math.max(-clampRange, Math.min(clampRange, theta));\n                \n                const cos_t = Math.cos(clampedTheta);\n                const sin_t = Math.sin(clampedTheta);\n                const tan_t = Math.tan(clampedTheta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t); // also equals acosh(sec_t) for this range\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text\n                dom.angleDisplay.textContent = `${parseFloat(deg).toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${parseFloat(deg).toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p);\n                dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t);\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p);\n                dom.data.tanh.textContent = format(tanh_p);\n                \n                // Define key points (Y inverted for SVG)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setPoint(dom.svg.points.circle, P_circle);\n                setPoint(dom.svg.points.tangent, P_tan_tip);\n                setPoint(dom.svg.points.hyperbola, P_hyperbola);\n\n                setLine(dom.svg.lines.cos, O, P_cos_axis);\n                setLine(dom.svg.lines.sin, P_cos_axis, P_circle);\n                setLine(dom.svg.lines.tan, P_tan_base, P_tan_tip);\n                setLine(dom.svg.lines.sec, O, P_sec_axis);\n                setLine(dom.svg.lines.cosh, O, P_sec_axis);\n                setLine(dom.svg.lines.sinh, P_sec_axis, P_hyperbola);\n\n                setLine(dom.svg.guidelines.radial, O, P_hyperbola);\n                setLine(dom.svg.guidelines.tan, P_circle, P_tan_tip);\n                setLine(dom.svg.guidelines.hyperbola, P_sec_axis, P_hyperbola);\n                setLine(dom.svg.guidelines.connector, P_tan_tip, P_hyperbola);\n                \n                const arcRadius = 0.3;\n                const arc_p2 = { x: arcRadius * cos_t, y: -arcRadius * sin_t };\n                const largeArcFlag = Math.abs(deg) > 180 ? 1 : 0;\n                const sweepFlag = deg >= 0 ? 1 : 0;\n                dom.svg.arc.setAttribute('d', `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} ${sweepFlag} ${arc_p2.x} ${arc_p2.y} L 0 0 Z`);\n\n                // Update Labels\n                const ySign = clampedTheta >= 0 ? -1 : 1;\n                const labelOffset = 0.08;\n                dom.svg.labels.theta.setAttribute('x', arcRadius * 1.2 * Math.cos(clampedTheta/2));\n                dom.svg.labels.theta.setAttribute('y', -arcRadius * 1.2 * Math.sin(clampedTheta/2));\n\n                dom.svg.labels.cos.setAttribute('x', P_cos_axis.x / 2);\n                dom.svg.labels.cos.setAttribute('y', ySign * labelOffset * 1.5);\n                dom.svg.labels.sin.setAttribute('x', P_circle.x + labelOffset * ySign * (P_circle.x < 0 ? -1: 1));\n                dom.svg.labels.sin.setAttribute('y', P_circle.y / 2);\n                \n                dom.svg.labels.tan.setAttribute('x', P_tan_tip.x + labelOffset);\n                dom.svg.labels.tan.setAttribute('y', P_tan_tip.y / 2);\n                dom.svg.labels.sinh.setAttribute('x', P_hyperbola.x + labelOffset);\n                dom.svg.labels.sinh.setAttribute('y', P_hyperbola.y / 2);\n                \n                dom.svg.labels.sec.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.sec.setAttribute('y', -labelOffset * 0.8);\n                dom.svg.labels.cosh.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.cosh.setAttribute('y', labelOffset * 1.5);\n            }\n\n            // --- ANIMATION LOOP ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                let newVal = currentVal + 0.2;\n                if (newVal > dom.slider.max) newVal = parseFloat(dom.slider.min);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playPauseIcon.innerHTML = pauseIconSVG;\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playPauseIcon.innerHTML = playIconSVG;\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                // Generate grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                for (let i = -2; i <= 2; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setLine(vLine, {x: i, y: -2.5}, {x: i, y: 2.5});\n                    vLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setLine(hLine, {x: -2.5, y: i}, {x: 2.5, y: i});\n                    hLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                // Generate hyperbola path\n                const maxP = 1.7; const steps = 50; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                // Add event listeners\n                dom.slider.addEventListener('input', (e) => updateVisualization(e.target.value));\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task is to analyze the current HTML thoroughly. Propose **exactly TWO (2)** concrete, actionable next steps. PRIORITIZE suggestions that fix, complete, or significantly refine existing (even partially implemented) features before suggesting entirely new functionalities. Ensure your suggestions are detailed and strategically sound. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nProvided AI-Generated HTML (CRITICAL WARNING: ASSUME THIS CODE IS SEVERELY FLAWED AND UNTRUSTWORTHY):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular and hyperbolic trigonometric functions.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n            \n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: 2fr 1fr;\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 70vh;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        /* Controls Panel */\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--bg-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--bg-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        /* Data Panel */\n        .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1rem;\n        }\n        \n        .data-grid h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-top: 0.5rem;\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-grid h3:first-child {\n            margin-top: 0;\n        }\n\n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n        }\n        \n        .data-list .dd-sec { color: var(--red-color); }\n        .data-list .dd-tan { color: var(--green-color); }\n        .data-list .dd-cosh { color: var(--red-color); }\n        .data-list .dd-sinh { color: var(--green-color); }\n        .data-list .dd-p { color: var(--accent-color); }\n        .data-list .dd-connection {\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-radial-line { stroke: var(--accent-color); stroke-width: 0.02; }\n        \n        .svg-trig-line-sec { stroke: var(--red-color); stroke-width: 0.04; }\n        .svg-trig-line-tan { stroke: var(--green-color); stroke-width: 0.04; }\n        \n        .svg-hyperbolic-line-cosh { stroke: var(--red-color); stroke-width: 0.04; }\n        .svg-hyperbolic-line-sinh { stroke: var(--green-color); stroke-width: 0.04; }\n\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.12px;\n            fill: var(--text-color);\n            text-anchor: middle;\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04px;\n            stroke-linejoin: round;\n        }\n        \n        .svg-label-sec { fill: var(--red-color); }\n        .svg-label-tan { fill: var(--green-color); }\n        .svg-label-cosh { fill: var(--red-color); }\n        .svg-label-sinh { fill: var(--green-color); }\n        .svg-label-p { fill: var(--accent-color); }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n            .data-list {\n                grid-template-columns: 1fr;\n            }\n            .data-list dt {\n                text-align: left;\n            }\n        }\n\n    </style>\n</head>\n<body>\n\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry through the Gudermannian function. Drag the slider to change the angle Î¸.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"img\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-2.2 -2.2 4.4 4.4\" preserveAspectRatio=\"xMidYMid meet\" aria-label=\"Geometric visualization of trigonometric functions\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram showing a unit circle and a unit hyperbola. Lines representing secant, tangent, cosecant, and cotangent are drawn, showing their relationship to cosh and sinh.</desc>\n                        \n                        <!-- Definitions -->\n                        <defs>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\">\n                                <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"var(--text-muted-color)\" />\n                            </marker>\n                        </defs>\n\n                        <!-- Background & Grid -->\n                        <rect class=\"svg-bg\" x=\"-2.2\" y=\"-2.2\" width=\"4.4\" height=\"4.4\" />\n                        <g id=\"svg-grid\">\n                            <!-- Grid lines will be generated by JS -->\n                        </g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\" d=\"\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <!-- Axes -->\n                        <line class=\"svg-axis\" x1=\"-2.2\" y1=\"0\" x2=\"2.2\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"2.2\" x2=\"0\" y2=\"-2.2\" marker-end=\"url(#arrowhead)\" />\n\n                        <!-- Dynamic elements -->\n                        <g id=\"svg-dynamic-elements\">\n                            <line id=\"svg-guideline-tan-vert\" class=\"svg-guideline\" x1=\"1\" y1=\"0\" x2=\"1\" y2=\"0\" />\n                            <line id=\"svg-guideline-hyperbola-rect-horz\" class=\"svg-guideline\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" />\n                            <line id=\"svg-guideline-hyperbola-rect-vert\" class=\"svg-guideline\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"0\" />\n                            \n                            <line id=\"svg-radial-line\" class=\"svg-radial-line\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" />\n                            \n                            <line id=\"svg-line-tan\" class=\"svg-trig-line-tan\" x1=\"1\" y1=\"0\" x2=\"1\" y2=\"0\" />\n                            <line id=\"svg-line-sec\" class=\"svg-trig-line-sec\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" />\n\n                            <line id=\"svg-line-sinh\" class=\"svg-hyperbolic-line-sinh\" x1=\"1\" y1=\"0\" x2=\"1\" y2=\"0\" />\n                            <line id=\"svg-line-cosh\" class=\"svg-hyperbolic-line-cosh\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"0\" />\n\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" cx=\"1\" cy=\"0\" r=\"0.05\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" cx=\"1\" cy=\"0\" r=\"0.05\" />\n                            \n                            <text id=\"svg-label-tan\" class=\"svg-label svg-label-tan\" x=\"1.05\" y=\"0\">tan(Î¸)</text>\n                            <text id=\"svg-label-sec\" class=\"svg-label svg-label-sec\" x=\"0.5\" y=\"0\">sec(Î¸)</text>\n                            <text id=\"svg-label-sinh\" class=\"svg-label svg-label-sinh\" x=\"1.05\" y=\"0\">sinh(p)</text>\n                            <text id=\"svg-label-cosh\" class=\"svg-label svg-label-cosh\" x=\"0.5\" y=\"0\">cosh(p)</text>\n                            <text id=\"svg-label-p\" class=\"svg-label svg-label-p\" x=\"0\" y=\"0\">p</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\" class=\"sr-only\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-88\" max=\"88\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.000</dd>\n                            </dl>\n                            \n                            <h3>Circular Functions</h3>\n                            <dl class=\"data-list\">\n                                <dt>sec(Î¸) =</dt>\n                                <dd id=\"val-sec\" class=\"dd-sec\">1.000</dd>\n                                <dt>tan(Î¸) =</dt>\n                                <dd id=\"val-tan\" class=\"dd-tan\">0.000</dd>\n                                <dt>sin(Î¸) =</dt>\n                                <dd id=\"val-sin\">0.000</dd>\n                                <dt>cos(Î¸) =</dt>\n                                <dd id=\"val-cos\">1.000</dd>\n                            </dl>\n\n                            <h3>Hyperbolic Functions</h3>\n                            <dl class=\"data-list\">\n                                <dt>cosh(p) =</dt>\n                                <dd id=\"val-cosh\" class=\"dd-cosh dd-connection\">1.000</dd>\n                                <dt>sinh(p) =</dt>\n                                <dd id=\"val-sinh\" class=\"dd-sinh dd-connection\">0.000</dd>\n                                <dt>tanh(p) =</dt>\n                                <dd id=\"val-tanh\">0.000</dd>\n                            </dl>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>CodeCrafter Apex Prototype &copy; 2024. A testament to digital craftsmanship.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            const slider = document.getElementById('angle-slider');\n            const angleDisplay = document.getElementById('angle-display');\n\n            // SVG elements\n            const svg = {\n                grid: document.getElementById('svg-grid'),\n                unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                guideline: {\n                    tanVert: document.getElementById('svg-guideline-tan-vert'),\n                    hyperbolaRectHorz: document.getElementById('svg-guideline-hyperbola-rect-horz'),\n                    hyperbolaRectVert: document.getElementById('svg-guideline-hyperbola-rect-vert'),\n                },\n                radialLine: document.getElementById('svg-radial-line'),\n                lines: {\n                    tan: document.getElementById('svg-line-tan'),\n                    sec: document.getElementById('svg-line-sec'),\n                    sinh: document.getElementById('svg-line-sinh'),\n                    cosh: document.getElementById('svg-line-cosh'),\n                },\n                points: {\n                    circle: document.getElementById('svg-point-circle'),\n                    hyperbola: document.getElementById('svg-point-hyperbola'),\n                },\n                labels: {\n                    tan: document.getElementById('svg-label-tan'),\n                    sec: document.getElementById('svg-label-sec'),\n                    sinh: document.getElementById('svg-label-sinh'),\n                    cosh: document.getElementById('svg-label-cosh'),\n                    p: document.getElementById('svg-label-p'),\n                }\n            };\n            \n            // Data display elements\n            const data = {\n                p: document.getElementById('val-p'),\n                sec: document.getElementById('val-sec'),\n                tan: document.getElementById('val-tan'),\n                sin: document.getElementById('val-sin'),\n                cos: document.getElementById('val-cos'),\n                cosh: document.getElementById('val-cosh'),\n                sinh: document.getElementById('val-sinh'),\n                tanh: document.getElementById('val-tanh'),\n            };\n            \n            const toRad = (deg) => deg * Math.PI / 180;\n            const format = (num) => num.toFixed(3);\n\n            function generateGrid() {\n                const gridGroup = svg.grid;\n                for (let i = -2; i <= 2; i++) {\n                    if (i === 0) continue;\n                    // Vertical lines\n                    const vLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                    vLine.setAttribute('class', 'svg-grid-line');\n                    vLine.setAttribute('x1', i);\n                    vLine.setAttribute('y1', -2.2);\n                    vLine.setAttribute('x2', i);\n                    vLine.setAttribute('y2', 2.2);\n                    gridGroup.appendChild(vLine);\n                    // Horizontal lines\n                    const hLine = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n                    hLine.setAttribute('class', 'svg-grid-line');\n                    hLine.setAttribute('x1', -2.2);\n                    hLine.setAttribute('y1', i);\n                    hLine.setAttribute('x2', 2.2);\n                    hLine.setAttribute('y2', i);\n                    gridGroup.appendChild(hLine);\n                }\n            }\n            \n            function generateHyperbolaPath() {\n                const maxP = 1.5; // Controls the visual extent of the hyperbola\n                const steps = 50;\n                let pathData = '';\n                \n                // Top half\n                for (let i = steps; i >= 0; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    if (i === steps) {\n                        pathData += `M ${x} ${-y} `;\n                    } else {\n                        pathData += `L ${x} ${-y} `;\n                    }\n                }\n                \n                // Bottom half\n                for (let i = 1; i <= steps; i++) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p);\n                    const y = Math.sinh(p);\n                    pathData += `L ${x} ${y} `;\n                }\n                \n                svg.unitHyperbola.setAttribute('d', pathData);\n            }\n\n            function updateVisualization(deg) {\n                const theta = toRad(deg);\n                const clampRange = 88 * Math.PI / 180;\n                const clampedTheta = Math.max(-clampRange, Math.min(clampRange, theta));\n                \n                // Calculate all values\n                const cos_t = Math.cos(clampedTheta);\n                const sin_t = Math.sin(clampedTheta);\n                const tan_t = Math.tan(clampedTheta);\n                const sec_t = 1 / cos_t;\n                \n                // Gudermannian parameter p\n                // p = acosh(sec(Î¸)) or asinh(tan(Î¸))\n                const p = Math.asinh(tan_t);\n\n                const cosh_p = Math.cosh(p); // This will equal sec_t\n                const sinh_p = Math.sinh(p); // This will equal tan_t\n                const tanh_p = Math.tanh(p); // This will equal sin_t\n\n                // Update UI text\n                angleDisplay.textContent = `${parseFloat(deg).toFixed(1)}Â°`;\n                slider.setAttribute('aria-valuetext', `${parseFloat(deg).toFixed(1)} degrees`);\n\n                data.p.textContent = format(p);\n                data.sec.textContent = format(sec_t);\n                data.tan.textContent = format(tan_t);\n                data.sin.textContent = format(sin_t);\n                data.cos.textContent = format(cos_t);\n                data.cosh.textContent = format(cosh_p);\n                data.sinh.textContent = format(sinh_p);\n                data.tanh.textContent = format(tanh_p);\n                \n                // Update SVG elements\n                // Invert Y for standard Cartesian coordinates\n                const C = { x: cos_t, y: -sin_t };\n                const H = { x: cosh_p, y: -sinh_p }; // Hyperbola point\n\n                // Points\n                svg.points.circle.setAttribute('cx', C.x);\n                svg.points.circle.setAttribute('cy', C.y);\n                svg.points.hyperbola.setAttribute('cx', H.x);\n                svg.points.hyperbola.setAttribute('cy', H.y);\n\n                // Radial line\n                svg.radialLine.setAttribute('x2', sec_t > 0 ? 2.2 : -2.2);\n                svg.radialLine.setAttribute('y2', sec_t > 0 ? -tan_t * 2.2 : tan_t * 2.2);\n\n                // Trig Lines\n                svg.lines.sec.setAttribute('x2', 1);\n                svg.lines.sec.setAttribute('y2', -tan_t);\n                svg.lines.tan.setAttribute('y2', -tan_t);\n\n                // Hyperbolic Lines\n                svg.lines.cosh.setAttribute('x2', H.x);\n                svg.lines.sinh.setAttribute('x1', H.x);\n                svg.lines.sinh.setAttribute('x2', H.x);\n                svg.lines.sinh.setAttribute('y2', H.y);\n                \n                // Guidelines\n                svg.guideline.tanVert.setAttribute('y2', -tan_t);\n                svg.guideline.hyperbolaRectHorz.setAttribute('x2', H.x);\n                svg.guideline.hyperbolaRectHorz.setAttribute('y1', H.y);\n                svg.guideline.hyperbolaRectHorz.setAttribute('y2', H.y);\n                svg.guideline.hyperbolaRectVert.setAttribute('x1', H.x);\n                svg.guideline.hyperbolaRectVert.setAttribute('y2', H.y);\n\n                // --- Labels ---\n                const labelOffset = 0.05;\n                const ySign = H.y < 0 ? 1 : -1;\n                \n                // tan(Î¸) label\n                svg.labels.tan.setAttribute('x', 1 + labelOffset);\n                svg.labels.tan.setAttribute('y', H.y / 2);\n                svg.labels.tan.setAttribute('text-anchor', 'start');\n                \n                // sec(Î¸) label\n                svg.labels.sec.setAttribute('x', 0.5 + labelOffset);\n                svg.labels.sec.setAttribute('y', H.y/2 + labelOffset * ySign);\n                svg.labels.sec.setAttribute('transform', `rotate(${deg} 0 0)`);\n                \n                // sinh(p) label\n                svg.labels.sinh.setAttribute('x', H.x + labelOffset);\n                svg.labels.sinh.setAttribute('y', H.y / 2);\n                svg.labels.sinh.setAttribute('text-anchor', 'start');\n                \n                // cosh(p) label\n                svg.labels.cosh.setAttribute('x', H.x / 2);\n                svg.labels.cosh.setAttribute('y', labelOffset * ySign * 2.5);\n                svg.labels.cosh.setAttribute('text-anchor', 'middle');\n\n                // p label\n                const pLabelRadius = 0.3;\n                svg.labels.p.setAttribute('x', pLabelRadius * Math.cosh(p/2));\n                svg.labels.p.setAttribute('y', -pLabelRadius * Math.sinh(p/2));\n            }\n\n            // Initial setup\n            generateGrid();\n            generateHyperbolaPath();\n            updateVisualization(slider.value);\n\n            // Event listener\n            slider.addEventListener('input', (e) => {\n                updateVisualization(e.target.value);\n            });\n        });\n    </script>\n</body>\n</html>\n```\nYour mission: Critically dissect and completely overhaul the provided HTML. Your goal is to transform it into a production-quality, fully functional, visually polished, and highly accessible webpage that accurately reflects the original idea. Fix ALL bugs, structural deficiencies, responsiveness calamities, visual aberrations, and accessibility violations. Enhance any existing or partially implemented features to ensure they are complete, robust, and intuitive. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_InitialGenerate": "Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\".\n\nTranslate this idea into a complete, standalone, production-quality HTML file. Adhere strictly to all directives in your system persona, especially regarding modern design, responsiveness, accessibility (WCAG 2.1 AA+), and embedding all CSS/JS. Your output MUST be only the HTML code, perfectly formed and ready to render.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border-width: 0;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* Data Panel */\n        .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        /* Overlap secant with cosh to show connection */\n        .svg-line-cosh { stroke: var(--red-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        .svg-line-sinh { stroke: var(--green-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.12px;\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04px;\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec { fill: var(--red-color); }\n        .svg-label-tan { fill: var(--green-color); }\n        .svg-label-cosh { fill: var(--red-color); }\n        .svg-label-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 641px) {\n            .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code style=\"color:var(--red-color)\">sec(Î¸) = cosh(p)</code> and <code style=\"color:var(--green-color)\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"img\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-2.5 -2.5 5 5\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p).</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--text-muted-color)\">\n                                <polygon points=\"0 0, 10 3.5, 0 7\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-2.5\" y=\"-2.5\" width=\"5\" height=\"5\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-2.5\" y1=\"0\" x2=\"2.5\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"2.5\" x2=\"0\" y2=\"-2.5\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-connector\" class=\"svg-guideline\" />\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            \n                            <!-- Circular Functions -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan\" class=\"svg-line-tan\" />\n                            <line id=\"svg-line-sec\" class=\"svg-line-sec\" />\n                            \n                            <!-- Hyperbolic Functions (to overlap and show connection) -->\n                            <line id=\"svg-line-cosh\" class=\"svg-line-cosh\" />\n                            <line id=\"svg-line-sinh\" class=\"svg-line-sinh\" />\n\n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan\" class=\"svg-label svg-label-tan\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sinh\" class=\"svg-label svg-label-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec\" class=\"svg-label svg-label-sec\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cosh\" class=\"svg-label svg-label-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\" class=\"sr-only\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-88\" max=\"88\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: block;\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <span>Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE ---\n            let isPlaying = false;\n            let animationFrameId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playPauseIcon: document.getElementById('play-pause-btn').querySelector('svg'),\n                playPauseText: document.getElementById('play-pause-btn').querySelector('span'),\n                data: {\n                    p: document.getElementById('val-p'),\n                    sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'),\n                    cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    tanh: document.getElementById('val-tanh'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arc: document.getElementById('svg-arc-theta'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                        connector: document.getElementById('svg-guideline-connector'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'),\n                        sin: document.getElementById('svg-line-sin'),\n                        tan: document.getElementById('svg-line-tan'),\n                        sec: document.getElementById('svg-line-sec'),\n                        cosh: document.getElementById('svg-line-cosh'),\n                        sinh: document.getElementById('svg-line-sinh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'),\n                        tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'),\n                        cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'),\n                        tan: document.getElementById('svg-label-tan'),\n                        sec: document.getElementById('svg-label-sec'),\n                        sinh: document.getElementById('svg-label-sinh'),\n                        cosh: document.getElementById('svg-label-cosh'),\n                    }\n                }\n            };\n\n            const playIconSVG = '<path d=\"M8 5v14l11-7z\"></path>';\n            const pauseIconSVG = '<path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path>';\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setLine = (el, p1, p2) => {\n                el.setAttribute('x1', p1.x); el.setAttribute('y1', p1.y);\n                el.setAttribute('x2', p2.x); el.setAttribute('y2', p2.y);\n            };\n            const setPoint = (el, p) => {\n                el.setAttribute('cx', p.x); el.setAttribute('cy', p.y);\n            };\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const theta = (deg * Math.PI) / 180;\n                const clampRange = 88.5 * Math.PI / 180;\n                const clampedTheta = Math.max(-clampRange, Math.min(clampRange, theta));\n                \n                const cos_t = Math.cos(clampedTheta);\n                const sin_t = Math.sin(clampedTheta);\n                const tan_t = Math.tan(clampedTheta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t); // also equals acosh(sec_t) for this range\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text\n                dom.angleDisplay.textContent = `${parseFloat(deg).toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${parseFloat(deg).toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p);\n                dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t);\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p);\n                dom.data.tanh.textContent = format(tanh_p);\n                \n                // Define key points (Y inverted for SVG)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setPoint(dom.svg.points.circle, P_circle);\n                setPoint(dom.svg.points.tangent, P_tan_tip);\n                setPoint(dom.svg.points.hyperbola, P_hyperbola);\n\n                setLine(dom.svg.lines.cos, O, P_cos_axis);\n                setLine(dom.svg.lines.sin, P_cos_axis, P_circle);\n                setLine(dom.svg.lines.tan, P_tan_base, P_tan_tip);\n                setLine(dom.svg.lines.sec, O, P_sec_axis);\n                setLine(dom.svg.lines.cosh, O, P_sec_axis);\n                setLine(dom.svg.lines.sinh, P_sec_axis, P_hyperbola);\n\n                setLine(dom.svg.guidelines.radial, O, P_hyperbola);\n                setLine(dom.svg.guidelines.tan, P_circle, P_tan_tip);\n                setLine(dom.svg.guidelines.hyperbola, P_sec_axis, P_hyperbola);\n                setLine(dom.svg.guidelines.connector, P_tan_tip, P_hyperbola);\n                \n                const arcRadius = 0.3;\n                const arc_p2 = { x: arcRadius * cos_t, y: -arcRadius * sin_t };\n                const largeArcFlag = Math.abs(deg) > 180 ? 1 : 0;\n                const sweepFlag = deg >= 0 ? 1 : 0;\n                dom.svg.arc.setAttribute('d', `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} ${sweepFlag} ${arc_p2.x} ${arc_p2.y} L 0 0 Z`);\n\n                // Update Labels\n                const ySign = clampedTheta >= 0 ? -1 : 1;\n                const labelOffset = 0.08;\n                dom.svg.labels.theta.setAttribute('x', arcRadius * 1.2 * Math.cos(clampedTheta/2));\n                dom.svg.labels.theta.setAttribute('y', -arcRadius * 1.2 * Math.sin(clampedTheta/2));\n\n                dom.svg.labels.cos.setAttribute('x', P_cos_axis.x / 2);\n                dom.svg.labels.cos.setAttribute('y', ySign * labelOffset * 1.5);\n                dom.svg.labels.sin.setAttribute('x', P_circle.x + labelOffset * ySign * (P_circle.x < 0 ? -1: 1));\n                dom.svg.labels.sin.setAttribute('y', P_circle.y / 2);\n                \n                dom.svg.labels.tan.setAttribute('x', P_tan_tip.x + labelOffset);\n                dom.svg.labels.tan.setAttribute('y', P_tan_tip.y / 2);\n                dom.svg.labels.sinh.setAttribute('x', P_hyperbola.x + labelOffset);\n                dom.svg.labels.sinh.setAttribute('y', P_hyperbola.y / 2);\n                \n                dom.svg.labels.sec.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.sec.setAttribute('y', -labelOffset * 0.8);\n                dom.svg.labels.cosh.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.cosh.setAttribute('y', labelOffset * 1.5);\n            }\n\n            // --- ANIMATION LOOP ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                let newVal = currentVal + 0.2;\n                if (newVal > dom.slider.max) newVal = parseFloat(dom.slider.min);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playPauseIcon.innerHTML = pauseIconSVG;\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playPauseIcon.innerHTML = playIconSVG;\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                // Generate grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                for (let i = -2; i <= 2; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setLine(vLine, {x: i, y: -2.5}, {x: i, y: 2.5});\n                    vLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setLine(hLine, {x: -2.5, y: i}, {x: 2.5, y: i});\n                    hLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                // Generate hyperbola path\n                const maxP = 1.7; const steps = 50; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                // Add event listeners\n                dom.slider.addEventListener('input', (e) => updateVisualization(e.target.value));\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Refactor the SVG visualization for clarity by overhauling the labeling and line representation. First, replace the separate, overlapping text labels for equal functions (e.g., 'sec' and 'cosh') with a single, dynamically positioned label that reads 'sec(Î¸) = cosh(p)'. Second, instead of drawing two overlapping lines for secant/cosh and tangent/sinh, render only a single line for each pair. Use a brief color pulse or highlight animation on these lines when the angle value changes to emphasize that one geometric line represents two equal functions.",
            "Implement the geometric representation of the hyperbolic parameter 'p' to complete the core analogy. Add a new, semi-transparent, filled SVG path to visualize the hyperbolic sector area (bounded by the origin, (1,0), and the point on the hyperbola), which corresponds to p/2. Complement this by updating the 'Live Values' panel to explicitly display the calculated areas for both the circular sector (Î¸/2) and the new hyperbolic sector (p/2), making the abstract connection between the angle Î¸ and the parameter p visually intuitive."
          ]
        },
        {
          "iterationNumber": 1,
          "title": "Refine 1: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan-sinh { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec-cosh { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.15; /* Unitless for SVG coordinate space */\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04; /* Unitless */\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight {\n            50% { stroke-width: 0.07; }\n        }\n        \n        .highlight-active {\n            animation: pulse-highlight 0.3s ease-out;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter, and Î¸/2 and p/2 represent sector areas.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Areas and Arcs -->\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <!-- Function Lines -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-line-tan-sinh\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-line-sec-cosh\" />\n                            \n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-70\" max=\"70\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                         <div class=\"data-group\" style=\"margin-top: 1.25rem;\">\n                            <h3>Sector Areas</h3>\n                            <dl class=\"data-list\">\n                                <dt>Circular (Î¸/2) =</dt>\n                                <dd id=\"val-area-circular\" class=\"dd-area-circ\">0.393</dd>\n                                <dt>Hyperbolic (p/2) =</dt>\n                                <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\">0.441</dd>\n                            </dl>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>A CodeAuditor Maximus Rectification | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CONSTANTS & STATE ---\n            const ANIMATION_SPEED = 0.2;\n            const HIGHLIGHT_DURATION = 300; // ms\n            let isPlaying = false;\n            let animationFrameId = null;\n            let animationDirection = 1; // 1 for forward, -1 for reverse\n            let highlightTimeoutId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), tanh: document.getElementById('val-tanh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const angleDegrees = parseFloat(deg);\n                if (isNaN(angleDegrees)) return;\n\n                const theta = (angleDegrees * Math.PI) / 180;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = Math.tan(theta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text values\n                dom.angleDisplay.textContent = `${angleDegrees.toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.tanh.textContent = format(tanh_p);\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                // Define key points (Y inverted for SVG coordinate system)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setAttr(dom.svg.points.circle, { cx: P_circle.x, cy: P_circle.y });\n                setAttr(dom.svg.points.tangent, { cx: P_tan_tip.x, cy: P_tan_tip.y });\n                setAttr(dom.svg.points.hyperbola, { cx: P_hyperbola.x, cy: P_hyperbola.y });\n\n                setAttr(dom.svg.lines.cos, { x1: O.x, y1: O.y, x2: P_cos_axis.x, y2: P_cos_axis.y });\n                setAttr(dom.svg.lines.sin, { x1: P_cos_axis.x, y1: P_cos_axis.y, x2: P_circle.x, y2: P_circle.y });\n                setAttr(dom.svg.lines.tanSinh, { x1: P_sec_axis.x, y1: P_sec_axis.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.lines.secCosh, { x1: O.x, y1: O.y, x2: P_sec_axis.x, y2: P_sec_axis.y });\n                \n                setAttr(dom.svg.guidelines.radial, { x1: O.x, y1: O.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.guidelines.tan, { x1: P_circle.x, y1: P_circle.y, x2: P_tan_tip.x, y2: P_tan_tip.y });\n                setAttr(dom.svg.guidelines.hyperbola, { x1: P_tan_tip.x, y1: P_tan_tip.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svg.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${P_circle.x} ${P_circle.y} L 0 0 Z`);\n                \n                let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                const steps = 50; // Increased for smoothness\n                for (let i = 1; i <= steps; i++) {\n                    const p_step = p * (i / steps);\n                    hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                }\n                hyperbolicAreaPath += 'Z';\n                dom.svg.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n\n                // Update Labels\n                const ySign = theta >= 0 ? 1 : -1;\n                const labelOffset = 0.12;\n                setAttr(dom.svg.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                dom.svg.labels.theta.textContent = 'Î¸';\n                \n                setAttr(dom.svg.labels.cos, { x: P_cos_axis.x / 2, y: ySign * labelOffset * 1.5 });\n                dom.svg.labels.cos.textContent = 'cos';\n                \n                setAttr(dom.svg.labels.sin, { x: P_circle.x + labelOffset * Math.sign(cos_t), y: P_circle.y / 2 });\n                dom.svg.labels.sin.textContent = 'sin';\n                \n                setAttr(dom.svg.labels.tanSinh, { x: P_hyperbola.x + labelOffset, y: P_hyperbola.y / 2 });\n                dom.svg.labels.tanSinh.textContent = 'tan=sinh';\n                \n                setAttr(dom.svg.labels.secCosh, { x: P_sec_axis.x / 2, y: -labelOffset * 1.5 });\n                dom.svg.labels.secCosh.textContent = 'sec=cosh';\n            }\n\n            // --- ANIMATION & EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const newVal = currentVal + (ANIMATION_SPEED * animationDirection);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playIcon.style.display = 'none';\n                    dom.pauseIcon.style.display = 'block';\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playIcon.style.display = 'block';\n                    dom.pauseIcon.style.display = 'none';\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n            \n            function handleSliderInput(e) {\n                updateVisualization(e.target.value);\n                \n                if (highlightTimeoutId) clearTimeout(highlightTimeoutId);\n\n                dom.svg.lines.secCosh.classList.add('highlight-active');\n                dom.svg.lines.tanSinh.classList.add('highlight-active');\n                \n                highlightTimeoutId = setTimeout(() => {\n                    dom.svg.lines.secCosh.classList.remove('highlight-active');\n                    dom.svg.lines.tanSinh.classList.remove('highlight-active');\n                }, HIGHLIGHT_DURATION);\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                const maxP = 1.76; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', handleSliderInput);\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border-width: 0;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan-sinh { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec-cosh { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.12; /* Unitless for SVG coordinate space */\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04; /* Unitless */\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight {\n            50% { stroke: var(--accent-color); stroke-width: 0.07; }\n        }\n\n        .line-highlight-red {\n            animation: pulse-highlight 0.4s ease-out;\n        }\n\n        .line-highlight-green {\n            animation: pulse-highlight 0.4s ease-out;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter, and Î¸/2 and p/2 represent sector areas.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"img\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-2.5 -2.5 5 5\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--text-muted-color)\">\n                                <polygon points=\"0 0, 10 3.5, 0 7\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-2.5\" y=\"-2.5\" width=\"5\" height=\"5\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-2.5\" y1=\"0\" x2=\"2.5\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"2.5\" x2=\"0\" y2=\"-2.5\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Areas and Arcs -->\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <!-- Function Lines -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-line-tan-sinh\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-line-sec-cosh\" />\n                            \n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\" class=\"sr-only\">Interactive visualization of trigonometric functions and their corresponding sector areas.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-88.5\" max=\"88.5\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                         <div class=\"data-group\" style=\"margin-top: 1.25rem;\">\n                            <h3>Sector Areas</h3>\n                            <dl class=\"data-list\">\n                                <dt>Circular (Î¸/2) =</dt>\n                                <dd id=\"val-area-circular\" class=\"dd-area-circ\">0.393</dd>\n                                <dt>Hyperbolic (p/2) =</dt>\n                                <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\">0.441</dd>\n                            </dl>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>A CodeIntegrator Elite Visualization | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE ---\n            let isPlaying = false;\n            let animationFrameId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                data: {\n                    p: document.getElementById('val-p'),\n                    sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'),\n                    cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    tanh: document.getElementById('val-tanh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'),\n                        sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'),\n                        secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'),\n                        tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'),\n                        cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'),\n                        tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setLine = (el, p1, p2) => {\n                el.setAttribute('x1', p1.x); el.setAttribute('y1', p1.y);\n                el.setAttribute('x2', p2.x); el.setAttribute('y2', p2.y);\n            };\n            const setPoint = (el, p) => {\n                el.setAttribute('cx', p.x); el.setAttribute('cy', p.y);\n            };\n            const triggerHighlight = (el, className) => {\n                el.classList.remove(className);\n                // void el.offsetWidth; // Trigger reflow to restart animation\n                requestAnimationFrame(() => el.classList.add(className));\n            };\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                // Ensure angle is a number\n                const angleDegrees = parseFloat(deg);\n                if (isNaN(angleDegrees)) return;\n\n                // theta is the circular angle in radians. Clamped to avoid infinities.\n                const theta = (angleDegrees * Math.PI) / 180;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = Math.tan(theta);\n                const sec_t = 1 / cos_t;\n                \n                // p is the hyperbolic parameter (area of hyperbolic sector is p/2)\n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text values\n                dom.angleDisplay.textContent = `${angleDegrees.toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p);\n                dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t);\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p);\n                dom.data.tanh.textContent = format(tanh_p);\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                // Define key points (Y inverted for SVG coordinate system)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t }; // or { x: cosh_p, y: -sinh_p }\n                const P_sec_axis = { x: sec_t, y: 0 }; // or { x: cosh_p, y: 0 }\n\n                // --- Update SVG elements ---\n                setPoint(dom.svg.points.circle, P_circle);\n                setPoint(dom.svg.points.tangent, P_tan_tip);\n                setPoint(dom.svg.points.hyperbola, P_hyperbola);\n\n                setLine(dom.svg.lines.cos, O, P_cos_axis);\n                setLine(dom.svg.lines.sin, P_cos_axis, P_circle);\n                setLine(dom.svg.lines.tanSinh, P_sec_axis, P_hyperbola);\n                setLine(dom.svg.lines.secCosh, O, P_sec_axis);\n                \n                setLine(dom.svg.guidelines.radial, O, P_hyperbola);\n                setLine(dom.svg.guidelines.tan, P_circle, P_tan_tip);\n                setLine(dom.svg.guidelines.hyperbola, P_tan_tip, P_hyperbola);\n                \n                // Draw circular sector (theta)\n                const arcRadius = 1;\n                const arc_p2 = { x: arcRadius * cos_t, y: -arcRadius * sin_t };\n                const sweepFlag = angleDegrees >= 0 ? 0 : 1; // 0 for counter-clockwise in y-down SVG\n                dom.svg.arcTheta.setAttribute('d', `M 1 0 A ${arcRadius} ${arcRadius} 0 0 ${sweepFlag} ${arc_p2.x} ${arc_p2.y} L 0 0 Z`);\n                \n                // Draw hyperbolic sector area (p) by approximating the curve\n                let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                const steps = 20;\n                for (let i = 1; i <= steps; i++) {\n                    const p_step = p * (i / steps);\n                    hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                }\n                hyperbolicAreaPath += 'Z';\n                dom.svg.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n\n                // --- Update Labels ---\n                const ySign = theta >= 0 ? 1 : -1;\n                const labelOffset = 0.1;\n                dom.svg.labels.theta.setAttribute('x', 0.4 * Math.cos(theta/2));\n                dom.svg.labels.theta.setAttribute('y', -0.4 * Math.sin(theta/2));\n                dom.svg.labels.theta.textContent = 'Î¸';\n                \n                dom.svg.labels.cos.setAttribute('x', P_cos_axis.x / 2);\n                dom.svg.labels.cos.setAttribute('y', ySign * labelOffset * 1.5);\n                dom.svg.labels.cos.textContent = 'cos(Î¸)';\n                \n                dom.svg.labels.sin.setAttribute('x', P_circle.x + labelOffset * Math.sign(cos_t));\n                dom.svg.labels.sin.setAttribute('y', P_circle.y / 2);\n                dom.svg.labels.sin.textContent = 'sin(Î¸)';\n                \n                dom.svg.labels.tanSinh.setAttribute('x', P_hyperbola.x + labelOffset);\n                dom.svg.labels.tanSinh.setAttribute('y', P_hyperbola.y / 2);\n                dom.svg.labels.tanSinh.textContent = 'tan(Î¸)=sinh(p)';\n                \n                dom.svg.labels.secCosh.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.secCosh.setAttribute('y', -labelOffset);\n                dom.svg.labels.secCosh.textContent = 'sec(Î¸)=cosh(p)';\n            }\n\n            // --- ANIMATION LOOP ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                let newVal = currentVal + 0.2; // Animation speed\n                if (newVal > parseFloat(dom.slider.max)) newVal = parseFloat(dom.slider.min);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playIcon.style.display = 'none';\n                    dom.pauseIcon.style.display = 'block';\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playIcon.style.display = 'block';\n                    dom.pauseIcon.style.display = 'none';\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                for (let i = -2; i <= 2; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setLine(vLine, {x: i, y: -2.5}, {x: i, y: 2.5});\n                    vLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setLine(hLine, {x: -2.5, y: i}, {x: 2.5, y: i});\n                    hLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                const maxP = 1.76; const steps = 50; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', (e) => {\n                    updateVisualization(e.target.value);\n                    triggerHighlight(dom.svg.lines.secCosh, 'line-highlight-red');\n                    triggerHighlight(dom.svg.lines.tanSinh, 'line-highlight-green');\n                });\n                dom.slider.addEventListener('change', () => { // For keyboard/assistive tech\n                     dom.svg.lines.secCosh.classList.remove('line-highlight-red');\n                     dom.svg.lines.tanSinh.classList.remove('line-highlight-green');\n                });\n\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .sr-only {\n            position: absolute;\n            width: 1px;\n            height: 1px;\n            padding: 0;\n            margin: -1px;\n            overflow: hidden;\n            clip: rect(0, 0, 0, 0);\n            white-space: nowrap;\n            border-width: 0;\n        }\n\n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        /* Data Panel */\n        .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        /* Overlap secant with cosh to show connection */\n        .svg-line-cosh { stroke: var(--red-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        .svg-line-sinh { stroke: var(--green-color); stroke-width: 0.05; opacity: 0.7; stroke-dasharray: 0.2, 0.05; stroke-linecap: round; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.12px;\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04px;\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec { fill: var(--red-color); }\n        .svg-label-tan { fill: var(--green-color); }\n        .svg-label-cosh { fill: var(--red-color); }\n        .svg-label-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 641px) {\n            .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code style=\"color:var(--red-color)\">sec(Î¸) = cosh(p)</code> and <code style=\"color:var(--green-color)\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"img\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-2.5 -2.5 5 5\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p).</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"0\" refY=\"3.5\" orient=\"auto\" fill=\"var(--text-muted-color)\">\n                                <polygon points=\"0 0, 10 3.5, 0 7\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-2.5\" y=\"-2.5\" width=\"5\" height=\"5\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-2.5\" y1=\"0\" x2=\"2.5\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"2.5\" x2=\"0\" y2=\"-2.5\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-connector\" class=\"svg-guideline\" />\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            \n                            <!-- Circular Functions -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan\" class=\"svg-line-tan\" />\n                            <line id=\"svg-line-sec\" class=\"svg-line-sec\" />\n                            \n                            <!-- Hyperbolic Functions (to overlap and show connection) -->\n                            <line id=\"svg-line-cosh\" class=\"svg-line-cosh\" />\n                            <line id=\"svg-line-sinh\" class=\"svg-line-sinh\" />\n\n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan\" class=\"svg-label svg-label-tan\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sinh\" class=\"svg-label svg-label-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec\" class=\"svg-label svg-label-sec\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cosh\" class=\"svg-label svg-label-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\" class=\"sr-only\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-88\" max=\"88\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: block;\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <span>Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE ---\n            let isPlaying = false;\n            let animationFrameId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playPauseIcon: document.getElementById('play-pause-btn').querySelector('svg'),\n                playPauseText: document.getElementById('play-pause-btn').querySelector('span'),\n                data: {\n                    p: document.getElementById('val-p'),\n                    sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'),\n                    cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    tanh: document.getElementById('val-tanh'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arc: document.getElementById('svg-arc-theta'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                        connector: document.getElementById('svg-guideline-connector'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'),\n                        sin: document.getElementById('svg-line-sin'),\n                        tan: document.getElementById('svg-line-tan'),\n                        sec: document.getElementById('svg-line-sec'),\n                        cosh: document.getElementById('svg-line-cosh'),\n                        sinh: document.getElementById('svg-line-sinh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'),\n                        tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'),\n                        cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'),\n                        tan: document.getElementById('svg-label-tan'),\n                        sec: document.getElementById('svg-label-sec'),\n                        sinh: document.getElementById('svg-label-sinh'),\n                        cosh: document.getElementById('svg-label-cosh'),\n                    }\n                }\n            };\n\n            const playIconSVG = '<path d=\"M8 5v14l11-7z\"></path>';\n            const pauseIconSVG = '<path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path>';\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setLine = (el, p1, p2) => {\n                el.setAttribute('x1', p1.x); el.setAttribute('y1', p1.y);\n                el.setAttribute('x2', p2.x); el.setAttribute('y2', p2.y);\n            };\n            const setPoint = (el, p) => {\n                el.setAttribute('cx', p.x); el.setAttribute('cy', p.y);\n            };\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const theta = (deg * Math.PI) / 180;\n                const clampRange = 88.5 * Math.PI / 180;\n                const clampedTheta = Math.max(-clampRange, Math.min(clampRange, theta));\n                \n                const cos_t = Math.cos(clampedTheta);\n                const sin_t = Math.sin(clampedTheta);\n                const tan_t = Math.tan(clampedTheta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t); // also equals acosh(sec_t) for this range\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text\n                dom.angleDisplay.textContent = `${parseFloat(deg).toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${parseFloat(deg).toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p);\n                dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t);\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p);\n                dom.data.tanh.textContent = format(tanh_p);\n                \n                // Define key points (Y inverted for SVG)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setPoint(dom.svg.points.circle, P_circle);\n                setPoint(dom.svg.points.tangent, P_tan_tip);\n                setPoint(dom.svg.points.hyperbola, P_hyperbola);\n\n                setLine(dom.svg.lines.cos, O, P_cos_axis);\n                setLine(dom.svg.lines.sin, P_cos_axis, P_circle);\n                setLine(dom.svg.lines.tan, P_tan_base, P_tan_tip);\n                setLine(dom.svg.lines.sec, O, P_sec_axis);\n                setLine(dom.svg.lines.cosh, O, P_sec_axis);\n                setLine(dom.svg.lines.sinh, P_sec_axis, P_hyperbola);\n\n                setLine(dom.svg.guidelines.radial, O, P_hyperbola);\n                setLine(dom.svg.guidelines.tan, P_circle, P_tan_tip);\n                setLine(dom.svg.guidelines.hyperbola, P_sec_axis, P_hyperbola);\n                setLine(dom.svg.guidelines.connector, P_tan_tip, P_hyperbola);\n                \n                const arcRadius = 0.3;\n                const arc_p2 = { x: arcRadius * cos_t, y: -arcRadius * sin_t };\n                const largeArcFlag = Math.abs(deg) > 180 ? 1 : 0;\n                const sweepFlag = deg >= 0 ? 1 : 0;\n                dom.svg.arc.setAttribute('d', `M ${arcRadius} 0 A ${arcRadius} ${arcRadius} 0 ${largeArcFlag} ${sweepFlag} ${arc_p2.x} ${arc_p2.y} L 0 0 Z`);\n\n                // Update Labels\n                const ySign = clampedTheta >= 0 ? -1 : 1;\n                const labelOffset = 0.08;\n                dom.svg.labels.theta.setAttribute('x', arcRadius * 1.2 * Math.cos(clampedTheta/2));\n                dom.svg.labels.theta.setAttribute('y', -arcRadius * 1.2 * Math.sin(clampedTheta/2));\n\n                dom.svg.labels.cos.setAttribute('x', P_cos_axis.x / 2);\n                dom.svg.labels.cos.setAttribute('y', ySign * labelOffset * 1.5);\n                dom.svg.labels.sin.setAttribute('x', P_circle.x + labelOffset * ySign * (P_circle.x < 0 ? -1: 1));\n                dom.svg.labels.sin.setAttribute('y', P_circle.y / 2);\n                \n                dom.svg.labels.tan.setAttribute('x', P_tan_tip.x + labelOffset);\n                dom.svg.labels.tan.setAttribute('y', P_tan_tip.y / 2);\n                dom.svg.labels.sinh.setAttribute('x', P_hyperbola.x + labelOffset);\n                dom.svg.labels.sinh.setAttribute('y', P_hyperbola.y / 2);\n                \n                dom.svg.labels.sec.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.sec.setAttribute('y', -labelOffset * 0.8);\n                dom.svg.labels.cosh.setAttribute('x', P_sec_axis.x / 2);\n                dom.svg.labels.cosh.setAttribute('y', labelOffset * 1.5);\n            }\n\n            // --- ANIMATION LOOP ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                let newVal = currentVal + 0.2;\n                if (newVal > dom.slider.max) newVal = parseFloat(dom.slider.min);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playPauseIcon.innerHTML = pauseIconSVG;\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playPauseIcon.innerHTML = playIconSVG;\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                // Generate grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                for (let i = -2; i <= 2; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setLine(vLine, {x: i, y: -2.5}, {x: i, y: 2.5});\n                    vLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setLine(hLine, {x: -2.5, y: i}, {x: 2.5, y: i});\n                    hLine.setAttribute('class', 'svg-grid-line');\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                // Generate hyperbola path\n                const maxP = 1.7; const steps = 50; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                // Add event listeners\n                dom.slider.addEventListener('input', (e) => updateVisualization(e.target.value));\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Refactor the SVG visualization for clarity by overhauling the labeling and line representation. First, replace the separate, overlapping text labels for equal functions (e.g., 'sec' and 'cosh') with a single, dynamically positioned label that reads 'sec(Î¸) = cosh(p)'. Second, instead of drawing two overlapping lines for secant/cosh and tangent/sinh, render only a single line for each pair. Use a brief color pulse or highlight animation on these lines when the angle value changes to emphasize that one geometric line represents two equal functions.; Implement the geometric representation of the hyperbolic parameter 'p' to complete the core analogy. Add a new, semi-transparent, filled SVG path to visualize the hyperbolic sector area (bounded by the origin, (1,0), and the point on the hyperbola), which corresponds to p/2. Complement this by updating the 'Live Values' panel to explicitly display the calculated areas for both the circular sector (Î¸/2) and the new hyperbolic sector (p/2), making the abstract connection between the angle Î¸ and the parameter p visually intuitive.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan-sinh { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec-cosh { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.15; /* Unitless for SVG coordinate space */\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04; /* Unitless */\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight {\n            50% { stroke-width: 0.07; }\n        }\n        \n        .highlight-active {\n            animation: pulse-highlight 0.3s ease-out;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter, and Î¸/2 and p/2 represent sector areas.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Areas and Arcs -->\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <!-- Function Lines -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-line-tan-sinh\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-line-sec-cosh\" />\n                            \n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-70\" max=\"70\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                         <div class=\"data-group\" style=\"margin-top: 1.25rem;\">\n                            <h3>Sector Areas</h3>\n                            <dl class=\"data-list\">\n                                <dt>Circular (Î¸/2) =</dt>\n                                <dd id=\"val-area-circular\" class=\"dd-area-circ\">0.393</dd>\n                                <dt>Hyperbolic (p/2) =</dt>\n                                <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\">0.441</dd>\n                            </dl>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>A CodeAuditor Maximus Rectification | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CONSTANTS & STATE ---\n            const ANIMATION_SPEED = 0.2;\n            const HIGHLIGHT_DURATION = 300; // ms\n            let isPlaying = false;\n            let animationFrameId = null;\n            let animationDirection = 1; // 1 for forward, -1 for reverse\n            let highlightTimeoutId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), tanh: document.getElementById('val-tanh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const angleDegrees = parseFloat(deg);\n                if (isNaN(angleDegrees)) return;\n\n                const theta = (angleDegrees * Math.PI) / 180;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = Math.tan(theta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text values\n                dom.angleDisplay.textContent = `${angleDegrees.toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.tanh.textContent = format(tanh_p);\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                // Define key points (Y inverted for SVG coordinate system)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setAttr(dom.svg.points.circle, { cx: P_circle.x, cy: P_circle.y });\n                setAttr(dom.svg.points.tangent, { cx: P_tan_tip.x, cy: P_tan_tip.y });\n                setAttr(dom.svg.points.hyperbola, { cx: P_hyperbola.x, cy: P_hyperbola.y });\n\n                setAttr(dom.svg.lines.cos, { x1: O.x, y1: O.y, x2: P_cos_axis.x, y2: P_cos_axis.y });\n                setAttr(dom.svg.lines.sin, { x1: P_cos_axis.x, y1: P_cos_axis.y, x2: P_circle.x, y2: P_circle.y });\n                setAttr(dom.svg.lines.tanSinh, { x1: P_sec_axis.x, y1: P_sec_axis.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.lines.secCosh, { x1: O.x, y1: O.y, x2: P_sec_axis.x, y2: P_sec_axis.y });\n                \n                setAttr(dom.svg.guidelines.radial, { x1: O.x, y1: O.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.guidelines.tan, { x1: P_circle.x, y1: P_circle.y, x2: P_tan_tip.x, y2: P_tan_tip.y });\n                setAttr(dom.svg.guidelines.hyperbola, { x1: P_tan_tip.x, y1: P_tan_tip.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svg.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${P_circle.x} ${P_circle.y} L 0 0 Z`);\n                \n                let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                const steps = 50; // Increased for smoothness\n                for (let i = 1; i <= steps; i++) {\n                    const p_step = p * (i / steps);\n                    hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                }\n                hyperbolicAreaPath += 'Z';\n                dom.svg.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n\n                // Update Labels\n                const ySign = theta >= 0 ? 1 : -1;\n                const labelOffset = 0.12;\n                setAttr(dom.svg.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                dom.svg.labels.theta.textContent = 'Î¸';\n                \n                setAttr(dom.svg.labels.cos, { x: P_cos_axis.x / 2, y: ySign * labelOffset * 1.5 });\n                dom.svg.labels.cos.textContent = 'cos';\n                \n                setAttr(dom.svg.labels.sin, { x: P_circle.x + labelOffset * Math.sign(cos_t), y: P_circle.y / 2 });\n                dom.svg.labels.sin.textContent = 'sin';\n                \n                setAttr(dom.svg.labels.tanSinh, { x: P_hyperbola.x + labelOffset, y: P_hyperbola.y / 2 });\n                dom.svg.labels.tanSinh.textContent = 'tan=sinh';\n                \n                setAttr(dom.svg.labels.secCosh, { x: P_sec_axis.x / 2, y: -labelOffset * 1.5 });\n                dom.svg.labels.secCosh.textContent = 'sec=cosh';\n            }\n\n            // --- ANIMATION & EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const newVal = currentVal + (ANIMATION_SPEED * animationDirection);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playIcon.style.display = 'none';\n                    dom.pauseIcon.style.display = 'block';\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playIcon.style.display = 'block';\n                    dom.pauseIcon.style.display = 'none';\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n            \n            function handleSliderInput(e) {\n                updateVisualization(e.target.value);\n                \n                if (highlightTimeoutId) clearTimeout(highlightTimeoutId);\n\n                dom.svg.lines.secCosh.classList.add('highlight-active');\n                dom.svg.lines.tanSinh.classList.add('highlight-active');\n                \n                highlightTimeoutId = setTimeout(() => {\n                    dom.svg.lines.secCosh.classList.remove('highlight-active');\n                    dom.svg.lines.tanSinh.classList.remove('highlight-active');\n                }, HIGHLIGHT_DURATION);\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                const maxP = 1.76; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', handleSliderInput);\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement direct SVG manipulation and intelligent UI enhancements. Enable users to click-and-drag the point on the unit circle (#svg-point-circle) to set the angle, providing more intuitive control. Implement dynamic label positioning for all SVG text elements to prevent them from overlapping at acute angles. Finally, create a two-way interactive highlighting system: hovering over a line in the SVG (e.g., #svg-line-sin) should highlight its corresponding value row in the sidebar, and vice-versa, to powerfully reinforce the visual-to-data connection.",
            "Enhance user controls and add explicit conceptual explanations. Replace the arbitrary -70/+70 degree slider limit with a range approaching +/-90 degrees (e.g., -89.9 to 89.9), gracefully handling the mathematical asymptotes by fading out the tan/sec lines and displaying 'undefined' or 'â' in the data panel. Add an input field for precise numerical angle entry and a slider to control the animation speed. Lastly, introduce a new collapsible 'Explanation' panel that explicitly defines the Gudermannian function and clarifies the geometric significance of the equal sector areas (Î¸/2 and p/2), fulfilling a core part of the original idea."
          ]
        },
        {
          "iterationNumber": 2,
          "title": "Refine 2: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d; /* AA Compliant Contrast */\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging {\n            cursor: grabbing;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n        }\n        #angle-input:focus {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            width: 100%; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04;\n            stroke-linejoin: round; pointer-events: none;\n        }\n        .svg-label { font-size: 0.15; }\n        .svg-axis-label { font-size: 0.12; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\">\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector (in blue/green) is <code>Î¸/2</code>, and the area of the hyperbolic sector (in yellow/orange) is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CORE MATHEMATICAL CONTEXT ---\n            // This script visualizes the relationship between circular and hyperbolic trigonometry\n            // via the Gudermannian function, where `p = gd(Î¸)`.\n            // Key identities shown:\n            // sec(Î¸) = cosh(p)\n            // tan(Î¸) = sinh(p)\n            // The area of the circular sector is Î¸/2, and the hyperbolic sector area is p/2.\n\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let wasPlayingBeforeDrag = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees) {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = theta >= 0 ? 1 : -1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n                const isNearHorizontal = Math.abs(sin_t) < 0.3;\n\n                // Theta Label\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                // Cos Label\n                const cosLabelYOffset = isNearVertical ? ySign * 0.20 : ySign * 0.15;\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosLabelYOffset });\n                \n                // Sin Label\n                const sinLabelXOffset = isNearVertical ? Math.sign(cos_t || 1) * 0.2 : Math.sign(cos_t || 1) * 0.12;\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinLabelXOffset, y: points.P_circle.y / 2 });\n                dom.svgElements.labels.sin.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Tan/Sinh Label\n                const tanSinhLabelXOffset = isNearHorizontal ? 0.35 : 0.12;\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? tanSinhLabelXOffset : -tanSinhLabelXOffset), y: points.P_hyperbola.y / 2 });\n                dom.svgElements.labels.tanSinh.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Sec/Cosh Label\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function updateVisualization(angleDegrees) {\n                const isAtAsymptote = Math.abs(angleDegrees) >= ASYMPTOTE_THRESHOLD;\n                const theta = angleDegrees * DEG_TO_RAD;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                // Update Data Panel\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = isFinite(p) ? format(p) : 'â';\n                dom.data.sec.textContent = isFinite(sec_t) ? format(sec_t) : 'â';\n                dom.data.tan.textContent = isFinite(tan_t) ? format(tan_t) : 'â';\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = isFinite(cosh_p) ? format(cosh_p) : 'â';\n                dom.data.sinh.textContent = isFinite(sinh_p) ? format(sinh_p) : 'â';\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = isFinite(p) ? format(Math.abs(p / 2)) : 'â';\n                \n                // Define key points (Y inverted for SVG coord system)\n                const points = {\n                    P_circle: { x: cos_t, y: -sin_t },\n                    P_cos_axis: { x: cos_t, y: 0 },\n                    P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t },\n                    P_sec_axis: { x: sec_t, y: 0 },\n                    cos_t: cos_t, sin_t: sin_t\n                };\n\n                // Update SVG elements' visibility and position\n                const lineOpacity = isAtAsymptote ? 0 : 1;\n                dom.svgElements.lines.tanSinh.style.opacity = lineOpacity;\n                dom.svgElements.lines.secCosh.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.radial.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.tangent.style.opacity = lineOpacity;\n                dom.svgElements.areaHyperbolic.style.opacity = isAtAsymptote ? 0 : 0.2;\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: 0, y1: 0, x2: points.P_cos_axis.x, y2: 0 });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: 0, x2: points.P_circle.x, y2: points.P_circle.y });\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: 0, y1: 0, x2: points.P_sec_axis.x, y2: 0 });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: 0, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_tan_tip.x, y1: points.P_tan_tip.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                }\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p)) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else if (animationFrameId) {\n                    cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                }\n            }\n\n            // SVG Dragging\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y }; // Invert Y for standard math coordinates\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                isDragging = true;\n                wasPlayingBeforeDrag = isPlaying;\n                if (isPlaying) togglePlay(false);\n\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                if(wasPlayingBeforeDrag) {\n                   // togglePlay(true); // Decided against auto-resume for predictability\n                   wasPlayingBeforeDrag = false;\n                }\n            }\n\n            // Highlighting\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('line, path, circle') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight() {\n                document.querySelectorAll('.is-highlighted-svg, .is-highlighted-data').forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            // --- INITIAL SETUP ---\n            function setup() {\n                // Draw grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n\n                // Draw static hyperbola path (extended range)\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                // Add Event Listeners\n                dom.slider.addEventListener('input', e => updateAll(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value));\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                \n                // Drag Listeners (Mouse & Touch)\n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                \n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                // Highlight Listeners (using event delegation)\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n\n                // Initial render\n                updateAll(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n        }\n        #angle-input:focus {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            width: 100%; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label {\n            font-family: var(--font-mono); font-size: 0.15;\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04;\n            stroke-linejoin: round; pointer-events: none;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight { 50% { stroke-width: 0.07; } }\n        .highlight-active, .is-highlighted-svg { animation: pulse-highlight 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\">\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector (in green/blue) is <code>Î¸/2</code>, and the area of the hyperbolic sector (in yellow/orange) is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees) {\n                const angleDegrees = clamp(parseFloat(degrees), -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleDegrees.toFixed(1)) dom.angleInput.value = angleDegrees.toFixed(1);\n\n                updateVisualization(angleDegrees);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = theta >= 0 ? 1 : -1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n                const isNearHorizontal = Math.abs(sin_t) < 0.3;\n\n                // Theta Label\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                // Cos Label\n                const cosLabelYOffset = isNearVertical ? ySign * 0.25 : ySign * 0.12;\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosLabelYOffset });\n                \n                // Sin Label\n                const sinLabelXOffset = isNearVertical ? Math.sign(cos_t) * 0.2 : Math.sign(cos_t) * 0.12;\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinLabelXOffset, y: points.P_circle.y / 2 });\n                dom.svgElements.labels.sin.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Tan/Sinh Label\n                const tanSinhLabelXOffset = isNearHorizontal ? 0.35 : 0.12;\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + tanSinhLabelXOffset, y: points.P_hyperbola.y / 2 });\n\n                // Sec/Cosh Label\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function updateVisualization(angleDegrees) {\n                const isAtAsymptote = Math.abs(angleDegrees) >= ASYMPTOTE_THRESHOLD;\n                const theta = angleDegrees * DEG_TO_RAD;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                // Update Data Panel\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = isFinite(p) ? format(p) : 'â';\n                dom.data.sec.textContent = isFinite(sec_t) ? format(sec_t) : 'â';\n                dom.data.tan.textContent = isFinite(tan_t) ? format(tan_t) : 'â';\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = isFinite(cosh_p) ? format(cosh_p) : 'â';\n                dom.data.sinh.textContent = isFinite(sinh_p) ? format(sinh_p) : 'â';\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = isFinite(p) ? format(Math.abs(p / 2)) : 'â';\n                \n                // Define key points (Y inverted for SVG coord system)\n                const points = {\n                    O: { x: 0, y: 0 },\n                    P_circle: { x: cos_t, y: -sin_t },\n                    P_cos_axis: { x: cos_t, y: 0 },\n                    P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t },\n                    P_sec_axis: { x: sec_t, y: 0 },\n                    cos_t: cos_t,\n                    sin_t: sin_t\n                };\n\n                // Update SVG elements\n                const lineOpacity = isAtAsymptote ? 0 : 1;\n                dom.svgElements.lines.tanSinh.style.opacity = lineOpacity;\n                dom.svgElements.lines.secCosh.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.radial.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.tangent.style.opacity = lineOpacity;\n                dom.svgElements.areaHyperbolic.style.opacity = isAtAsymptote ? 0 : 0.2;\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: 0, y1: 0, x2: points.P_cos_axis.x, y2: 0 });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: 0, x2: points.P_circle.x, y2: points.P_circle.y });\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: 0, y1: 0, x2: points.P_sec_axis.x, y2: 0 });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: 0, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_tan_tip.x, y1: points.P_tan_tip.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                }\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p)) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 50;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else if (animationFrameId) {\n                    cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                }\n            }\n\n            // SVG Dragging\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y }; // Invert Y\n            }\n\n            function handleDragStart(e) {\n                if (e.target === dom.svgElements.points.circle || e.target === dom.svg) {\n                    isDragging = true;\n                    dom.svgElements.points.circle.style.cursor = 'grabbing';\n                }\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragEnd() {\n                isDragging = false;\n                dom.svgElements.points.circle.style.cursor = 'grab';\n            }\n\n            // Highlighting\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.tagName === 'line' ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                 const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll('.is-highlighted-svg, .is-highlighted-data').forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            // --- INITIAL SETUP ---\n            function setup() {\n                // Draw grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n\n                // Draw static hyperbola path (extended range)\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                // Add Event Listeners\n                dom.slider.addEventListener('input', e => updateAll(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value));\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n                \n                // Drag Listeners\n                dom.svg.addEventListener('mousedown', handleDragStart);\n                dom.svg.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('mouseleave', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                dom.svg.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                // Highlight Listeners\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n\n                // Initial render\n                updateAll(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #6f788b;\n            --border-color: #333d52;\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(300px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 0.75rem;\n        }\n\n        .controls-group label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        #angle-display {\n            font-family: var(--font-mono);\n            font-size: 1rem;\n            background-color: var(--bg-color);\n            padding: 0.2rem 0.5rem;\n            border-radius: 4px;\n            color: var(--accent-color);\n        }\n\n        input[type=\"range\"] {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 100%;\n            height: 8px;\n            background: var(--border-color);\n            border-radius: 5px;\n            outline: none;\n            cursor: pointer;\n        }\n\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none;\n            appearance: none;\n            width: 20px;\n            height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        \n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px;\n            height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%;\n            border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb {\n            background: var(--accent-color);\n        }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb {\n            background: var(--accent-color);\n        }\n\n        input[type=\"range\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            border: none;\n            padding: 0.5rem 1rem;\n            border-radius: var(--border-radius);\n            cursor: pointer;\n            font-weight: 600;\n            font-size: 1rem;\n            margin-top: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            gap: 0.5rem;\n        }\n        .play-pause-btn:hover {\n            background-color: var(--accent-color);\n        }\n        .play-pause-btn:active {\n            transform: scale(0.98);\n        }\n        .play-pause-btn:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem;\n            font-weight: 600;\n            color: var(--text-color);\n            margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid;\n            grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem;\n            font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt {\n            color: var(--text-muted-color);\n            text-align: right;\n            white-space: nowrap;\n        }\n\n        .data-list dd {\n            font-weight: 500;\n            color: var(--text-color);\n            overflow-wrap: break-word;\n            word-break: break-all;\n        }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem;\n            border-radius: 4px;\n        }\n        .connection-highlight.green {\n            background-color: color-mix(in srgb, var(--green-color) 20%, transparent);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        #svg-dynamic-elements > * {\n            transition: all 0.05s linear;\n        }\n        \n        .svg-line-cos { stroke: var(--primary-color); stroke-width: 0.04; }\n        .svg-line-sin { stroke: var(--secondary-color); stroke-width: 0.04; }\n        .svg-line-tan-sinh { stroke: var(--green-color); stroke-width: 0.04; }\n        .svg-line-sec-cosh { stroke: var(--red-color); stroke-width: 0.04; }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; }\n        \n        .svg-label {\n            font-family: var(--font-mono);\n            font-size: 0.15; /* Unitless for SVG coordinate space */\n            fill: var(--text-color);\n            paint-order: stroke;\n            stroke: var(--surface-color);\n            stroke-width: 0.04; /* Unitless */\n            stroke-linejoin: round;\n        }\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight {\n            50% { stroke-width: 0.07; }\n        }\n        \n        .highlight-active {\n            animation: pulse-highlight 0.3s ease-out;\n        }\n\n        footer {\n            text-align: center;\n            padding: 1.5rem;\n            margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color);\n            font-size: 0.9rem;\n        }\n\n        /* Responsive Layout */\n        @media (max-width: 1024px) {\n            .layout-grid {\n                grid-template-columns: 1fr;\n            }\n            .sidebar {\n                grid-row: 1;\n            }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container {\n                padding: 1rem;\n            }\n            .panel {\n                padding: 1rem;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>, where p is the Gudermannian parameter, and Î¸/2 and p/2 represent sector areas.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n\n                        <g id=\"svg-dynamic-elements\">\n                            <!-- Areas and Arcs -->\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <!-- Guidelines -->\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <!-- Function Lines -->\n                            <line id=\"svg-line-cos\" class=\"svg-line-cos\" />\n                            <line id=\"svg-line-sin\" class=\"svg-line-sin\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-line-tan-sinh\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-line-sec-cosh\" />\n                            \n                            <!-- Points -->\n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <!-- Labels -->\n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\"></text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\"></text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\"></text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Interactive visualization of trigonometric functions.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <label for=\"angle-slider\">\n                                <span>Angle (Î¸)</span>\n                                <span id=\"angle-display\">45.0Â°</span>\n                            </label>\n                            <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-70\" max=\"70\" value=\"45\" step=\"0.1\" aria-describedby=\"angle-display\">\n                            <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-group\">\n                            <h3>Connection Parameter</h3>\n                            <dl class=\"data-list\">\n                                <dt title=\"Gudermannian parameter p = ln(sec(Î¸) + tan(Î¸))\">p =</dt>\n                                <dd id=\"val-p\" class=\"dd-p\">0.881</dd>\n                            </dl>\n                        </div>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\">1.414</dd>\n                                    <dt>tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\">1.000</dd>\n                                    <dt>cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\">0.707</dd>\n                                    <dt>sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt>cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\">1.414</dd>\n                                    <dt>sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\">1.000</dd>\n                                    <dt>tanh(p) =</dt>\n                                    <dd id=\"val-tanh\">0.707</dd>\n                                </dl>\n                            </div>\n                        </div>\n                         <div class=\"data-group\" style=\"margin-top: 1.25rem;\">\n                            <h3>Sector Areas</h3>\n                            <dl class=\"data-list\">\n                                <dt>Circular (Î¸/2) =</dt>\n                                <dd id=\"val-area-circular\" class=\"dd-area-circ\">0.393</dd>\n                                <dt>Hyperbolic (p/2) =</dt>\n                                <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\">0.441</dd>\n                            </dl>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>A CodeAuditor Maximus Rectification | &copy; 2024</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CONSTANTS & STATE ---\n            const ANIMATION_SPEED = 0.2;\n            const HIGHLIGHT_DURATION = 300; // ms\n            let isPlaying = false;\n            let animationFrameId = null;\n            let animationDirection = 1; // 1 for forward, -1 for reverse\n            let highlightTimeoutId = null;\n\n            // --- DOM ELEMENTS ---\n            const dom = {\n                slider: document.getElementById('angle-slider'),\n                angleDisplay: document.getElementById('angle-display'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), tanh: document.getElementById('val-tanh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svg: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n\n            // --- MAIN UPDATE LOGIC ---\n            function updateVisualization(deg) {\n                const angleDegrees = parseFloat(deg);\n                if (isNaN(angleDegrees)) return;\n\n                const theta = (angleDegrees * Math.PI) / 180;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = Math.tan(theta);\n                const sec_t = 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n                const tanh_p = Math.tanh(p);\n\n                // Update UI text values\n                dom.angleDisplay.textContent = `${angleDegrees.toFixed(1)}Â°`;\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.tanh.textContent = format(tanh_p);\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                // Define key points (Y inverted for SVG coordinate system)\n                const O = { x: 0, y: 0 };\n                const P_circle = { x: cos_t, y: -sin_t };\n                const P_cos_axis = { x: cos_t, y: 0 };\n                const P_tan_base = { x: 1, y: 0 };\n                const P_tan_tip = { x: 1, y: -tan_t };\n                const P_hyperbola = { x: sec_t, y: -tan_t };\n                const P_sec_axis = { x: sec_t, y: 0 };\n\n                // Update SVG elements\n                setAttr(dom.svg.points.circle, { cx: P_circle.x, cy: P_circle.y });\n                setAttr(dom.svg.points.tangent, { cx: P_tan_tip.x, cy: P_tan_tip.y });\n                setAttr(dom.svg.points.hyperbola, { cx: P_hyperbola.x, cy: P_hyperbola.y });\n\n                setAttr(dom.svg.lines.cos, { x1: O.x, y1: O.y, x2: P_cos_axis.x, y2: P_cos_axis.y });\n                setAttr(dom.svg.lines.sin, { x1: P_cos_axis.x, y1: P_cos_axis.y, x2: P_circle.x, y2: P_circle.y });\n                setAttr(dom.svg.lines.tanSinh, { x1: P_sec_axis.x, y1: P_sec_axis.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.lines.secCosh, { x1: O.x, y1: O.y, x2: P_sec_axis.x, y2: P_sec_axis.y });\n                \n                setAttr(dom.svg.guidelines.radial, { x1: O.x, y1: O.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                setAttr(dom.svg.guidelines.tan, { x1: P_circle.x, y1: P_circle.y, x2: P_tan_tip.x, y2: P_tan_tip.y });\n                setAttr(dom.svg.guidelines.hyperbola, { x1: P_tan_tip.x, y1: P_tan_tip.y, x2: P_hyperbola.x, y2: P_hyperbola.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svg.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${P_circle.x} ${P_circle.y} L 0 0 Z`);\n                \n                let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                const steps = 50; // Increased for smoothness\n                for (let i = 1; i <= steps; i++) {\n                    const p_step = p * (i / steps);\n                    hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                }\n                hyperbolicAreaPath += 'Z';\n                dom.svg.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n\n                // Update Labels\n                const ySign = theta >= 0 ? 1 : -1;\n                const labelOffset = 0.12;\n                setAttr(dom.svg.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                dom.svg.labels.theta.textContent = 'Î¸';\n                \n                setAttr(dom.svg.labels.cos, { x: P_cos_axis.x / 2, y: ySign * labelOffset * 1.5 });\n                dom.svg.labels.cos.textContent = 'cos';\n                \n                setAttr(dom.svg.labels.sin, { x: P_circle.x + labelOffset * Math.sign(cos_t), y: P_circle.y / 2 });\n                dom.svg.labels.sin.textContent = 'sin';\n                \n                setAttr(dom.svg.labels.tanSinh, { x: P_hyperbola.x + labelOffset, y: P_hyperbola.y / 2 });\n                dom.svg.labels.tanSinh.textContent = 'tan=sinh';\n                \n                setAttr(dom.svg.labels.secCosh, { x: P_sec_axis.x / 2, y: -labelOffset * 1.5 });\n                dom.svg.labels.secCosh.textContent = 'sec=cosh';\n            }\n\n            // --- ANIMATION & EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const newVal = currentVal + (ANIMATION_SPEED * animationDirection);\n                dom.slider.value = newVal;\n                updateVisualization(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay() {\n                isPlaying = !isPlaying;\n                if (isPlaying) {\n                    dom.playPauseBtn.setAttribute('aria-label', 'Pause animation');\n                    dom.playIcon.style.display = 'none';\n                    dom.pauseIcon.style.display = 'block';\n                    dom.playPauseText.textContent = 'Pause';\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    dom.playPauseBtn.setAttribute('aria-label', 'Play animation');\n                    dom.playIcon.style.display = 'block';\n                    dom.pauseIcon.style.display = 'none';\n                    dom.playPauseText.textContent = 'Play';\n                }\n            }\n            \n            function handleSliderInput(e) {\n                updateVisualization(e.target.value);\n                \n                if (highlightTimeoutId) clearTimeout(highlightTimeoutId);\n\n                dom.svg.lines.secCosh.classList.add('highlight-active');\n                dom.svg.lines.tanSinh.classList.add('highlight-active');\n                \n                highlightTimeoutId = setTimeout(() => {\n                    dom.svg.lines.secCosh.classList.remove('highlight-active');\n                    dom.svg.lines.tanSinh.classList.remove('highlight-active');\n                }, HIGHLIGHT_DURATION);\n            }\n\n            // --- ONE-TIME SETUP ---\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svg.grid.appendChild(hLine);\n                }\n\n                const maxP = 1.76; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svg.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', handleSliderInput);\n                dom.playPauseBtn.addEventListener('click', togglePlay);\n\n                // Initial render\n                updateVisualization(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement direct SVG manipulation and intelligent UI enhancements. Enable users to click-and-drag the point on the unit circle (#svg-point-circle) to set the angle, providing more intuitive control. Implement dynamic label positioning for all SVG text elements to prevent them from overlapping at acute angles. Finally, create a two-way interactive highlighting system: hovering over a line in the SVG (e.g., #svg-line-sin) should highlight its corresponding value row in the sidebar, and vice-versa, to powerfully reinforce the visual-to-data connection.; Enhance user controls and add explicit conceptual explanations. Replace the arbitrary -70/+70 degree slider limit with a range approaching +/-90 degrees (e.g., -89.9 to 89.9), gracefully handling the mathematical asymptotes by fading out the tan/sec lines and displaying 'undefined' or 'â' in the data panel. Add an input field for precise numerical angle entry and a slider to control the animation speed. Lastly, introduce a new collapsible 'Explanation' panel that explicitly defines the Gudermannian function and clarifies the geometric significance of the equal sector areas (Î¸/2 and p/2), fulfilling a core part of the original idea.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d; /* AA Compliant Contrast */\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging {\n            cursor: grabbing;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n        }\n        #angle-input:focus {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            width: 100%; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04;\n            stroke-linejoin: round; pointer-events: none;\n        }\n        .svg-label { font-size: 0.15; }\n        .svg-axis-label { font-size: 0.12; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\">\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector (in blue/green) is <code>Î¸/2</code>, and the area of the hyperbolic sector (in yellow/orange) is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CORE MATHEMATICAL CONTEXT ---\n            // This script visualizes the relationship between circular and hyperbolic trigonometry\n            // via the Gudermannian function, where `p = gd(Î¸)`.\n            // Key identities shown:\n            // sec(Î¸) = cosh(p)\n            // tan(Î¸) = sinh(p)\n            // The area of the circular sector is Î¸/2, and the hyperbolic sector area is p/2.\n\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let wasPlayingBeforeDrag = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees) {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = theta >= 0 ? 1 : -1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n                const isNearHorizontal = Math.abs(sin_t) < 0.3;\n\n                // Theta Label\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                // Cos Label\n                const cosLabelYOffset = isNearVertical ? ySign * 0.20 : ySign * 0.15;\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosLabelYOffset });\n                \n                // Sin Label\n                const sinLabelXOffset = isNearVertical ? Math.sign(cos_t || 1) * 0.2 : Math.sign(cos_t || 1) * 0.12;\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinLabelXOffset, y: points.P_circle.y / 2 });\n                dom.svgElements.labels.sin.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Tan/Sinh Label\n                const tanSinhLabelXOffset = isNearHorizontal ? 0.35 : 0.12;\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? tanSinhLabelXOffset : -tanSinhLabelXOffset), y: points.P_hyperbola.y / 2 });\n                dom.svgElements.labels.tanSinh.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Sec/Cosh Label\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function updateVisualization(angleDegrees) {\n                const isAtAsymptote = Math.abs(angleDegrees) >= ASYMPTOTE_THRESHOLD;\n                const theta = angleDegrees * DEG_TO_RAD;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                // Update Data Panel\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = isFinite(p) ? format(p) : 'â';\n                dom.data.sec.textContent = isFinite(sec_t) ? format(sec_t) : 'â';\n                dom.data.tan.textContent = isFinite(tan_t) ? format(tan_t) : 'â';\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = isFinite(cosh_p) ? format(cosh_p) : 'â';\n                dom.data.sinh.textContent = isFinite(sinh_p) ? format(sinh_p) : 'â';\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = isFinite(p) ? format(Math.abs(p / 2)) : 'â';\n                \n                // Define key points (Y inverted for SVG coord system)\n                const points = {\n                    P_circle: { x: cos_t, y: -sin_t },\n                    P_cos_axis: { x: cos_t, y: 0 },\n                    P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t },\n                    P_sec_axis: { x: sec_t, y: 0 },\n                    cos_t: cos_t, sin_t: sin_t\n                };\n\n                // Update SVG elements' visibility and position\n                const lineOpacity = isAtAsymptote ? 0 : 1;\n                dom.svgElements.lines.tanSinh.style.opacity = lineOpacity;\n                dom.svgElements.lines.secCosh.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.radial.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.tangent.style.opacity = lineOpacity;\n                dom.svgElements.areaHyperbolic.style.opacity = isAtAsymptote ? 0 : 0.2;\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: 0, y1: 0, x2: points.P_cos_axis.x, y2: 0 });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: 0, x2: points.P_circle.x, y2: points.P_circle.y });\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: 0, y1: 0, x2: points.P_sec_axis.x, y2: 0 });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: 0, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_tan_tip.x, y1: points.P_tan_tip.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                }\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p)) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else if (animationFrameId) {\n                    cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                }\n            }\n\n            // SVG Dragging\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y }; // Invert Y for standard math coordinates\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                isDragging = true;\n                wasPlayingBeforeDrag = isPlaying;\n                if (isPlaying) togglePlay(false);\n\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                if(wasPlayingBeforeDrag) {\n                   // togglePlay(true); // Decided against auto-resume for predictability\n                   wasPlayingBeforeDrag = false;\n                }\n            }\n\n            // Highlighting\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('line, path, circle') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight() {\n                document.querySelectorAll('.is-highlighted-svg, .is-highlighted-data').forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            // --- INITIAL SETUP ---\n            function setup() {\n                // Draw grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n\n                // Draw static hyperbola path (extended range)\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                // Add Event Listeners\n                dom.slider.addEventListener('input', e => updateAll(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value));\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                \n                // Drag Listeners (Mouse & Touch)\n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                \n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                // Highlight Listeners (using event delegation)\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n\n                // Initial render\n                updateAll(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement URL hash-based state management to make the visualization shareable and bookmarkable. The current angle `Î¸` should be synchronized with the URL hash (e.g., `.../index.html#theta=45`), and the application should read this hash on initial load to set the state. Concurrently, enhance the user experience at the asymptotes by replacing the abrupt disappearance of SVG elements at +/-89.9 degrees with a smooth, progressive fade-out effect that begins as the angle approaches this limit (e.g., from 88 degrees onward), providing more graceful and intuitive visual feedback.",
            "Introduce a 'Focus Mode' via toggle controls in the sidebar to enhance pedagogical clarity. The user should be able to cycle through three distinct views: 1) 'Circular Only' (hiding the hyperbola, its sector, and related lines/labels), 2) 'Hyperbolic Only' (hiding the circle and its components), and 3) the default 'Connected View'. To make the core relationship more dynamic, supplement the existing hover-highlight with a brief, synchronized pulse animation on the paired lines (`sec(Î¸)`/`cosh(p)` and `tan(Î¸)`/`sinh(p)`) that triggers automatically for a moment whenever the angle changes, actively demonstrating their equality."
          ]
        },
        {
          "iterationNumber": 3,
          "title": "Refine 3: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color 0.2s, outline-color 0.2s;\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color 0.2s ease, color 0.2s ease;\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity 0.3s ease; }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; transition: opacity 0.3s ease; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; transition: opacity 0.3s ease; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity 0.3s ease-out; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease, opacity 0.3s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        /* Highlighting and Pulse Animations */\n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg {\n            0% { stroke-width: 0.03; }\n            50% { stroke-width: 0.08; }\n            100% { stroke-width: 0.03; }\n        }\n        @keyframes pulse-dynamic-data {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n        }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        /* Focus Mode Styles */\n        /* !important is necessary to override inline style 'opacity' set by JavaScript\n           for the asymptote fade effect, ensuring focus mode visibility rules take precedence. */\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; \n            pointer-events: none; \n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'), },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola'),},\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'),\n                        tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                triggerPulse();\n\n                if (source === 'user') {\n                    updateURLHash(angleDegrees);\n                }\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                \n                const asymptoteFadeFactor = (angleAbs < FADE_START_ANGLE) ? 1 : 1 - (angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE);\n                \n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }, cos_t, sin_t };\n\n                const fadeTargets = [dom.svgElements.lines.tanSinh, dom.svgElements.lines.secCosh, dom.svgElements.points.hyperbola, dom.svgElements.points.tangent, dom.svgElements.areaHyperbolic, dom.svgElements.unitHyperbola, dom.svgElements.labels.secCosh, dom.svgElements.labels.tanSinh];\n                fadeTargets.forEach(el => el.style.opacity = asymptoteFadeFactor);\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * (isNearVertical ? 0.20 : 0.15) });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * (isNearVertical ? 0.2 : 0.12), y: points.P_circle.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'},\n                    {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow to restart animation\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', isActive);\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                updateURLHash(dom.slider.value);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return parseFloat(dom.slider.value);\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('change', e => {\n                    const parsedValue = parseFloat(e.target.value);\n                    if (isNaN(parsedValue)) {\n                        e.target.value = dom.slider.value;\n                        return;\n                    }\n                    updateAll(clamp(parsedValue, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD), 'user');\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem; /* Increased gap for new control */\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n        }\n        #angle-input:focus {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        /* Hide number input spinners */\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            width: 100%; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color 0.2s ease, color 0.2s ease;\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity 0.3s ease; }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; transition: opacity 0.3s ease; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; transition: opacity 0.3s ease; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity 0.3s ease-out; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease, opacity 0.3s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04;\n            stroke-linejoin: round; pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n        .svg-label { font-size: 0.15; }\n        .svg-axis-label { font-size: 0.12; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        /* Highlighting and Pulse Animations */\n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg {\n            0% { stroke-width: 0.03; }\n            50% { stroke-width: 0.08; }\n            100% { stroke-width: 0.03; }\n        }\n        @keyframes pulse-dynamic-data {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n        }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n\n        /* Focus Mode Styles */\n        body.focus-circular .hyperbolic-element { opacity: 0 !important; pointer-events: none; }\n        body.focus-hyperbolic .circular-element { opacity: 0 !important; pointer-events: none; }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline hyperbolic-element\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline hyperbolic-element\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'), },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola'),},\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'),\n                        tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                triggerPulse();\n\n                if (source === 'user') {\n                    updateURLHash(angleDegrees);\n                }\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                \n                // Calculate progressive fade-out opacity near asymptotes\n                const asymptoteFadeFactor = (angleAbs < FADE_START_ANGLE) ? 1 : 1 - (angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE);\n                \n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                // Update Data Panel\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                // Define key points (Y inverted for SVG coord system)\n                const points = { P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }, cos_t, sin_t };\n\n                // Apply asymptote fade to relevant elements\n                const fadeTargets = [dom.svgElements.lines.tanSinh, dom.svgElements.lines.secCosh, dom.svgElements.points.hyperbola, dom.svgElements.points.tangent, dom.svgElements.areaHyperbolic, dom.svgElements.unitHyperbola, dom.svgElements.labels.secCosh, dom.svgElements.labels.tanSinh];\n                fadeTargets.forEach(el => el.style.setProperty('opacity', el.classList.contains('hyperbolic-element') || el.classList.contains('circular-element') ? el.style.opacity : asymptoteFadeFactor));\n                \n                // Update SVG element positions\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: 0, y1: 0, x2: points.P_cos_axis.x, y2: 0 });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: 0, x2: points.P_circle.x, y2: points.P_circle.y });\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: 0, y1: 0, x2: points.P_sec_axis.x, y2: 0 });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p)) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = theta >= 0 ? 1 : -1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n                const isNearHorizontal = Math.abs(sin_t) < 0.3;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * (isNearVertical ? 0.20 : 0.15) });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * (isNearVertical ? 0.2 : 0.12), y: points.P_circle.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'},\n                    {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.add(item.class);\n                    item.el.addEventListener('animationend', () => item.el.classList.remove(item.class), {once: true});\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value); // Update hash when pausing\n                }\n            }\n            \n            // Focus Mode\n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', isActive);\n                });\n            }\n\n            // SVG Dragging\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                updateURLHash(dom.slider.value); // Final update on drag end\n            }\n\n            // Highlighting\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('line, path, circle') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight() {\n                document.querySelectorAll('.is-highlighted-svg, .is-highlighted-data').forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            // URL Hash Management\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                const hash = window.location.hash;\n                if (hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(hash.substring(7));\n                    if (!isNaN(angleFromHash)) {\n                        return angleFromHash;\n                    }\n                }\n                return parseFloat(dom.slider.value); // Return default if hash is invalid\n            }\n\n            // --- INITIAL SETUP ---\n            function setup() {\n                // Draw grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    ['x1', 'x2', 'y1', 'y2', 'class'].forEach(attr => {\n                        const vLine = document.createElementNS(svgNS, 'line');\n                        setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                        dom.svgElements.grid.appendChild(vLine);\n                        const hLine = document.createElementNS(svgNS, 'line');\n                        setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                        dom.svgElements.grid.appendChild(hLine);\n                    });\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                // Add Event Listeners\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value)); // For keyboard users\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('change', e => {\n                    // Clamp value on blur/enter\n                    const clampedValue = clamp(parseFloat(e.target.value) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                    updateAll(clampedValue, 'user');\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    if(e.target.tagName === 'BUTTON') applyFocusMode(e.target.dataset.mode);\n                });\n                \n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                // Initial render from URL hash or default\n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle); // Ensure hash is canonical on load\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d; /* AA Compliant Contrast */\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging {\n            cursor: grabbing;\n        }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n        }\n        #angle-input:focus {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            width: 100%; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04;\n            stroke-linejoin: round; pointer-events: none;\n        }\n        .svg-label { font-size: 0.15; }\n        .svg-axis-label { font-size: 0.12; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        @keyframes pulse-highlight { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the slider to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola\"></path>\n                        <circle class=\"svg-unit-circle\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\">\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector (in blue/green) is <code>Î¸/2</code>, and the area of the hyperbolic sector (in yellow/orange) is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- CORE MATHEMATICAL CONTEXT ---\n            // This script visualizes the relationship between circular and hyperbolic trigonometry\n            // via the Gudermannian function, where `p = gd(Î¸)`.\n            // Key identities shown:\n            // sec(Î¸) = cosh(p)\n            // tan(Î¸) = sinh(p)\n            // The area of the circular sector is Î¸/2, and the hyperbolic sector area is p/2.\n\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let wasPlayingBeforeDrag = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'),\n                    tan: document.getElementById('val-tan'), cos: document.getElementById('val-cos'),\n                    sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'),\n                    areaCircular: document.getElementById('val-area-circular'),\n                    areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'),\n                    areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: {\n                        cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'),\n                    },\n                    points: {\n                        circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'),\n                        hyperbola: document.getElementById('svg-point-hyperbola'),\n                    },\n                    labels: {\n                        theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'),\n                        sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'),\n                        secCosh: document.getElementById('svg-label-sec-cosh'),\n                    }\n                }\n            };\n\n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || isNaN(num)) ? '---' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees) {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = theta >= 0 ? 1 : -1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n                const isNearHorizontal = Math.abs(sin_t) < 0.3;\n\n                // Theta Label\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                // Cos Label\n                const cosLabelYOffset = isNearVertical ? ySign * 0.20 : ySign * 0.15;\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosLabelYOffset });\n                \n                // Sin Label\n                const sinLabelXOffset = isNearVertical ? Math.sign(cos_t || 1) * 0.2 : Math.sign(cos_t || 1) * 0.12;\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinLabelXOffset, y: points.P_circle.y / 2 });\n                dom.svgElements.labels.sin.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Tan/Sinh Label\n                const tanSinhLabelXOffset = isNearHorizontal ? 0.35 : 0.12;\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? tanSinhLabelXOffset : -tanSinhLabelXOffset), y: points.P_hyperbola.y / 2 });\n                dom.svgElements.labels.tanSinh.setAttribute('text-anchor', cos_t > 0 ? 'start' : 'end');\n\n                // Sec/Cosh Label\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function updateVisualization(angleDegrees) {\n                const isAtAsymptote = Math.abs(angleDegrees) >= ASYMPTOTE_THRESHOLD;\n                const theta = angleDegrees * DEG_TO_RAD;\n                \n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                // Update Data Panel\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = isFinite(p) ? format(p) : 'â';\n                dom.data.sec.textContent = isFinite(sec_t) ? format(sec_t) : 'â';\n                dom.data.tan.textContent = isFinite(tan_t) ? format(tan_t) : 'â';\n                dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t);\n                dom.data.cosh.textContent = isFinite(cosh_p) ? format(cosh_p) : 'â';\n                dom.data.sinh.textContent = isFinite(sinh_p) ? format(sinh_p) : 'â';\n                dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = isFinite(p) ? format(Math.abs(p / 2)) : 'â';\n                \n                // Define key points (Y inverted for SVG coord system)\n                const points = {\n                    P_circle: { x: cos_t, y: -sin_t },\n                    P_cos_axis: { x: cos_t, y: 0 },\n                    P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t },\n                    P_sec_axis: { x: sec_t, y: 0 },\n                    cos_t: cos_t, sin_t: sin_t\n                };\n\n                // Update SVG elements' visibility and position\n                const lineOpacity = isAtAsymptote ? 0 : 1;\n                dom.svgElements.lines.tanSinh.style.opacity = lineOpacity;\n                dom.svgElements.lines.secCosh.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.radial.style.opacity = lineOpacity;\n                dom.svgElements.guidelines.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.hyperbola.style.opacity = lineOpacity;\n                dom.svgElements.points.tangent.style.opacity = lineOpacity;\n                dom.svgElements.areaHyperbolic.style.opacity = isAtAsymptote ? 0 : 0.2;\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: 0, y1: 0, x2: points.P_cos_axis.x, y2: 0 });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: 0, x2: points.P_circle.x, y2: points.P_circle.y });\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: 0, y1: 0, x2: points.P_sec_axis.x, y2: 0 });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: 0, y1: 0, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_tan_tip.x, y1: points.P_tan_tip.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                }\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p)) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else if (animationFrameId) {\n                    cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                }\n            }\n\n            // SVG Dragging\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y }; // Invert Y for standard math coordinates\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                isDragging = true;\n                wasPlayingBeforeDrag = isPlaying;\n                if (isPlaying) togglePlay(false);\n\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG);\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                if(wasPlayingBeforeDrag) {\n                   // togglePlay(true); // Decided against auto-resume for predictability\n                   wasPlayingBeforeDrag = false;\n                }\n            }\n\n            // Highlighting\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('line, path, circle') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight() {\n                document.querySelectorAll('.is-highlighted-svg, .is-highlighted-data').forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            // --- INITIAL SETUP ---\n            function setup() {\n                // Draw grid\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n\n                // Draw static hyperbola path (extended range)\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    const x = Math.cosh(p); const y = Math.sinh(p);\n                    pathData += `${i === steps ? 'M' : 'L'} ${x} ${-y} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                // Add Event Listeners\n                dom.slider.addEventListener('input', e => updateAll(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value));\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                \n                // Drag Listeners (Mouse & Touch)\n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                \n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                // Highlight Listeners (using event delegation)\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n\n                // Initial render\n                updateAll(dom.slider.value);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement URL hash-based state management to make the visualization shareable and bookmarkable. The current angle `Î¸` should be synchronized with the URL hash (e.g., `.../index.html#theta=45`), and the application should read this hash on initial load to set the state. Concurrently, enhance the user experience at the asymptotes by replacing the abrupt disappearance of SVG elements at +/-89.9 degrees with a smooth, progressive fade-out effect that begins as the angle approaches this limit (e.g., from 88 degrees onward), providing more graceful and intuitive visual feedback.; Introduce a 'Focus Mode' via toggle controls in the sidebar to enhance pedagogical clarity. The user should be able to cycle through three distinct views: 1) 'Circular Only' (hiding the hyperbola, its sector, and related lines/labels), 2) 'Hyperbolic Only' (hiding the circle and its components), and 3) the default 'Connected View'. To make the core relationship more dynamic, supplement the existing hover-highlight with a brief, synchronized pulse animation on the paired lines (`sec(Î¸)`/`cosh(p)` and `tan(Î¸)`/`sinh(p)`) that triggers automatically for a moment whenever the angle changes, actively demonstrating their equality.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color 0.2s, outline-color 0.2s;\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color 0.2s ease, color 0.2s ease;\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity 0.3s ease; }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; transition: opacity 0.3s ease; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; transition: opacity 0.3s ease; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity 0.3s ease-out; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease, opacity 0.3s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        /* Highlighting and Pulse Animations */\n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg {\n            0% { stroke-width: 0.03; }\n            50% { stroke-width: 0.08; }\n            100% { stroke-width: 0.03; }\n        }\n        @keyframes pulse-dynamic-data {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n        }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        /* Focus Mode Styles */\n        /* !important is necessary to override inline style 'opacity' set by JavaScript\n           for the asymptote fade effect, ensuring focus mode visibility rules take precedence. */\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; \n            pointer-events: none; \n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'), },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola'),},\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'),\n                        tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                triggerPulse();\n\n                if (source === 'user') {\n                    updateURLHash(angleDegrees);\n                }\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                \n                const asymptoteFadeFactor = (angleAbs < FADE_START_ANGLE) ? 1 : 1 - (angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE);\n                \n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }, cos_t, sin_t };\n\n                const fadeTargets = [dom.svgElements.lines.tanSinh, dom.svgElements.lines.secCosh, dom.svgElements.points.hyperbola, dom.svgElements.points.tangent, dom.svgElements.areaHyperbolic, dom.svgElements.unitHyperbola, dom.svgElements.labels.secCosh, dom.svgElements.labels.tanSinh];\n                fadeTargets.forEach(el => el.style.opacity = asymptoteFadeFactor);\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * (isNearVertical ? 0.20 : 0.15) });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * (isNearVertical ? 0.2 : 0.12), y: points.P_circle.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'},\n                    {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow to restart animation\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', isActive);\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                updateURLHash(dom.slider.value);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return parseFloat(dom.slider.value);\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('change', e => {\n                    const parsedValue = parseFloat(e.target.value);\n                    if (isNaN(parsedValue)) {\n                        e.target.value = dom.slider.value;\n                        return;\n                    }\n                    updateAll(clamp(parsedValue, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD), 'user');\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Implement an explicit 'Geometric Projection' animation to visually connect the circle and hyperbola. Currently, the values match, but the geometric transformation is not shown. Add a new toggleable overlay or animation sequence that, when activated, draws animated projection lines: 1. A horizontal line from the point on the circle (cosÎ¸, sinÎ¸) to the Y-axis. 2. A radial line from the origin to a point on the hyperbola at a height of y=sinh(p) (where p=asinh(sinÎ¸)). This makes the Gudermannian mapping tangible, directly elevating the core pedagogical value from showing a correlation to demonstrating a causal geometric link.",
            "Overhaul the interactivity and labeling for professional-grade usability and accessibility. First, make the SVG canvas keyboard-accessible by adding `tabindex='0'` and enabling angle control via arrow keys (e.g., Left/Right for fine control, Shift+Left/Right for larger steps). Second, implement a smarter, collision-aware labeling system that dynamically repositions SVG text labels (like 'cos', 'sin', 'sec=cosh') to prevent them from overlapping each other or key parts of the diagram at extreme angles. Finally, expand the existing hover/focus highlighting system to include the sector areas; hovering over the 'Î¸/2' data value should highlight the circular sector in the SVG, and hovering 'p/2' should highlight the hyperbolic sector, completing the data-to-visualization feedback loop."
          ]
        },
        {
          "iterationNumber": 4,
          "title": "Refine 4: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: '';\n            position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked {\n            background-color: var(--primary-color);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after {\n            transform: translateX(22px);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        \n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color var(--transition-fast);\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative;\n            padding-left: 1.5rem;\n            transition: color var(--transition-fast);\n            list-style: none; /* Remove default marker */\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº';\n            position: absolute;\n            left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg);\n            font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; opacity: var(--asymptote-opacity, 0.5); transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: var(--asymptote-opacity, 0.2); transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-dynamic-line.circular-element, .svg-dynamic-line.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal); }\n        .svg-point.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono); fill: var(--text-color);\n            paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast);\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-tan-sinh { fill: var(--green-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        .svg-projection-line {\n            stroke: var(--accent-color); stroke-width: 0.03;\n            stroke-dasharray: 0; stroke-dashoffset: 0;\n            transition: stroke-dashoffset 0.5s ease-in-out, opacity var(--transition-normal);\n            opacity: 0; pointer-events: none;\n        }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg {\n            stroke-width: initial;\n            opacity: 0.45;\n        }\n        \n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; /* Use !important to override inline style from JS */\n            pointer-events: none;\n            transition: opacity var(--transition-normal);\n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        \n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Show Geometric Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is the result of the inverse Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    dynamicParent: document.getElementById('svg-dynamic-elements'),\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source !== 'initial') triggerPulse();\n                if (source === 'user' && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const asymptoteFadeFactor = clamp((1 - (Math.max(0, angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE))), 0, 1);\n                dom.svgElements.dynamicParent.style.setProperty('--asymptote-opacity', asymptoteFadeFactor);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60; // Polyline approximation of the hyperbolic sector\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionLines(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.4;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                const cosYOffset = isNearVertical ? (ySign * 0.22) : (ySign * 0.15) - (isNearHorizontal ? ySign * 0.05 : 0);\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosYOffset });\n                \n                const sinXOffset = Math.sign(cos_t || 1) * (isNearVertical ? 0.3 : 0.12);\n                const sinAnchor = (isNearVertical && cos_t < 0) || cos_t < -0.9 ? 'end' : 'start';\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinXOffset, y: points.P_circle.y / 2, 'text-anchor': sinAnchor });\n                \n                const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n\n                const tanSinhXOffset = (cos_t > 0 ? 0.12 : -0.12);\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + tanSinhXOffset, y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n\n                dom.svgElements.labels.secCosh.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * -0.1}px)` : 'none';\n                dom.svgElements.labels.cos.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * 0.1}px)` : 'none';\n            }\n            \n            function updateProjectionLines(points) {\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x, P_tan_tip.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength });\n\n                if (!radial.classList.contains('visible')) {\n                    radial.style.strokeDashoffset = radialLength;\n                }\n                if (!horizontal.classList.contains('visible')) {\n                    horizontal.style.strokeDashoffset = horizontalLength;\n                }\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.removeProperty('fill');\n                updateURLHash(dom.slider.value);\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                \n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('input', e => {\n                    const value = parseFloat(e.target.value);\n                    const min = parseFloat(e.target.min);\n                    const max = parseFloat(e.target.max);\n                    if (value > max || value < min) {\n                         e.target.value = clamp(value, min, max);\n                    }\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n                    if (!acceptedKeys.includes(e.key)) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    const step = e.shiftKey ? 5.0 : 0.5;\n                    const direction = (e.key === 'ArrowRight' || e.key === 'ArrowUp') ? 1 : -1;\n                    updateAll(parseFloat(dom.slider.value) + (step * direction), 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    const { radial, horizontal } = dom.svgElements.projections;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    \n                    if (isChecked) {\n                        updateAll(dom.slider.value); // Recalculate positions\n                        requestAnimationFrame(() => {\n                           [radial, horizontal].forEach(el => el.classList.add('visible'));\n                           radial.style.strokeDashoffset = '0';\n                           horizontal.style.strokeDashoffset = '0';\n                        });\n                    } else {\n                        [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                        updateAll(dom.slider.value); // Reset dash offsets\n                    }\n                });\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color 0.2s, outline-color 0.2s;\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color 0.2s ease, color 0.2s ease;\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity 0.3s ease; }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; opacity: var(--asymptote-opacity, 0.5); transition: opacity 0.3s ease; }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity 0.3s ease-out; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: var(--asymptote-opacity, 0.2); transition: opacity 0.3s ease; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-dynamic-line.circular-element, .svg-dynamic-line.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease, opacity 0.3s ease; }\n        .svg-point.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono); fill: var(--text-color);\n            paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none; transition: opacity 0.3s ease, transform 0.2s ease;\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-tan-sinh { fill: var(--green-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        .svg-projection-line {\n            stroke: var(--accent-color); stroke-width: 0.03;\n            stroke-dasharray: 0; stroke-dashoffset: 0;\n            transition: stroke-dashoffset 0.5s ease-in-out, opacity 0.3s;\n            opacity: 0; pointer-events: none;\n        }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg {\n            stroke-width: initial; /* Reset stroke animation for filled areas */\n            opacity: 0.45; /* Use opacity for highlight instead */\n        }\n        \n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        /* Focus Mode Styles - No !important needed after refactor */\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0;\n            pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        \n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                               <label for=\"projection-toggle\">Show Geometric Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    dynamicParent: document.getElementById('svg-dynamic-elements'),\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source !== 'initial') triggerPulse();\n\n                if (source === 'user' && !isPlaying) {\n                    updateURLHash(angleDegrees);\n                }\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                \n                const asymptoteFadeFactor = clamp((1 - (Math.max(0, angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE))), 0, 1);\n                dom.svgElements.dynamicParent.style.setProperty('--asymptote-opacity', asymptoteFadeFactor);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionLines(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.4;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                // Theta Label\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                // Cos Label\n                const cosYOffset = isNearVertical ? (ySign * 0.22) : (ySign * 0.15) - (isNearHorizontal ? ySign * 0.05 : 0);\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosYOffset });\n                \n                // Sin Label\n                const sinXOffset = Math.sign(cos_t || 1) * (isNearVertical ? 0.3 : 0.12);\n                const sinAnchor = (isNearVertical && cos_t < 0) || cos_t < -0.9 ? 'end' : 'start';\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinXOffset, y: points.P_circle.y / 2, 'text-anchor': sinAnchor });\n                \n                // Sec=Cosh Label\n                const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n\n                // Tan=Sinh Label\n                const tanSinhXOffset = (cos_t > 0 ? 0.12 : -0.12);\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + tanSinhXOffset, y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n\n                // Collision mitigation between sec and cos labels near 0 degrees\n                if(isNearHorizontal && Math.abs(cos_t) > 0.95) {\n                    dom.svgElements.labels.secCosh.style.transform = `translateY(${ySign * -0.1}px)`;\n                    dom.svgElements.labels.cos.style.transform = `translateY(${ySign * 0.1}px)`;\n                } else {\n                    dom.svgElements.labels.secCosh.style.transform = 'none';\n                    dom.svgElements.labels.cos.style.transform = 'none';\n                }\n            }\n            \n            function updateProjectionLines(points) {\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                // Radial line from origin to tangent line\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                setAttr(dom.svgElements.projections.radial, { d: radialPath });\n                const radialLength = Math.hypot(P_tan_tip.x, P_tan_tip.y);\n                \n                // Horizontal line from tangent line to hyperbola\n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                setAttr(dom.svgElements.projections.horizontal, { d: horizontalPath });\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n\n                if (dom.projectionToggle.checked) {\n                    const radial = dom.svgElements.projections.radial;\n                    const horizontal = dom.svgElements.projections.horizontal;\n                    radial.style.strokeDasharray = radialLength;\n                    radial.style.strokeDashoffset = radial.classList.contains('visible') ? 0 : radialLength;\n                    horizontal.style.strokeDasharray = horizontalLength;\n                    horizontal.style.strokeDashoffset = horizontal.classList.contains('visible') ? 0 : horizontalLength;\n                }\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal && animationDirection === 1) animationDirection = -1;\n                if (currentVal <= minVal && animationDirection === -1) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', isActive);\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                handleDragMove(e);\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.removeProperty('fill');\n                updateURLHash(dom.slider.value);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                \n                const handleAngleInputChange = e => {\n                    const parsedValue = parseFloat(e.target.value);\n                    const currentValue = parseFloat(dom.slider.value);\n                    if (isNaN(parsedValue)) {\n                        e.target.value = currentValue.toFixed(1);\n                        return;\n                    }\n                    updateAll(parsedValue, 'user');\n                };\n                dom.angleInput.addEventListener('change', handleAngleInputChange);\n                dom.angleInput.addEventListener('blur', handleAngleInputChange);\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n                    if (!acceptedKeys.includes(e.key)) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n\n                    const fineStep = 0.5;\n                    const coarseStep = 5.0;\n                    const step = e.shiftKey ? coarseStep : fineStep;\n                    \n                    let direction = (e.key === 'ArrowRight' || e.key === 'ArrowUp') ? 1 : -1;\n                    const currentAngle = parseFloat(dom.slider.value);\n                    updateAll(currentAngle + (step * direction), 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    const { radial, horizontal } = dom.svgElements.projections;\n                    e.target.setAttribute('aria-checked', isChecked);\n                    [radial, horizontal].forEach(el => el.classList.toggle('visible', isChecked));\n                    updateAll(dom.slider.value); // Recalculate positions and dasharrays\n                    // Animate in\n                    if(isChecked) {\n                        setTimeout(() => {\n                           radial.style.strokeDashoffset = 0;\n                           horizontal.style.strokeDashoffset = 0;\n                        }, 10);\n                    }\n                });\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color 0.2s, outline-color 0.2s;\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button {\n            -webkit-appearance: none;\n            margin: 0;\n        }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background 0.2s ease-in-out;\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color 0.2s ease, transform 0.1s ease;\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color 0.2s ease, color 0.2s ease;\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n\n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity 0.3s ease; }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color 0.2s ease;\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600; list-style-position: inside;\n            color: var(--secondary-color); font-size: 1.25rem;\n        }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n\n        /* SVG Styles */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle { stroke: var(--primary-color); stroke-width: 0.03; fill: none; opacity: 0.5; transition: opacity 0.3s ease; }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-width: 0.03; fill: none; stroke-dasharray: 0.1, 0.1; opacity: 0.5; transition: opacity 0.3s ease; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity 0.3s ease-out; }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity 0.3s ease; }\n        \n        .svg-dynamic-line { transition: opacity 0.2s ease-out; }\n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill 0.2s ease, opacity 0.3s ease; }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono);\n            fill: var(--text-color); paint-order: stroke;\n            stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none;\n            transition: opacity 0.3s ease;\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); }\n        .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        /* Highlighting and Pulse Animations */\n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg {\n            0% { stroke-width: 0.03; }\n            50% { stroke-width: 0.08; }\n            100% { stroke-width: 0.03; }\n        }\n        @keyframes pulse-dynamic-data {\n            0%, 100% { transform: scale(1); }\n            50% { transform: scale(1.05); }\n        }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        /* Focus Mode Styles */\n        /* !important is necessary to override inline style 'opacity' set by JavaScript\n           for the asymptote fade effect, ensuring focus mode visibility rules take precedence. */\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; \n            pointer-events: none; \n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (max-width: 1024px) {\n            .layout-grid { grid-template-columns: 1fr; }\n        }\n        \n        @media (min-width: 768px) {\n             .data-panel .data-grid {\n                grid-template-columns: 1fr 1fr;\n                gap: 1.25rem 2rem;\n            }\n        }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text>\n                            <text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code> is the result of the Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. This geometric relationship underscores their connection.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyper hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    guidelines: {\n                        radial: document.getElementById('svg-guideline-radial'),\n                        tan: document.getElementById('svg-guideline-tan'),\n                        hyperbola: document.getElementById('svg-guideline-hyperbola'),\n                    },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'),\n                        tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh'), },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola'),},\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'),\n                        tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                triggerPulse();\n\n                if (source === 'user') {\n                    updateURLHash(angleDegrees);\n                }\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                \n                const asymptoteFadeFactor = (angleAbs < FADE_START_ANGLE) ? 1 : 1 - (angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE);\n                \n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, P_tan_tip: { x: 1, y: -tan_t },\n                    P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }, cos_t, sin_t };\n\n                const fadeTargets = [dom.svgElements.lines.tanSinh, dom.svgElements.lines.secCosh, dom.svgElements.points.hyperbola, dom.svgElements.points.tangent, dom.svgElements.areaHyperbolic, dom.svgElements.unitHyperbola, dom.svgElements.labels.secCosh, dom.svgElements.labels.tanSinh];\n                fadeTargets.forEach(el => el.style.opacity = asymptoteFadeFactor);\n                \n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, points);\n            }\n            \n            function updateLabelPositions(theta, points) {\n                const { cos_t, sin_t } = points;\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.5;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * (isNearVertical ? 0.20 : 0.15) });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * (isNearVertical ? 0.2 : 0.12), y: points.P_circle.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: -0.15 });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'},\n                    {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow to restart animation\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n\n                if (currentVal >= maxVal) animationDirection = -1;\n                if (currentVal <= minVal) animationDirection = 1;\n                \n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', isActive);\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleDragStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleDragEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.fill = '';\n                updateURLHash(dom.slider.value);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return parseFloat(dom.slider.value);\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('change', e => {\n                    const parsedValue = parseFloat(e.target.value);\n                    if (isNaN(parsedValue)) {\n                        e.target.value = dom.slider.value;\n                        return;\n                    }\n                    updateAll(clamp(parsedValue, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD), 'user');\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleDragStart);\n                window.addEventListener('mousemove', handleDragMove);\n                window.addEventListener('mouseup', handleDragEnd);\n                dom.svg.addEventListener('touchstart', handleDragStart, { passive: false });\n                window.addEventListener('touchmove', handleDragMove, { passive: false });\n                window.addEventListener('touchend', handleDragEnd);\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Implement an explicit 'Geometric Projection' animation to visually connect the circle and hyperbola. Currently, the values match, but the geometric transformation is not shown. Add a new toggleable overlay or animation sequence that, when activated, draws animated projection lines: 1. A horizontal line from the point on the circle (cosÎ¸, sinÎ¸) to the Y-axis. 2. A radial line from the origin to a point on the hyperbola at a height of y=sinh(p) (where p=asinh(sinÎ¸)). This makes the Gudermannian mapping tangible, directly elevating the core pedagogical value from showing a correlation to demonstrating a causal geometric link.; Overhaul the interactivity and labeling for professional-grade usability and accessibility. First, make the SVG canvas keyboard-accessible by adding `tabindex='0'` and enabling angle control via arrow keys (e.g., Left/Right for fine control, Shift+Left/Right for larger steps). Second, implement a smarter, collision-aware labeling system that dynamically repositions SVG text labels (like 'cos', 'sin', 'sec=cosh') to prevent them from overlapping each other or key parts of the diagram at extreme angles. Finally, expand the existing hover/focus highlighting system to include the sector areas; hovering over the 'Î¸/2' data value should highlight the circular sector in the SVG, and hovering 'p/2' should highlight the hyperbolic sector, completing the data-to-visualization feedback loop.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: '';\n            position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked {\n            background-color: var(--primary-color);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after {\n            transform: translateX(22px);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        \n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color var(--transition-fast);\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative;\n            padding-left: 1.5rem;\n            transition: color var(--transition-fast);\n            list-style: none; /* Remove default marker */\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº';\n            position: absolute;\n            left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg);\n            font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; opacity: var(--asymptote-opacity, 0.5); transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: var(--asymptote-opacity, 0.2); transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-dynamic-line.circular-element, .svg-dynamic-line.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal); }\n        .svg-point.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono); fill: var(--text-color);\n            paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast);\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-tan-sinh { fill: var(--green-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        .svg-projection-line {\n            stroke: var(--accent-color); stroke-width: 0.03;\n            stroke-dasharray: 0; stroke-dashoffset: 0;\n            transition: stroke-dashoffset 0.5s ease-in-out, opacity var(--transition-normal);\n            opacity: 0; pointer-events: none;\n        }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg {\n            stroke-width: initial;\n            opacity: 0.45;\n        }\n        \n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; /* Use !important to override inline style from JS */\n            pointer-events: none;\n            transition: opacity var(--transition-normal);\n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        \n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Show Geometric Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is the result of the inverse Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    dynamicParent: document.getElementById('svg-dynamic-elements'),\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source !== 'initial') triggerPulse();\n                if (source === 'user' && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const asymptoteFadeFactor = clamp((1 - (Math.max(0, angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE))), 0, 1);\n                dom.svgElements.dynamicParent.style.setProperty('--asymptote-opacity', asymptoteFadeFactor);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60; // Polyline approximation of the hyperbolic sector\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionLines(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.4;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                const cosYOffset = isNearVertical ? (ySign * 0.22) : (ySign * 0.15) - (isNearHorizontal ? ySign * 0.05 : 0);\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosYOffset });\n                \n                const sinXOffset = Math.sign(cos_t || 1) * (isNearVertical ? 0.3 : 0.12);\n                const sinAnchor = (isNearVertical && cos_t < 0) || cos_t < -0.9 ? 'end' : 'start';\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinXOffset, y: points.P_circle.y / 2, 'text-anchor': sinAnchor });\n                \n                const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n\n                const tanSinhXOffset = (cos_t > 0 ? 0.12 : -0.12);\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + tanSinhXOffset, y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n\n                dom.svgElements.labels.secCosh.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * -0.1}px)` : 'none';\n                dom.svgElements.labels.cos.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * 0.1}px)` : 'none';\n            }\n            \n            function updateProjectionLines(points) {\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x, P_tan_tip.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength });\n\n                if (!radial.classList.contains('visible')) {\n                    radial.style.strokeDashoffset = radialLength;\n                }\n                if (!horizontal.classList.contains('visible')) {\n                    horizontal.style.strokeDashoffset = horizontalLength;\n                }\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.removeProperty('fill');\n                updateURLHash(dom.slider.value);\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                \n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('input', e => {\n                    const value = parseFloat(e.target.value);\n                    const min = parseFloat(e.target.min);\n                    const max = parseFloat(e.target.max);\n                    if (value > max || value < min) {\n                         e.target.value = clamp(value, min, max);\n                    }\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n                    if (!acceptedKeys.includes(e.key)) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    const step = e.shiftKey ? 5.0 : 0.5;\n                    const direction = (e.key === 'ArrowRight' || e.key === 'ArrowUp') ? 1 : -1;\n                    updateAll(parseFloat(dom.slider.value) + (step * direction), 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    const { radial, horizontal } = dom.svgElements.projections;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    \n                    if (isChecked) {\n                        updateAll(dom.slider.value); // Recalculate positions\n                        requestAnimationFrame(() => {\n                           [radial, horizontal].forEach(el => el.classList.add('visible'));\n                           radial.style.strokeDashoffset = '0';\n                           horizontal.style.strokeDashoffset = '0';\n                        });\n                    } else {\n                        [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                        updateAll(dom.slider.value); // Reset dash offsets\n                    }\n                });\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Refactor the 'Show Geometric Projection' feature into a guided, multi-step animation to vastly improve its educational value. When toggled ON, instead of merely showing two static lines, initiate a clear, narrated sequence: 1. Animate the radial line extending from the origin through the circle point to the tangent line at x=1. 2. Explicitly highlight the `sec(Î¸)` length on the x-axis and the `tan(Î¸)` length on the tangent line with animated pulses and temporary labels. 3. Create a distinct 'transfer' animation (e.g., a glowing path or animated point) that moves from the tangent point `(1, tanÎ¸)` to the final hyperbola point `(secÎ¸, tanÎ¸)`, visually confirming that the point on the hyperbola is defined by the `secant` and `tangent` of the circular angle Î¸. This elevates the feature from a simple toggle to a core teaching moment.",
            "Introduce a new, high-value 'Inverse Interaction Mode' by making the point on the hyperbola draggable. When this mode is active, the user will control the hyperbolic parameter `p` by dragging the point `(cosh p, sinh p)`. The entire visualization will update in reverse: the JavaScript will calculate the circular angle `Î¸` using the inverse Gudermannian function (Î¸ = gd(p)), and the point on the unit circle will move to its corresponding position. This creates a fully bidirectional exploration of the relationship, allowing users to build intuition from both the circular and hyperbolic perspectives and solidifying their understanding of the one-to-one mapping."
          ]
        },
        {
          "iterationNumber": 5,
          "title": "Refine 5: Stabilize, Implement, Fix & Suggest",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptFeatures_Suggest": "Original Website Idea: \"Interactive unit circle, showing trigonometric lengths, connection with hyperbolic trigonometric lengths,\nShowing a CONNECTED Animation like how secx = cosh(p)\n\nwhere p = ln(secx+tanx)\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the bidirectional relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n            --transition-slow: 0.6s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n            min-height: 2.7rem; /* Prevent layout shift on text change */\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n            transition: color var(--transition-fast);\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        input[type=\"number\"], input[type=\"range\"], button {\n            transition: opacity var(--transition-fast), visibility var(--transition-fast), background-color var(--transition-fast), color var(--transition-fast);\n        }\n        .control-item.is-disabled { opacity: 0.6; }\n        .control-item.is-disabled label { color: var(--text-muted-color); }\n        .control-item.is-disabled input, .control-item.is-disabled button { pointer-events: none; }\n        \n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible { outline: 2px solid var(--accent-color); border-color: var(--accent-color); }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        #angle-input:disabled { background-color: var(--border-color); cursor: not-allowed; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]:disabled { cursor: not-allowed; }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover:not(:disabled)::-webkit-slider-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover:not(:disabled)::-moz-range-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb { background: var(--text-muted-color); }\n        input[type=\"range\"]:disabled::-moz-range-thumb { background: var(--text-muted-color); }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover:not(:disabled) { background-color: var(--accent-color); }\n        .play-pause-btn:active:not(:disabled) { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        .play-pause-btn:disabled { background-color: var(--border-color); color: var(--text-muted-color); cursor: not-allowed; opacity: 0.6; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active { background-color: var(--primary-color); color: var(--bg-color); font-weight: 700; }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: ''; position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked { background-color: var(--primary-color); }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after { transform: translateX(22px); }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        input[type=\"checkbox\"][role=\"switch\"]:disabled { background-color: var(--border-color); cursor: not-allowed; opacity: 0.6; }\n        \n        .data-panel .data-grid { display: grid; grid-template-columns: 1fr; gap: 1.25rem; margin-top: 1.25rem; }\n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 { font-size: 1rem; font-weight: 600; color: var(--text-color); margin-bottom: 0.5rem; }\n        .data-list { display: grid; grid-template-columns: auto 1fr; gap: 0.5rem 1rem; font-family: var(--font-mono); font-size: 0.95rem; }\n        .data-list dt, .data-list dd { padding: 0.2rem 0.4rem; border-radius: 4px; transition: background-color var(--transition-fast); }\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); } .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); } .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); } .dd-area-circ { color: var(--primary-color); } .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight { font-weight: 700; background-color: color-mix(in srgb, var(--red-color) 20%, transparent); padding: 0.1rem 0.4rem; border-radius: 4px; }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative; padding-left: 1.5rem;\n            transition: color var(--transition-fast); list-style: none;\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº'; position: absolute; left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg); font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover, .explanation-panel summary:focus-visible { color: var(--accent-color); }\n        .explanation-panel summary:focus-visible { outline: none; }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code { font-family: var(--font-mono); font-size: 0.9em; background-color: var(--bg-color); padding: 0.2rem 0.4rem; border-radius: 4px; color: var(--accent-color); }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n        .is-near-asymptote .svg-unit-hyperbola, .is-near-asymptote .hyperbolic-element { opacity: 0.2; }\n        .is-near-asymptote .svg-label-sec-cosh, .is-near-asymptote .svg-label-tan-sinh { opacity: 0.2; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-point { stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal), r var(--transition-fast), cursor var(--transition-fast); }\n        #svg-point-circle { fill: var(--primary-color); cursor: grab; }\n        #svg-point-hyperbola { fill: var(--secondary-color); cursor: default; }\n        \n        .inverse-interaction-mode #svg-point-circle { cursor: default; }\n        .inverse-interaction-mode #svg-point-hyperbola { cursor: grab; }\n        #svg-point-circle:active, .inverse-interaction-mode #svg-point-hyperbola:active { cursor: grabbing; fill: var(--accent-color); r: 0.08; }\n        \n        .svg-label, .svg-axis-label { font-family: var(--font-mono); fill: var(--text-color); paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em; stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast), fill var(--transition-fast); }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); } .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); } .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n        \n        .svg-projection-line { stroke: var(--accent-color); stroke-width: 0.03; stroke-dasharray: 0; stroke-dashoffset: 0; opacity: 0; pointer-events: none; transition: stroke-dashoffset var(--transition-slow), opacity var(--transition-fast); }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        .svg-projection-anim-label { font-size: 0.13px; opacity: 0; transition: opacity 0.2s ease-in-out; pointer-events: none; }\n        .svg-projection-anim-label.visible { opacity: 1; }\n\n        @keyframes pulse-once-highlight { 50% { stroke-width: 0.08; fill: var(--accent-color); } }\n        .pulse-once-anim { animation: pulse-once-highlight 0.5s ease-out; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg { stroke-width: initial; opacity: 0.45; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { opacity: 0; pointer-events: none; transition: opacity var(--transition-normal); }\n        \n        footer { text-align: center; padding: 1.5rem; margin-top: 2rem; border-top: 1px solid var(--border-color); color: var(--text-muted-color); font-size: 0.9rem; }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag a point or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle corresponds to a parameter p on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The relationship can be explored by dragging either the circle point or the hyperbola point.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n\n                            <text id=\"svg-label-proj-sec\" class=\"svg-label svg-projection-anim-label svg-label-sec-cosh\" text-anchor=\"middle\">sec(Î¸)</text>\n                            <text id=\"svg-label-proj-tan\" class=\"svg-label svg-projection-anim-label svg-label-tan-sinh\" text-anchor=\"start\">tan(Î¸)</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\" id=\"angle-control-group\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                             <div class=\"control-item toggle-switch\">\n                               <label for=\"interaction-mode-toggle\" id=\"interaction-mode-label\">Control from Hyperbola</label>\n                               <input type=\"checkbox\" id=\"interaction-mode-toggle\" role=\"switch\" aria-labelledby=\"interaction-mode-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Guided Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-labelledby=\"projection-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play angle animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is related to <code>Î¸</code> by <code>Î¸ = gd(p)</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let isInverseMode = false;\n            let isProjectionAnimating = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                angleControlGroup: document.getElementById('angle-control-group'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                interactionModeToggle: document.getElementById('interaction-mode-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                vizCaption: document.getElementById('viz-caption'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), projSec: document.getElementById('svg-label-proj-sec'), projTan: document.getElementById('svg-label-proj-tan') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source === 'user' || source === 'drag') triggerPulse();\n                if ((source === 'user' || source === 'drag-end') && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                dom.svg.classList.toggle('is-near-asymptote', angleAbs > FADE_START_ANGLE);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n                dom.svg.dataset.currentPoints = JSON.stringify(points);\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionPaths(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * 0.15 });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * 0.12, y: points.P_circle.y / 2, 'text-anchor': cos_t < 0 ? 'end' : 'start'});\n                \n                if (isFinite(points.P_sec_axis.x)) {\n                    const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                    setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n                    setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end'});\n                    setAttr(dom.svgElements.labels.projSec, { x: points.P_sec_axis.x / 2, y: secCoshYOffset - 0.15 });\n                    setAttr(dom.svgElements.labels.projTan, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.15 : -0.15), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                }\n            }\n            \n            function updateProjectionPaths(points) {\n                if (!isFinite(points.P_hyperbola.x) || !isFinite(points.P_hyperbola.y)) return;\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x - P_origin.x, P_tan_tip.y - P_origin.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength, 'stroke-dashoffset': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength, 'stroke-dashoffset': horizontalLength });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth;\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- ANIMATION & INTERACTION ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal, 'animation');\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return; \n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause angle animation' : 'Play angle animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    if(isInverseMode) toggleInteractionMode(false);\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = dom.body.className.replace(/focus-\\w+/, `focus-${mode}`);\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                if (e.target.closest('text, .svg-guideline, .svg-dynamic-line')) return; // ignore clicks on text/lines\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                let angleRad;\n                if (isInverseMode) {\n                    const p = Math.asinh(coords.y);\n                    angleRad = Math.atan(Math.sinh(p)); // Gudermannian function\n                } else {\n                    angleRad = Math.atan2(coords.y, coords.x);\n                }\n                updateAll(angleRad * RAD_TO_DEG, 'drag');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                updateAll(dom.slider.value, 'drag-end');\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            async function runProjectionAnimation() {\n                if (isProjectionAnimating) return;\n                isProjectionAnimating = true;\n                dom.projectionToggle.disabled = true;\n\n                const { radial, horizontal } = dom.svgElements.projections;\n                const { secCosh, tanSinh } = dom.svgElements.lines;\n                const { projSec, projTan } = dom.svgElements.labels;\n                \n                radial.classList.add('visible');\n                await sleep(50);\n                radial.style.strokeDashoffset = '0';\n                await sleep(600);\n                \n                secCosh.classList.add('pulse-once-anim');\n                projSec.classList.add('visible');\n                tanSinh.classList.add('pulse-once-anim');\n                projTan.classList.add('visible');\n                await sleep(800);\n                \n                horizontal.classList.add('visible');\n                await sleep(50);\n                horizontal.style.strokeDashoffset = '0';\n                await sleep(1000);\n\n                secCosh.classList.remove('pulse-once-anim');\n                tanSinh.classList.remove('pulse-once-anim');\n                projSec.classList.remove('visible');\n                projTan.classList.remove('visible');\n                isProjectionAnimating = false;\n                if (!dom.projectionToggle.checked) {\n                    hideProjection();\n                }\n                dom.projectionToggle.disabled = false;\n            }\n\n            function hideProjection() {\n                const { radial, horizontal } = dom.svgElements.projections;\n                [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                try {\n                    const points = JSON.parse(dom.svg.dataset.currentPoints || '{}');\n                    updateProjectionPaths(points);\n                } catch(e) { console.error(\"Could not parse points for projection reset.\", e); }\n            }\n            \n            function toggleInteractionMode(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isInverseMode;\n                if (newState === isInverseMode) return;\n                isInverseMode = newState;\n                dom.body.classList.toggle('inverse-interaction-mode', isInverseMode);\n                dom.interactionModeToggle.checked = isInverseMode;\n                dom.interactionModeToggle.setAttribute('aria-checked', String(isInverseMode));\n                dom.angleControlGroup.classList.toggle('is-disabled', isInverseMode);\n                dom.slider.disabled = isInverseMode;\n                dom.angleInput.disabled = isInverseMode;\n                dom.playPauseBtn.disabled = isInverseMode;\n\n                if (isInverseMode) {\n                    if (isPlaying) togglePlay(false);\n                    dom.vizCaption.textContent = \"Drag the point on the hyperbola to control the diagram.\";\n                } else {\n                    dom.vizCaption.textContent = \"Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.\";\n                }\n            }\n\n            // --- URL & SETUP ---\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                try { if (window.location.hash !== newHash) { history.replaceState(null, '', newHash); } } \n                catch (e) { console.warn(\"Could not update URL hash:\", e); }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const gridGroup = dom.svg.querySelector('#svg-grid');\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' }); gridGroup.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' }); gridGroup.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    const nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'Home', 'End'];\n                    if (!acceptedKeys.includes(e.key) || isInverseMode) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    let currentVal = parseFloat(dom.slider.value);\n                    let step = e.shiftKey ? 5.0 : (e.key.includes('Page') ? 10.0 : 0.5);\n                    switch(e.key) {\n                        case 'ArrowLeft': case 'ArrowDown': currentVal -= step; break;\n                        case 'ArrowRight': case 'ArrowUp': currentVal += step; break;\n                        case 'Home': currentVal = parseFloat(dom.slider.min); break;\n                        case 'End': currentVal = parseFloat(dom.slider.max); break;\n                    }\n                    updateAll(currentVal, 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    if(isChecked) { runProjectionAnimation(); } else { hideProjection(); }\n                });\n\n                dom.interactionModeToggle.addEventListener('change', e => toggleInteractionMode(e.target.checked));\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
          "requestPromptHtml_BugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the bidirectional relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n            --transition-slow: 0.6s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        input[type=\"number\"], input[type=\"range\"], button {\n            transition: opacity var(--transition-fast), visibility var(--transition-fast);\n        }\n        .control-item.is-disabled { opacity: 0.5; pointer-events: none; }\n        .control-item.is-disabled label { color: var(--text-muted-color); }\n        \n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: '';\n            position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked {\n            background-color: var(--primary-color);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after {\n            transform: translateX(22px);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:disabled {\n            background-color: var(--border-color);\n            cursor: not-allowed;\n            opacity: 0.6;\n        }\n        \n        .data-panel .data-grid {\n            display: grid; grid-template-columns: 1fr;\n            gap: 1.25rem; margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color var(--transition-fast);\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); } .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); } .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); } .dd-area-circ { color: var(--primary-color); } .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative; padding-left: 1.5rem;\n            transition: color var(--transition-fast); list-style: none;\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº'; position: absolute; left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg); font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n        .is-near-asymptote .svg-unit-hyperbola, .is-near-asymptote .hyperbolic-element { opacity: 0.2; }\n        .is-near-asymptote .svg-label-sec-cosh, .is-near-asymptote .svg-label-tan-sinh { opacity: 0.2; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        \n        .svg-point { stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal), r var(--transition-fast), cursor var(--transition-fast); }\n        #svg-point-circle { fill: var(--primary-color); cursor: grab; }\n        #svg-point-hyperbola { fill: var(--secondary-color); cursor: default; }\n        \n        .inverse-interaction-mode #svg-point-circle { cursor: default; }\n        .inverse-interaction-mode #svg-point-hyperbola { cursor: grab; }\n        #svg-point-circle:active, .inverse-interaction-mode #svg-point-hyperbola:active { cursor: grabbing; fill: var(--accent-color); r: 0.08; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono); fill: var(--text-color);\n            paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast);\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); } .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); } .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n        \n        .svg-projection-line {\n            stroke: var(--accent-color); stroke-width: 0.03;\n            stroke-dasharray: 0; stroke-dashoffset: 0;\n            opacity: 0; pointer-events: none;\n            transition: stroke-dashoffset var(--transition-slow), opacity var(--transition-fast);\n        }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        .svg-projection-anim-label {\n            font-size: 0.13px; opacity: 0;\n            transition: opacity 0.2s ease-in-out;\n            pointer-events: none;\n        }\n        .svg-projection-anim-label.visible { opacity: 1; }\n\n        @keyframes pulse-once-highlight {\n            50% { stroke-width: 0.08; fill: var(--accent-color); }\n        }\n        .pulse-once-anim { animation: pulse-once-highlight 0.5s ease-out; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg {\n            stroke-width: initial; opacity: 0.45;\n        }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0; pointer-events: none; transition: opacity var(--transition-normal);\n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag a point or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" role=\"group\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle corresponds to a parameter p on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The relationship can be explored by dragging either the circle point or the hyperbola point.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n\n                            <text id=\"svg-label-proj-sec\" class=\"svg-label svg-projection-anim-label svg-label-sec-cosh\" text-anchor=\"middle\">sec(Î¸)</text>\n                            <text id=\"svg-label-proj-tan\" class=\"svg-label svg-projection-anim-label svg-label-tan-sinh\" text-anchor=\"start\">tan(Î¸)</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\" id=\"angle-control-group\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                             <div class=\"control-item toggle-switch\">\n                               <label for=\"interaction-mode-toggle\" id=\"interaction-mode-label\">Control from Hyperbola</label>\n                               <input type=\"checkbox\" id=\"interaction-mode-toggle\" role=\"switch\" aria-labelledby=\"interaction-mode-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Guided Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-labelledby=\"projection-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is related to <code>Î¸</code> by <code>Î¸ = gd(p)</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let isInverseMode = false;\n            let isProjectionAnimating = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                angleControlGroup: document.getElementById('angle-control-group'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                interactionModeToggle: document.getElementById('interaction-mode-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                vizCaption: document.getElementById('viz-caption'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), projSec: document.getElementById('svg-label-proj-sec'), projTan: document.getElementById('svg-label-proj-tan') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source !== 'initial' && source !== 'drag') triggerPulse();\n                if ((source === 'user' || source === 'drag-end') && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                dom.svg.classList.toggle('is-near-asymptote', angleAbs > FADE_START_ANGLE);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                if(isFinite(points.P_hyperbola.x) && isFinite(points.P_hyperbola.y)) {\n                    setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n                }\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionPaths(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.4;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * 0.15 });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * 0.12, y: points.P_circle.y / 2, 'text-anchor': cos_t < 0 ? 'end' : 'start'});\n                \n                const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end'});\n\n                // Projection Animation Labels\n                setAttr(dom.svgElements.labels.projSec, { x: points.P_sec_axis.x / 2, y: secCoshYOffset - 0.15 });\n                setAttr(dom.svgElements.labels.projTan, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.15 : -0.15), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n            }\n            \n            function updateProjectionPaths(points) {\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x - P_origin.x, P_tan_tip.y - P_origin.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength, 'stroke-dashoffset': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength, 'stroke-dashoffset': horizontalLength });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth;\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- ANIMATION & INTERACTION ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return; isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    if(isInverseMode) toggleInteractionMode(false); // Can't play in inverse mode\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = dom.body.className.replace(/focus-\\w+/, `focus-${mode}`);\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                let angleRad;\n                if (isInverseMode) {\n                    const p = Math.asinh(coords.y);\n                    angleRad = Math.atan(Math.sinh(p)); // Gudermannian function\n                } else {\n                    angleRad = Math.atan2(coords.y, coords.x);\n                }\n                updateAll(angleRad * RAD_TO_DEG, 'drag');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                updateAll(dom.slider.value, 'drag-end');\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            async function runProjectionAnimation() {\n                if (isProjectionAnimating) return;\n                isProjectionAnimating = true;\n                dom.projectionToggle.disabled = true;\n\n                const { radial, horizontal } = dom.svgElements.projections;\n                const { secCosh, tanSinh } = dom.svgElements.lines;\n                const { projSec, projTan } = dom.svgElements.labels;\n                \n                // Animate radial line\n                radial.classList.add('visible');\n                await sleep(50);\n                radial.style.strokeDashoffset = '0';\n                await sleep(600);\n                \n                // Pulse and label secant/tangent\n                secCosh.classList.add('pulse-once-anim');\n                projSec.classList.add('visible');\n                tanSinh.classList.add('pulse-once-anim');\n                projTan.classList.add('visible');\n                \n                await sleep(800);\n                \n                // Animate horizontal \"transfer\" line\n                horizontal.classList.add('visible');\n                await sleep(50);\n                horizontal.style.strokeDashoffset = '0';\n                \n                await sleep(1000);\n\n                // Cleanup\n                secCosh.classList.remove('pulse-once-anim');\n                tanSinh.classList.remove('pulse-once-anim');\n                projSec.classList.remove('visible');\n                projTan.classList.remove('visible');\n\n                isProjectionAnimating = false;\n                if (!dom.projectionToggle.checked) {\n                    hideProjection();\n                }\n                dom.projectionToggle.disabled = false;\n            }\n\n            function hideProjection() {\n                const { radial, horizontal } = dom.svgElements.projections;\n                [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                updateProjectionPaths(JSON.parse(dom.svg.dataset.currentPoints || '{}'));\n            }\n            \n            function toggleInteractionMode(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isInverseMode;\n                if (newState === isInverseMode) return;\n                isInverseMode = newState;\n                dom.body.classList.toggle('inverse-interaction-mode', isInverseMode);\n                dom.interactionModeToggle.checked = isInverseMode;\n                dom.interactionModeToggle.setAttribute('aria-checked', String(isInverseMode));\n                dom.angleControlGroup.classList.toggle('is-disabled', isInverseMode);\n                dom.playPauseBtn.disabled = isInverseMode;\n\n                if (isInverseMode) {\n                    if (isPlaying) togglePlay(false);\n                    dom.vizCaption.textContent = \"Drag the point on the hyperbola to control the diagram.\";\n                } else {\n                    dom.vizCaption.textContent = \"Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.\";\n                }\n            }\n\n            // --- URL & SETUP ---\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                try {\n                    if (window.location.hash !== newHash) {\n                        history.replaceState(null, '', newHash);\n                    }\n                } catch (e) { console.warn(\"Could not update URL hash:\", e); }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' }); dom.svg.querySelector('#svg-grid').appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' }); dom.svg.querySelector('#svg-grid').appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('input', e => {\n                    e.target.value = e.target.value.replace(/[^\\d.-]/g, '');\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'Home', 'End'];\n                    if (!acceptedKeys.includes(e.key) || isInverseMode) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    let currentVal = parseFloat(dom.slider.value);\n                    let newVal = currentVal;\n                    switch(e.key) {\n                        case 'ArrowLeft': case 'ArrowDown': newVal -= e.shiftKey ? 5.0 : 0.5; break;\n                        case 'ArrowRight': case 'ArrowUp': newVal += e.shiftKey ? 5.0 : 0.5; break;\n                        case 'PageDown': newVal -= 10; break;\n                        case 'PageUp': newVal += 10; break;\n                        case 'Home': newVal = parseFloat(dom.slider.min); break;\n                        case 'End': newVal = parseFloat(dom.slider.max); break;\n                    }\n                    updateAll(newVal, 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    if(isChecked) { runProjectionAnimation(); } else { hideProjection(); }\n                });\n\n                dom.interactionModeToggle.addEventListener('change', e => toggleInteractionMode(e.target.checked));\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
          "requestPromptHtml_FeatureImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible {\n            outline: 2px solid var(--accent-color);\n            border-color: var(--accent-color);\n        }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover::-webkit-slider-thumb, input[type=\"range\"]:focus-visible::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover::-moz-range-thumb, input[type=\"range\"]:focus-visible::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover { background-color: var(--accent-color); }\n        .play-pause-btn:active { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active {\n            background-color: var(--primary-color);\n            color: var(--bg-color);\n            font-weight: 700;\n        }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: '';\n            position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked {\n            background-color: var(--primary-color);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after {\n            transform: translateX(22px);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible {\n            outline: 2px solid var(--accent-color);\n            outline-offset: 2px;\n        }\n        \n        .data-panel .data-grid {\n            display: grid;\n            grid-template-columns: 1fr;\n            gap: 1.25rem;\n            margin-top: 1.25rem;\n        }\n        \n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 {\n            font-size: 1rem; font-weight: 600;\n            color: var(--text-color); margin-bottom: 0.5rem;\n        }\n        \n        .data-list {\n            display: grid; grid-template-columns: auto 1fr;\n            gap: 0.5rem 1rem; font-family: var(--font-mono);\n            font-size: 0.95rem;\n        }\n\n        .data-list dt, .data-list dd {\n            padding: 0.2rem 0.4rem;\n            border-radius: 4px;\n            transition: background-color var(--transition-fast);\n        }\n\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); }\n        .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); }\n        .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); }\n        .dd-area-circ { color: var(--primary-color); }\n        .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            background-color: color-mix(in srgb, var(--red-color) 20%, transparent);\n            padding: 0.1rem 0.4rem; border-radius: 4px;\n        }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative;\n            padding-left: 1.5rem;\n            transition: color var(--transition-fast);\n            list-style: none; /* Remove default marker */\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº';\n            position: absolute;\n            left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg);\n            font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover { color: var(--accent-color); }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code {\n            font-family: var(--font-mono); font-size: 0.9em;\n            background-color: var(--bg-color); padding: 0.2rem 0.4rem;\n            border-radius: 4px; color: var(--accent-color);\n        }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; opacity: var(--asymptote-opacity, 0.5); transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: var(--asymptote-opacity, 0.2); transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-dynamic-line.circular-element, .svg-dynamic-line.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        \n        .svg-point { fill: var(--accent-color); stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal); }\n        .svg-point.hyperbolic-element { opacity: var(--asymptote-opacity, 1); }\n        #svg-point-circle { cursor: grab; }\n        #svg-point-circle:active { cursor: grabbing; }\n        \n        .svg-label, .svg-axis-label {\n            font-family: var(--font-mono); fill: var(--text-color);\n            paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em;\n            stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast);\n        }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); }\n        .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-tan-sinh { fill: var(--green-color); opacity: var(--asymptote-opacity, 1); }\n        .svg-label-theta { fill: var(--primary-color); }\n\n        .svg-projection-line {\n            stroke: var(--accent-color); stroke-width: 0.03;\n            stroke-dasharray: 0; stroke-dashoffset: 0;\n            transition: stroke-dashoffset 0.5s ease-in-out, opacity var(--transition-normal);\n            opacity: 0; pointer-events: none;\n        }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg {\n            stroke-width: initial;\n            opacity: 0.45;\n        }\n        \n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { \n            opacity: 0 !important; /* Use !important to override inline style from JS */\n            pointer-events: none;\n            transition: opacity var(--transition-normal);\n        }\n        \n        footer {\n            text-align: center; padding: 1.5rem; margin-top: 2rem;\n            border-top: 1px solid var(--border-color);\n            color: var(--text-muted-color); font-size: 0.9rem;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        \n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        \n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag the point on the circle or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle controls a point on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The corresponding circular and hyperbolic sector areas are also visualized.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\" font-size=\"0.12px\" fill=\"var(--text-muted-color)\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Show Geometric Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is the result of the inverse Gudermannian function applied to <code>Î¸</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    dynamicParent: document.getElementById('svg-dynamic-elements'),\n                    grid: document.getElementById('svg-grid'),\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source !== 'initial') triggerPulse();\n                if (source === 'user' && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                const asymptoteFadeFactor = clamp((1 - (Math.max(0, angleAbs - FADE_START_ANGLE) / (ASYMPTOTE_THRESHOLD - FADE_START_ANGLE))), 0, 1);\n                dom.svgElements.dynamicParent.style.setProperty('--asymptote-opacity', asymptoteFadeFactor);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n\n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60; // Polyline approximation of the hyperbolic sector\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionLines(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearVertical = Math.abs(cos_t) < 0.4;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                \n                const cosYOffset = isNearVertical ? (ySign * 0.22) : (ySign * 0.15) - (isNearHorizontal ? ySign * 0.05 : 0);\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: cosYOffset });\n                \n                const sinXOffset = Math.sign(cos_t || 1) * (isNearVertical ? 0.3 : 0.12);\n                const sinAnchor = (isNearVertical && cos_t < 0) || cos_t < -0.9 ? 'end' : 'start';\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + sinXOffset, y: points.P_circle.y / 2, 'text-anchor': sinAnchor });\n                \n                const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n\n                const tanSinhXOffset = (cos_t > 0 ? 0.12 : -0.12);\n                setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + tanSinhXOffset, y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n\n                dom.svgElements.labels.secCosh.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * -0.1}px)` : 'none';\n                dom.svgElements.labels.cos.style.transform = (isNearHorizontal && Math.abs(cos_t) > 0.95) ? `translateY(${ySign * 0.1}px)` : 'none';\n            }\n            \n            function updateProjectionLines(points) {\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x, P_tan_tip.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength });\n\n                if (!radial.classList.contains('visible')) {\n                    radial.style.strokeDashoffset = radialLength;\n                }\n                if (!horizontal.classList.contains('visible')) {\n                    horizontal.style.strokeDashoffset = horizontalLength;\n                }\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth; // Trigger reflow\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- EVENT HANDLING ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal);\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return;\n\n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause animation' : 'Play animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = `focus-${mode}`;\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                dom.svgElements.points.circle.style.fill = 'var(--accent-color)';\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                const angleRad = Math.atan2(coords.y, coords.x);\n                updateAll(angleRad * RAD_TO_DEG, 'user');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                dom.svgElements.points.circle.style.removeProperty('fill');\n                updateURLHash(dom.slider.value);\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n            \n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                if (window.location.hash !== newHash) {\n                    history.replaceState(null, '', newHash);\n                }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' });\n                    dom.svgElements.grid.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                \n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n                dom.angleInput.addEventListener('input', e => {\n                    const value = parseFloat(e.target.value);\n                    const min = parseFloat(e.target.min);\n                    const max = parseFloat(e.target.max);\n                    if (value > max || value < min) {\n                         e.target.value = clamp(value, min, max);\n                    }\n                });\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    let nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'];\n                    if (!acceptedKeys.includes(e.key)) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    const step = e.shiftKey ? 5.0 : 0.5;\n                    const direction = (e.key === 'ArrowRight' || e.key === 'ArrowUp') ? 1 : -1;\n                    updateAll(parseFloat(dom.slider.value) + (step * direction), 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    const { radial, horizontal } = dom.svgElements.projections;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    \n                    if (isChecked) {\n                        updateAll(dom.slider.value); // Recalculate positions\n                        requestAnimationFrame(() => {\n                           [radial, horizontal].forEach(el => el.classList.add('visible'));\n                           radial.style.strokeDashoffset = '0';\n                           horizontal.style.strokeDashoffset = '0';\n                        });\n                    } else {\n                        [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                        updateAll(dom.slider.value); // Reset dash offsets\n                    }\n                });\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"Refactor the 'Show Geometric Projection' feature into a guided, multi-step animation to vastly improve its educational value. When toggled ON, instead of merely showing two static lines, initiate a clear, narrated sequence: 1. Animate the radial line extending from the origin through the circle point to the tangent line at x=1. 2. Explicitly highlight the `sec(Î¸)` length on the x-axis and the `tan(Î¸)` length on the tangent line with animated pulses and temporary labels. 3. Create a distinct 'transfer' animation (e.g., a glowing path or animated point) that moves from the tangent point `(1, tanÎ¸)` to the final hyperbola point `(secÎ¸, tanÎ¸)`, visually confirming that the point on the hyperbola is defined by the `secant` and `tangent` of the circular angle Î¸. This elevates the feature from a simple toggle to a core teaching moment.; Introduce a new, high-value 'Inverse Interaction Mode' by making the point on the hyperbola draggable. When this mode is active, the user will control the hyperbolic parameter `p` by dragging the point `(cosh p, sinh p)`. The entire visualization will update in reverse: the JavaScript will calculate the circular angle `Î¸` using the inverse Gudermannian function (Î¸ = gd(p)), and the point on the unit circle will move to its corresponding position. This creates a fully bidirectional exploration of the relationship, allowing users to build intuition from both the circular and hyperbolic perspectives and solidifying their understanding of the one-to-one mapping.\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the bidirectional relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n            --transition-slow: 0.6s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n            min-height: 2.7rem; /* Prevent layout shift on text change */\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n            transition: color var(--transition-fast);\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        input[type=\"number\"], input[type=\"range\"], button {\n            transition: opacity var(--transition-fast), visibility var(--transition-fast), background-color var(--transition-fast), color var(--transition-fast);\n        }\n        .control-item.is-disabled { opacity: 0.6; }\n        .control-item.is-disabled label { color: var(--text-muted-color); }\n        .control-item.is-disabled input, .control-item.is-disabled button { pointer-events: none; }\n        \n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible { outline: 2px solid var(--accent-color); border-color: var(--accent-color); }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        #angle-input:disabled { background-color: var(--border-color); cursor: not-allowed; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]:disabled { cursor: not-allowed; }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover:not(:disabled)::-webkit-slider-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover:not(:disabled)::-moz-range-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb { background: var(--text-muted-color); }\n        input[type=\"range\"]:disabled::-moz-range-thumb { background: var(--text-muted-color); }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover:not(:disabled) { background-color: var(--accent-color); }\n        .play-pause-btn:active:not(:disabled) { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        .play-pause-btn:disabled { background-color: var(--border-color); color: var(--text-muted-color); cursor: not-allowed; opacity: 0.6; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active { background-color: var(--primary-color); color: var(--bg-color); font-weight: 700; }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: ''; position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked { background-color: var(--primary-color); }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after { transform: translateX(22px); }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        input[type=\"checkbox\"][role=\"switch\"]:disabled { background-color: var(--border-color); cursor: not-allowed; opacity: 0.6; }\n        \n        .data-panel .data-grid { display: grid; grid-template-columns: 1fr; gap: 1.25rem; margin-top: 1.25rem; }\n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 { font-size: 1rem; font-weight: 600; color: var(--text-color); margin-bottom: 0.5rem; }\n        .data-list { display: grid; grid-template-columns: auto 1fr; gap: 0.5rem 1rem; font-family: var(--font-mono); font-size: 0.95rem; }\n        .data-list dt, .data-list dd { padding: 0.2rem 0.4rem; border-radius: 4px; transition: background-color var(--transition-fast); }\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); } .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); } .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); } .dd-area-circ { color: var(--primary-color); } .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight { font-weight: 700; background-color: color-mix(in srgb, var(--red-color) 20%, transparent); padding: 0.1rem 0.4rem; border-radius: 4px; }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative; padding-left: 1.5rem;\n            transition: color var(--transition-fast); list-style: none;\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº'; position: absolute; left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg); font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover, .explanation-panel summary:focus-visible { color: var(--accent-color); }\n        .explanation-panel summary:focus-visible { outline: none; }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code { font-family: var(--font-mono); font-size: 0.9em; background-color: var(--bg-color); padding: 0.2rem 0.4rem; border-radius: 4px; color: var(--accent-color); }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n        .is-near-asymptote .svg-unit-hyperbola, .is-near-asymptote .hyperbolic-element { opacity: 0.2; }\n        .is-near-asymptote .svg-label-sec-cosh, .is-near-asymptote .svg-label-tan-sinh { opacity: 0.2; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-point { stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal), r var(--transition-fast), cursor var(--transition-fast); }\n        #svg-point-circle { fill: var(--primary-color); cursor: grab; }\n        #svg-point-hyperbola { fill: var(--secondary-color); cursor: default; }\n        \n        .inverse-interaction-mode #svg-point-circle { cursor: default; }\n        .inverse-interaction-mode #svg-point-hyperbola { cursor: grab; }\n        #svg-point-circle:active, .inverse-interaction-mode #svg-point-hyperbola:active { cursor: grabbing; fill: var(--accent-color); r: 0.08; }\n        \n        .svg-label, .svg-axis-label { font-family: var(--font-mono); fill: var(--text-color); paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em; stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast), fill var(--transition-fast); }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); } .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); } .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n        \n        .svg-projection-line { stroke: var(--accent-color); stroke-width: 0.03; stroke-dasharray: 0; stroke-dashoffset: 0; opacity: 0; pointer-events: none; transition: stroke-dashoffset var(--transition-slow), opacity var(--transition-fast); }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        .svg-projection-anim-label { font-size: 0.13px; opacity: 0; transition: opacity 0.2s ease-in-out; pointer-events: none; }\n        .svg-projection-anim-label.visible { opacity: 1; }\n\n        @keyframes pulse-once-highlight { 50% { stroke-width: 0.08; fill: var(--accent-color); } }\n        .pulse-once-anim { animation: pulse-once-highlight 0.5s ease-out; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg { stroke-width: initial; opacity: 0.45; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { opacity: 0; pointer-events: none; transition: opacity var(--transition-normal); }\n        \n        footer { text-align: center; padding: 1.5rem; margin-top: 2rem; border-top: 1px solid var(--border-color); color: var(--text-muted-color); font-size: 0.9rem; }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag a point or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle corresponds to a parameter p on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The relationship can be explored by dragging either the circle point or the hyperbola point.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n\n                            <text id=\"svg-label-proj-sec\" class=\"svg-label svg-projection-anim-label svg-label-sec-cosh\" text-anchor=\"middle\">sec(Î¸)</text>\n                            <text id=\"svg-label-proj-tan\" class=\"svg-label svg-projection-anim-label svg-label-tan-sinh\" text-anchor=\"start\">tan(Î¸)</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\" id=\"angle-control-group\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                             <div class=\"control-item toggle-switch\">\n                               <label for=\"interaction-mode-toggle\" id=\"interaction-mode-label\">Control from Hyperbola</label>\n                               <input type=\"checkbox\" id=\"interaction-mode-toggle\" role=\"switch\" aria-labelledby=\"interaction-mode-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Guided Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-labelledby=\"projection-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play angle animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is related to <code>Î¸</code> by <code>Î¸ = gd(p)</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let isInverseMode = false;\n            let isProjectionAnimating = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                angleControlGroup: document.getElementById('angle-control-group'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                interactionModeToggle: document.getElementById('interaction-mode-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                vizCaption: document.getElementById('viz-caption'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), projSec: document.getElementById('svg-label-proj-sec'), projTan: document.getElementById('svg-label-proj-tan') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source === 'user' || source === 'drag') triggerPulse();\n                if ((source === 'user' || source === 'drag-end') && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                dom.svg.classList.toggle('is-near-asymptote', angleAbs > FADE_START_ANGLE);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n                dom.svg.dataset.currentPoints = JSON.stringify(points);\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionPaths(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * 0.15 });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * 0.12, y: points.P_circle.y / 2, 'text-anchor': cos_t < 0 ? 'end' : 'start'});\n                \n                if (isFinite(points.P_sec_axis.x)) {\n                    const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                    setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n                    setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end'});\n                    setAttr(dom.svgElements.labels.projSec, { x: points.P_sec_axis.x / 2, y: secCoshYOffset - 0.15 });\n                    setAttr(dom.svgElements.labels.projTan, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.15 : -0.15), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                }\n            }\n            \n            function updateProjectionPaths(points) {\n                if (!isFinite(points.P_hyperbola.x) || !isFinite(points.P_hyperbola.y)) return;\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x - P_origin.x, P_tan_tip.y - P_origin.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength, 'stroke-dashoffset': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength, 'stroke-dashoffset': horizontalLength });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth;\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- ANIMATION & INTERACTION ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal, 'animation');\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return; \n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause angle animation' : 'Play angle animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    if(isInverseMode) toggleInteractionMode(false);\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = dom.body.className.replace(/focus-\\w+/, `focus-${mode}`);\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                if (e.target.closest('text, .svg-guideline, .svg-dynamic-line')) return; // ignore clicks on text/lines\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                let angleRad;\n                if (isInverseMode) {\n                    const p = Math.asinh(coords.y);\n                    angleRad = Math.atan(Math.sinh(p)); // Gudermannian function\n                } else {\n                    angleRad = Math.atan2(coords.y, coords.x);\n                }\n                updateAll(angleRad * RAD_TO_DEG, 'drag');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                updateAll(dom.slider.value, 'drag-end');\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            async function runProjectionAnimation() {\n                if (isProjectionAnimating) return;\n                isProjectionAnimating = true;\n                dom.projectionToggle.disabled = true;\n\n                const { radial, horizontal } = dom.svgElements.projections;\n                const { secCosh, tanSinh } = dom.svgElements.lines;\n                const { projSec, projTan } = dom.svgElements.labels;\n                \n                radial.classList.add('visible');\n                await sleep(50);\n                radial.style.strokeDashoffset = '0';\n                await sleep(600);\n                \n                secCosh.classList.add('pulse-once-anim');\n                projSec.classList.add('visible');\n                tanSinh.classList.add('pulse-once-anim');\n                projTan.classList.add('visible');\n                await sleep(800);\n                \n                horizontal.classList.add('visible');\n                await sleep(50);\n                horizontal.style.strokeDashoffset = '0';\n                await sleep(1000);\n\n                secCosh.classList.remove('pulse-once-anim');\n                tanSinh.classList.remove('pulse-once-anim');\n                projSec.classList.remove('visible');\n                projTan.classList.remove('visible');\n                isProjectionAnimating = false;\n                if (!dom.projectionToggle.checked) {\n                    hideProjection();\n                }\n                dom.projectionToggle.disabled = false;\n            }\n\n            function hideProjection() {\n                const { radial, horizontal } = dom.svgElements.projections;\n                [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                try {\n                    const points = JSON.parse(dom.svg.dataset.currentPoints || '{}');\n                    updateProjectionPaths(points);\n                } catch(e) { console.error(\"Could not parse points for projection reset.\", e); }\n            }\n            \n            function toggleInteractionMode(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isInverseMode;\n                if (newState === isInverseMode) return;\n                isInverseMode = newState;\n                dom.body.classList.toggle('inverse-interaction-mode', isInverseMode);\n                dom.interactionModeToggle.checked = isInverseMode;\n                dom.interactionModeToggle.setAttribute('aria-checked', String(isInverseMode));\n                dom.angleControlGroup.classList.toggle('is-disabled', isInverseMode);\n                dom.slider.disabled = isInverseMode;\n                dom.angleInput.disabled = isInverseMode;\n                dom.playPauseBtn.disabled = isInverseMode;\n\n                if (isInverseMode) {\n                    if (isPlaying) togglePlay(false);\n                    dom.vizCaption.textContent = \"Drag the point on the hyperbola to control the diagram.\";\n                } else {\n                    dom.vizCaption.textContent = \"Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.\";\n                }\n            }\n\n            // --- URL & SETUP ---\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                try { if (window.location.hash !== newHash) { history.replaceState(null, '', newHash); } } \n                catch (e) { console.warn(\"Could not update URL hash:\", e); }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const gridGroup = dom.svg.querySelector('#svg-grid');\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' }); gridGroup.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' }); gridGroup.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    const nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'Home', 'End'];\n                    if (!acceptedKeys.includes(e.key) || isInverseMode) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    let currentVal = parseFloat(dom.slider.value);\n                    let step = e.shiftKey ? 5.0 : (e.key.includes('Page') ? 10.0 : 0.5);\n                    switch(e.key) {\n                        case 'ArrowLeft': case 'ArrowDown': currentVal -= step; break;\n                        case 'ArrowRight': case 'ArrowUp': currentVal += step; break;\n                        case 'Home': currentVal = parseFloat(dom.slider.min); break;\n                        case 'End': currentVal = parseFloat(dom.slider.max); break;\n                    }\n                    updateAll(currentVal, 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    if(isChecked) { runProjectionAnimation(); } else { hideProjection(); }\n                });\n\n                dom.interactionModeToggle.addEventListener('change', e => toggleInteractionMode(e.target.checked));\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": [
            "Overhaul the 'Guided Projection' into a 'Narrated Transformation Story'. Currently, the projection is a simple, one-shot animation. Elevate it by creating a multi-step, visually narrated sequence. First, isolate and highlight the `sec(Î¸)` and `tan(Î¸)` lines on the circle. Second, create a clear, kinetic animation that shows the `sec(Î¸)` line segment transforming into the `cosh(p)` line and the `tan(Î¸)` segment transforming into the `sinh(p)` line, visually cementing their equality. Third, as the hyperbolic lines form, animate the appearance of the hyperbolic area and the value 'p', explicitly showing how it's derived. This transforms the feature from a simple visual effect into the core pedagogical tool that explains the *how* and *why* of the connection, directly fulfilling the original prompt's goal.",
            "Upgrade the 'Control from Hyperbola' toggle into a first-class 'Hyperbolic Interaction Mode'. The current implementation is basic, simply disabling circular controls. Enhance it by dynamically replacing the 'Angle (Î¸)' slider and input with a new, fully functional slider and input for the 'Hyperbolic Angle (p)'. This allows for precise, explicit control from the hyperbolic domain. Furthermore, refactor the SVG drag interaction for this mode: instead of simply mapping the mouse's y-coordinate, calculate the closest point on the actual hyperbola curve to the cursor, making the drag feel direct and intuitive. This makes the bidirectional relationship truly explorable and elevates the feature from a novelty to a core, robust part of the tool."
          ]
        },
        {
          "iterationNumber": 6,
          "title": "Final Polish & Fix",
          "status": "completed",
          "isDetailsOpen": true,
          "requestPromptHtml_BugFix": "AI-Generated HTML for Final, ABSOLUTE Production Readiness (CRITICAL WARNING: Assume, despite all prior work, SUBTLE AND CRITICAL FLAWS may still exist):\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the bidirectional relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n            --transition-slow: 0.6s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n            min-height: 2.7rem; /* Prevent layout shift on text change */\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n            transition: color var(--transition-fast);\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        input[type=\"number\"], input[type=\"range\"], button {\n            transition: opacity var(--transition-fast), visibility var(--transition-fast), background-color var(--transition-fast), color var(--transition-fast);\n        }\n        .control-item.is-disabled { opacity: 0.6; }\n        .control-item.is-disabled label { color: var(--text-muted-color); }\n        .control-item.is-disabled input, .control-item.is-disabled button { pointer-events: none; }\n        \n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible { outline: 2px solid var(--accent-color); border-color: var(--accent-color); }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        #angle-input:disabled { background-color: var(--border-color); cursor: not-allowed; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]:disabled { cursor: not-allowed; }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover:not(:disabled)::-webkit-slider-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover:not(:disabled)::-moz-range-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb { background: var(--text-muted-color); }\n        input[type=\"range\"]:disabled::-moz-range-thumb { background: var(--text-muted-color); }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover:not(:disabled) { background-color: var(--accent-color); }\n        .play-pause-btn:active:not(:disabled) { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        .play-pause-btn:disabled { background-color: var(--border-color); color: var(--text-muted-color); cursor: not-allowed; opacity: 0.6; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active { background-color: var(--primary-color); color: var(--bg-color); font-weight: 700; }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: ''; position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked { background-color: var(--primary-color); }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after { transform: translateX(22px); }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        input[type=\"checkbox\"][role=\"switch\"]:disabled { background-color: var(--border-color); cursor: not-allowed; opacity: 0.6; }\n        \n        .data-panel .data-grid { display: grid; grid-template-columns: 1fr; gap: 1.25rem; margin-top: 1.25rem; }\n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 { font-size: 1rem; font-weight: 600; color: var(--text-color); margin-bottom: 0.5rem; }\n        .data-list { display: grid; grid-template-columns: auto 1fr; gap: 0.5rem 1rem; font-family: var(--font-mono); font-size: 0.95rem; }\n        .data-list dt, .data-list dd { padding: 0.2rem 0.4rem; border-radius: 4px; transition: background-color var(--transition-fast); }\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); } .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); } .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); } .dd-area-circ { color: var(--primary-color); } .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight { font-weight: 700; background-color: color-mix(in srgb, var(--red-color) 20%, transparent); padding: 0.1rem 0.4rem; border-radius: 4px; }\n        .connection-highlight.green { background-color: color-mix(in srgb, var(--green-color) 20%, transparent); }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative; padding-left: 1.5rem;\n            transition: color var(--transition-fast); list-style: none;\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº'; position: absolute; left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg); font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover, .explanation-panel summary:focus-visible { color: var(--accent-color); }\n        .explanation-panel summary:focus-visible { outline: none; }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code { font-family: var(--font-mono); font-size: 0.9em; background-color: var(--bg-color); padding: 0.2rem 0.4rem; border-radius: 4px; color: var(--accent-color); }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n        .is-near-asymptote .svg-unit-hyperbola, .is-near-asymptote .hyperbolic-element { opacity: 0.2; }\n        .is-near-asymptote .svg-label-sec-cosh, .is-near-asymptote .svg-label-tan-sinh { opacity: 0.2; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-point { stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal), r var(--transition-fast), cursor var(--transition-fast); }\n        #svg-point-circle { fill: var(--primary-color); cursor: grab; }\n        #svg-point-hyperbola { fill: var(--secondary-color); cursor: default; }\n        \n        .inverse-interaction-mode #svg-point-circle { cursor: default; }\n        .inverse-interaction-mode #svg-point-hyperbola { cursor: grab; }\n        #svg-point-circle:active, .inverse-interaction-mode #svg-point-hyperbola:active { cursor: grabbing; fill: var(--accent-color); r: 0.08; }\n        \n        .svg-label, .svg-axis-label { font-family: var(--font-mono); fill: var(--text-color); paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em; stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast), fill var(--transition-fast); }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); } .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); } .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n        \n        .svg-projection-line { stroke: var(--accent-color); stroke-width: 0.03; stroke-dasharray: 0; stroke-dashoffset: 0; opacity: 0; pointer-events: none; transition: stroke-dashoffset var(--transition-slow), opacity var(--transition-fast); }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        .svg-projection-anim-label { font-size: 0.13px; opacity: 0; transition: opacity 0.2s ease-in-out; pointer-events: none; }\n        .svg-projection-anim-label.visible { opacity: 1; }\n\n        @keyframes pulse-once-highlight { 50% { stroke-width: 0.08; fill: var(--accent-color); } }\n        .pulse-once-anim { animation: pulse-once-highlight 0.5s ease-out; }\n        \n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg { stroke-width: initial; opacity: 0.45; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { opacity: 0; pointer-events: none; transition: opacity var(--transition-normal); }\n        \n        footer { text-align: center; padding: 1.5rem; margin-top: 2rem; border-top: 1px solid var(--border-color); color: var(--text-muted-color); font-size: 0.9rem; }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag a point or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle corresponds to a parameter p on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The relationship can be explored by dragging either the circle point or the hyperbola point.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n\n                            <text id=\"svg-label-proj-sec\" class=\"svg-label svg-projection-anim-label svg-label-sec-cosh\" text-anchor=\"middle\">sec(Î¸)</text>\n                            <text id=\"svg-label-proj-tan\" class=\"svg-label svg-projection-anim-label svg-label-tan-sinh\" text-anchor=\"start\">tan(Î¸)</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\" id=\"angle-control-group\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                             <div class=\"control-item toggle-switch\">\n                               <label for=\"interaction-mode-toggle\" id=\"interaction-mode-label\">Control from Hyperbola</label>\n                               <input type=\"checkbox\" id=\"interaction-mode-toggle\" role=\"switch\" aria-labelledby=\"interaction-mode-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Guided Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-labelledby=\"projection-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play angle animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is related to <code>Î¸</code> by <code>Î¸ = gd(p)</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let isInverseMode = false;\n            let isProjectionAnimating = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                angleControlGroup: document.getElementById('angle-control-group'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                interactionModeToggle: document.getElementById('interaction-mode-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                vizCaption: document.getElementById('viz-caption'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), projSec: document.getElementById('svg-label-proj-sec'), projTan: document.getElementById('svg-label-proj-tan') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== String(angleDegrees)) dom.slider.value = angleDegrees;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source === 'user' || source === 'drag') triggerPulse();\n                if ((source === 'user' || source === 'drag-end') && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                dom.svg.classList.toggle('is-near-asymptote', angleAbs > FADE_START_ANGLE);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n                dom.svg.dataset.currentPoints = JSON.stringify(points);\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionPaths(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * 0.15 });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * 0.12, y: points.P_circle.y / 2, 'text-anchor': cos_t < 0 ? 'end' : 'start'});\n                \n                if (isFinite(points.P_sec_axis.x)) {\n                    const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                    setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n                    setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end'});\n                    setAttr(dom.svgElements.labels.projSec, { x: points.P_sec_axis.x / 2, y: secCoshYOffset - 0.15 });\n                    setAttr(dom.svgElements.labels.projTan, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.15 : -0.15), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                }\n            }\n            \n            function updateProjectionPaths(points) {\n                if (!isFinite(points.P_hyperbola.x) || !isFinite(points.P_hyperbola.y)) return;\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x - P_origin.x, P_tan_tip.y - P_origin.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength, 'stroke-dashoffset': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength, 'stroke-dashoffset': horizontalLength });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth;\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- ANIMATION & INTERACTION ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal, 'animation');\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return; \n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause angle animation' : 'Play angle animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    if(isInverseMode) toggleInteractionMode(false);\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = dom.body.className.replace(/focus-\\w+/, `focus-${mode}`);\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                if (e.target.closest('text, .svg-guideline, .svg-dynamic-line')) return; // ignore clicks on text/lines\n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                let angleRad;\n                if (isInverseMode) {\n                    const p = Math.asinh(coords.y);\n                    angleRad = Math.atan(Math.sinh(p)); // Gudermannian function\n                } else {\n                    angleRad = Math.atan2(coords.y, coords.x);\n                }\n                updateAll(angleRad * RAD_TO_DEG, 'drag');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                updateAll(dom.slider.value, 'drag-end');\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            async function runProjectionAnimation() {\n                if (isProjectionAnimating) return;\n                isProjectionAnimating = true;\n                dom.projectionToggle.disabled = true;\n\n                const { radial, horizontal } = dom.svgElements.projections;\n                const { secCosh, tanSinh } = dom.svgElements.lines;\n                const { projSec, projTan } = dom.svgElements.labels;\n                \n                radial.classList.add('visible');\n                await sleep(50);\n                radial.style.strokeDashoffset = '0';\n                await sleep(600);\n                \n                secCosh.classList.add('pulse-once-anim');\n                projSec.classList.add('visible');\n                tanSinh.classList.add('pulse-once-anim');\n                projTan.classList.add('visible');\n                await sleep(800);\n                \n                horizontal.classList.add('visible');\n                await sleep(50);\n                horizontal.style.strokeDashoffset = '0';\n                await sleep(1000);\n\n                secCosh.classList.remove('pulse-once-anim');\n                tanSinh.classList.remove('pulse-once-anim');\n                projSec.classList.remove('visible');\n                projTan.classList.remove('visible');\n                isProjectionAnimating = false;\n                if (!dom.projectionToggle.checked) {\n                    hideProjection();\n                }\n                dom.projectionToggle.disabled = false;\n            }\n\n            function hideProjection() {\n                const { radial, horizontal } = dom.svgElements.projections;\n                [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                try {\n                    const points = JSON.parse(dom.svg.dataset.currentPoints || '{}');\n                    updateProjectionPaths(points);\n                } catch(e) { console.error(\"Could not parse points for projection reset.\", e); }\n            }\n            \n            function toggleInteractionMode(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isInverseMode;\n                if (newState === isInverseMode) return;\n                isInverseMode = newState;\n                dom.body.classList.toggle('inverse-interaction-mode', isInverseMode);\n                dom.interactionModeToggle.checked = isInverseMode;\n                dom.interactionModeToggle.setAttribute('aria-checked', String(isInverseMode));\n                dom.angleControlGroup.classList.toggle('is-disabled', isInverseMode);\n                dom.slider.disabled = isInverseMode;\n                dom.angleInput.disabled = isInverseMode;\n                dom.playPauseBtn.disabled = isInverseMode;\n\n                if (isInverseMode) {\n                    if (isPlaying) togglePlay(false);\n                    dom.vizCaption.textContent = \"Drag the point on the hyperbola to control the diagram.\";\n                } else {\n                    dom.vizCaption.textContent = \"Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.\";\n                }\n            }\n\n            // --- URL & SETUP ---\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                try { if (window.location.hash !== newHash) { history.replaceState(null, '', newHash); } } \n                catch (e) { console.warn(\"Could not update URL hash:\", e); }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const gridGroup = dom.svg.querySelector('#svg-grid');\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' }); gridGroup.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' }); gridGroup.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    const nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'Home', 'End'];\n                    if (!acceptedKeys.includes(e.key) || isInverseMode) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    let currentVal = parseFloat(dom.slider.value);\n                    let step = e.shiftKey ? 5.0 : (e.key.includes('Page') ? 10.0 : 0.5);\n                    switch(e.key) {\n                        case 'ArrowLeft': case 'ArrowDown': currentVal -= step; break;\n                        case 'ArrowRight': case 'ArrowUp': currentVal += step; break;\n                        case 'Home': currentVal = parseFloat(dom.slider.min); break;\n                        case 'End': currentVal = parseFloat(dom.slider.max); break;\n                    }\n                    updateAll(currentVal, 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    if(isChecked) { runProjectionAnimation(); } else { hideProjection(); }\n                });\n\n                dom.interactionModeToggle.addEventListener('change', e => toggleInteractionMode(e.target.checked));\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>\n```\nPerform an exhaustive, uncompromising final review and polish as per your 'CodeValidator OmegaPrime' persona and system instructions. Scrutinize every conceivable aspect: functionality (including all edge cases), bug eradication, styling and layout precision, flawless responsiveness, universal accessibility (WCAG 2.1 AA+), peak performance, code quality, and security best practices. Ensure all features are 100% complete, utterly intuitive, and any underdeveloped or unrefined aspects are fully addressed to an absolutely production-PERFECT standard. The output must be the final, polished, complete, standalone HTML file ONLY. NO OTHER TEXT.",
          "retryAttempt": 0,
          "generatedHtml": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Interactive Unit Circle & Hyperbola Explorer</title>\n    <meta name=\"description\" content=\"An interactive visualization showing the bidirectional relationship between circular (sec, tan) and hyperbolic (cosh, sinh) trigonometric functions via the Gudermannian function.\">\n    <style>\n        :root {\n            --bg-color: #121826;\n            --surface-color: #1a2233;\n            --primary-color: #82aaff;\n            --secondary-color: #c792ea;\n            --accent-color: #ffcb6b;\n            --green-color: #c3e88d;\n            --red-color: #ff5370;\n            --text-color: #c0c5ce;\n            --text-muted-color: #808a9d;\n            --border-color: #333d52;\n            --highlight-bg: color-mix(in srgb, var(--primary-color) 15%, transparent);\n\n            --font-sans: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji';\n            --font-mono: 'SF Mono', 'Fira Code', 'Menlo', 'Monaco', monospace;\n\n            --shadow-sm: 0 2px 4px rgba(0,0,0,0.2);\n            --shadow-md: 0 4px 8px rgba(0,0,0,0.3);\n            --border-radius: 8px;\n            --transition-fast: 0.2s ease-in-out;\n            --transition-normal: 0.3s ease-in-out;\n            --transition-slow: 0.6s ease-in-out;\n        }\n\n        *, *::before, *::after {\n            box-sizing: border-box;\n            margin: 0;\n            padding: 0;\n        }\n\n        html {\n            scroll-behavior: smooth;\n        }\n\n        body {\n            font-family: var(--font-sans);\n            background-color: var(--bg-color);\n            color: var(--text-color);\n            line-height: 1.6;\n            display: flex;\n            flex-direction: column;\n            min-height: 100vh;\n            transition: background-color var(--transition-normal);\n        }\n        \n        .container {\n            width: 100%;\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 1.5rem;\n        }\n\n        header {\n            text-align: center;\n            padding-bottom: 1rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        header h1 {\n            font-size: clamp(1.75rem, 5vw, 2.5rem);\n            color: var(--primary-color);\n            font-weight: 600;\n        }\n        \n        header p {\n            font-size: clamp(0.9rem, 2.5vw, 1.1rem);\n            color: var(--text-muted-color);\n            max-width: 800px;\n            margin: 0.5rem auto 0;\n        }\n\n        main {\n            flex-grow: 1;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            margin-top: 1.5rem;\n        }\n\n        .layout-grid {\n            display: grid;\n            grid-template-columns: minmax(0, 2fr) minmax(320px, 1fr);\n            gap: 2rem;\n            width: 100%;\n            align-items: start;\n            animation: fadeIn 0.6s 0.2s ease-out backwards;\n        }\n\n        .visualization-container {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1rem;\n            box-shadow: var(--shadow-md);\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        \n        #geometry-svg {\n            width: 100%;\n            height: auto;\n            aspect-ratio: 1 / 1;\n            max-height: 75vh;\n            overflow: visible;\n            touch-action: none;\n            cursor: crosshair;\n            border-radius: 4px;\n        }\n        #geometry-svg:focus-visible {\n            outline: 3px solid var(--accent-color);\n            outline-offset: 4px;\n        }\n\n        #geometry-svg.is-dragging { cursor: grabbing; }\n\n        #viz-caption {\n            font-size: 0.9rem;\n            color: var(--text-muted-color);\n            margin-top: 0.75rem;\n            text-align: center;\n            min-height: 2.7rem; /* Prevent layout shift on text change */\n        }\n\n        .sidebar {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .panel {\n            background-color: var(--surface-color);\n            border-radius: var(--border-radius);\n            padding: 1.5rem;\n            box-shadow: var(--shadow-sm);\n        }\n\n        .panel h2 {\n            font-size: 1.25rem;\n            color: var(--secondary-color);\n            margin-bottom: 1rem;\n            padding-bottom: 0.5rem;\n            border-bottom: 1px solid var(--border-color);\n        }\n\n        .controls-group {\n            display: flex;\n            flex-direction: column;\n            gap: 1.5rem;\n        }\n\n        .control-item {\n            display: flex;\n            flex-direction: column;\n            gap: 0.5rem;\n        }\n        \n        .control-item.toggle-switch {\n            flex-direction: row;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .control-item label {\n            font-weight: 500;\n            color: var(--text-color);\n            padding-right: 1rem;\n            transition: color var(--transition-fast);\n        }\n        \n        .angle-input-wrapper {\n            display: flex;\n            align-items: center;\n            gap: 0.75rem;\n        }\n\n        input[type=\"number\"], input[type=\"range\"], button {\n            transition: opacity var(--transition-fast), visibility var(--transition-fast), background-color var(--transition-fast), color var(--transition-fast);\n        }\n        .control-item.is-disabled { opacity: 0.6; }\n        .control-item.is-disabled label { color: var(--text-muted-color); }\n        .control-item.is-disabled input, .control-item.is-disabled button { pointer-events: none; }\n        \n        #angle-input {\n            width: 70px;\n            background-color: var(--bg-color);\n            border: 1px solid var(--border-color);\n            color: var(--accent-color);\n            font-family: var(--font-mono);\n            padding: 0.3rem 0.5rem;\n            border-radius: 4px;\n            text-align: right;\n            font-size: 1rem;\n            transition: border-color var(--transition-fast), outline-color var(--transition-fast);\n        }\n        #angle-input:focus-visible { outline: 2px solid var(--accent-color); border-color: var(--accent-color); }\n        #angle-input::-webkit-outer-spin-button,\n        #angle-input::-webkit-inner-spin-button { -webkit-appearance: none; margin: 0; }\n        #angle-input[type=number] { -moz-appearance: textfield; }\n        #angle-input:disabled { background-color: var(--border-color); cursor: not-allowed; }\n        \n        input[type=\"range\"] {\n            -webkit-appearance: none; appearance: none;\n            flex-grow: 1; height: 8px;\n            background: var(--border-color);\n            border-radius: 5px; outline: none; cursor: pointer;\n        }\n        input[type=\"range\"]:disabled { cursor: not-allowed; }\n        input[type=\"range\"]::-webkit-slider-thumb {\n            -webkit-appearance: none; appearance: none;\n            width: 20px; height: 20px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n            width: 18px; height: 18px;\n            background: var(--primary-color);\n            border-radius: 50%; border: 2px solid var(--surface-color);\n            transition: background var(--transition-fast);\n        }\n        input[type=\"range\"]:hover:not(:disabled)::-webkit-slider-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-webkit-slider-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:hover:not(:disabled)::-moz-range-thumb, input[type=\"range\"]:focus-visible:not(:disabled)::-moz-range-thumb { background: var(--accent-color); }\n        input[type=\"range\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 4px; border-radius: 5px; }\n        input[type=\"range\"]:disabled::-webkit-slider-thumb { background: var(--text-muted-color); }\n        input[type=\"range\"]:disabled::-moz-range-thumb { background: var(--text-muted-color); }\n        \n        .play-pause-btn {\n            background-color: var(--primary-color); color: var(--bg-color);\n            border: none; padding: 0.5rem 1rem;\n            border-radius: var(--border-radius); cursor: pointer;\n            font-weight: 600; font-size: 1rem;\n            transition: background-color var(--transition-fast), transform var(--transition-fast);\n            display: flex; align-items: center; justify-content: center; gap: 0.5rem;\n        }\n        .play-pause-btn:hover:not(:disabled) { background-color: var(--accent-color); }\n        .play-pause-btn:active:not(:disabled) { transform: scale(0.98); }\n        .play-pause-btn:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        .play-pause-btn:disabled { background-color: var(--border-color); color: var(--text-muted-color); cursor: not-allowed; opacity: 0.6; }\n\n        .focus-mode-toggle {\n            display: grid;\n            grid-template-columns: 1fr 1fr 1fr;\n            border: 1px solid var(--border-color);\n            border-radius: 6px;\n            overflow: hidden;\n        }\n        .focus-mode-toggle button {\n            background: transparent; border: none; color: var(--text-muted-color);\n            padding: 0.4rem; font-size: 0.9rem; font-weight: 500; cursor: pointer;\n            transition: background-color var(--transition-fast), color var(--transition-fast);\n            border-left: 1px solid var(--border-color);\n        }\n        .focus-mode-toggle button:first-child { border-left: none; }\n        .focus-mode-toggle button:hover { background-color: color-mix(in srgb, var(--bg-color) 50%, transparent); }\n        .focus-mode-toggle button.active { background-color: var(--primary-color); color: var(--bg-color); font-weight: 700; }\n        .focus-mode-toggle button:focus-visible { z-index: 1; outline: 2px solid var(--accent-color); outline-offset: -2px; }\n        \n        input[type=\"checkbox\"][role=\"switch\"] {\n            -webkit-appearance: none; appearance: none;\n            position: relative;\n            width: 48px; height: 26px;\n            background-color: var(--border-color);\n            border-radius: 13px;\n            cursor: pointer;\n            flex-shrink: 0;\n            transition: background-color var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]::after {\n            content: ''; position: absolute;\n            top: 3px; left: 3px;\n            width: 20px; height: 20px;\n            background-color: var(--surface-color);\n            border-radius: 50%;\n            transition: transform var(--transition-fast);\n        }\n        input[type=\"checkbox\"][role=\"switch\"]:checked { background-color: var(--primary-color); }\n        input[type=\"checkbox\"][role=\"switch\"]:checked::after { transform: translateX(22px); }\n        input[type=\"checkbox\"][role=\"switch\"]:focus-visible { outline: 2px solid var(--accent-color); outline-offset: 2px; }\n        input[type=\"checkbox\"][role=\"switch\"]:disabled { background-color: var(--border-color); cursor: not-allowed; opacity: 0.6; }\n        \n        .data-panel .data-grid { display: grid; grid-template-columns: 1fr; gap: 1.25rem; margin-top: 1.25rem; }\n        .data-group { transition: opacity var(--transition-normal); }\n        .data-group h3 { font-size: 1rem; font-weight: 600; color: var(--text-color); margin-bottom: 0.5rem; }\n        .data-list { display: grid; grid-template-columns: auto 1fr; gap: 0.5rem 1rem; font-family: var(--font-mono); font-size: 0.95rem; }\n        .data-list dt, .data-list dd { padding: 0.2rem 0.4rem; border-radius: 4px; transition: background-color var(--transition-fast); }\n        .data-list dt { color: var(--text-muted-color); text-align: right; white-space: nowrap; }\n        .data-list dd { font-weight: 500; color: var(--text-color); overflow-wrap: break-word; }\n        \n        .dd-cos { color: var(--primary-color); } .dd-sin { color: var(--secondary-color); }\n        .dd-sec, .dd-cosh { color: var(--red-color); } .dd-tan, .dd-sinh { color: var(--green-color); }\n        .dd-p { color: var(--accent-color); } .dd-area-circ { color: var(--primary-color); } .dd-area-hyper { color: var(--accent-color); }\n\n        .connection-highlight {\n            font-weight: 700;\n            text-shadow: 0 0 8px var(--red-color), 0 0 5px var(--red-color);\n        }\n        .connection-highlight.green {\n            text-shadow: 0 0 8px var(--green-color), 0 0 5px var(--green-color);\n        }\n\n        .explanation-panel summary {\n            cursor: pointer; font-weight: 600;\n            color: var(--secondary-color); font-size: 1.25rem;\n            position: relative; padding-left: 1.5rem;\n            transition: color var(--transition-fast); list-style: none;\n        }\n        .explanation-panel summary::-webkit-details-marker { display: none; }\n        .explanation-panel summary::before {\n            content: 'âº'; position: absolute; left: 0; top: 50%;\n            transform: translateY(-50%) rotate(0deg); font-size: 1.5rem;\n            transition: transform var(--transition-normal);\n        }\n        .explanation-panel[open] > summary::before { transform: translateY(-50%) rotate(90deg); }\n        .explanation-panel summary:hover, .explanation-panel summary:focus-visible { color: var(--accent-color); }\n        .explanation-panel summary:focus-visible { outline: none; }\n        .explanation-panel[open] > summary { margin-bottom: 1rem; }\n        .explanation-panel p { margin-bottom: 1em; color: var(--text-muted-color); }\n        .explanation-panel p:last-child { margin-bottom: 0; }\n        .explanation-panel code { font-family: var(--font-mono); font-size: 0.9em; background-color: var(--bg-color); padding: 0.2rem 0.4rem; border-radius: 4px; color: var(--accent-color); }\n        \n        /* --- SVG Styles --- */\n        .svg-bg { fill: none; }\n        .svg-grid-line { stroke: var(--border-color); stroke-width: 0.01; }\n        .svg-axis { stroke: var(--text-muted-color); stroke-width: 0.02; }\n        .svg-unit-circle, .svg-unit-hyperbola { stroke-width: 0.03; fill: none; transition: opacity var(--transition-normal); }\n        .svg-unit-circle { stroke: var(--primary-color); }\n        .svg-unit-hyperbola { stroke: var(--secondary-color); stroke-dasharray: 0.1, 0.1; }\n        .is-near-asymptote .svg-unit-hyperbola, .is-near-asymptote .hyperbolic-element { opacity: 0.2; }\n        .is-near-asymptote .svg-label-sec-cosh, .is-near-asymptote .svg-label-tan-sinh { opacity: 0.2; }\n\n        .svg-guideline { stroke: var(--text-muted-color); stroke-width: 0.015; stroke-dasharray: 0.05, 0.05; transition: opacity var(--transition-normal); }\n        .svg-arc-theta { fill: var(--primary-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        .svg-area-hyperbolic { fill: var(--accent-color); opacity: 0.2; transition: opacity var(--transition-normal); }\n        \n        .svg-dynamic-line { transition: opacity var(--transition-fast); }\n        .svg-point { stroke: var(--bg-color); stroke-width: 0.03; r: 0.06; transition: fill var(--transition-fast), opacity var(--transition-normal), r var(--transition-fast), cursor var(--transition-fast); }\n        #svg-point-circle { fill: var(--primary-color); cursor: grab; }\n        #svg-point-hyperbola { fill: var(--secondary-color); cursor: default; }\n        \n        body.inverse-interaction-mode #svg-point-circle { cursor: default; }\n        body.inverse-interaction-mode #svg-point-hyperbola { cursor: grab; }\n        #svg-point-circle:active, body.inverse-interaction-mode #svg-point-hyperbola:active { cursor: grabbing; fill: var(--accent-color); r: 0.08; }\n        \n        .svg-label, .svg-axis-label { font-family: var(--font-mono); fill: var(--text-color); paint-order: stroke; stroke: var(--surface-color); stroke-width: 0.04em; stroke-linejoin: round; pointer-events: none; transition: opacity var(--transition-normal), transform var(--transition-fast), fill var(--transition-fast); }\n        .svg-label { font-size: 0.15px; }\n        .svg-axis-label { font-size: 0.12px; fill: var(--text-muted-color); }\n\n        .svg-label-cos { fill: var(--primary-color); } .svg-label-sin { fill: var(--secondary-color); }\n        .svg-label-sec-cosh { fill: var(--red-color); } .svg-label-tan-sinh { fill: var(--green-color); }\n        .svg-label-theta { fill: var(--primary-color); }\n        \n        .svg-projection-line { stroke: var(--accent-color); stroke-width: 0.03; stroke-dasharray: 0; stroke-dashoffset: 0; opacity: 0; pointer-events: none; transition: stroke-dashoffset var(--transition-slow), opacity var(--transition-fast); }\n        .svg-projection-line.visible { opacity: 0.8; }\n        \n        .svg-projection-anim-label { font-size: 0.13px; opacity: 0; transition: opacity 0.2s ease-in-out; pointer-events: none; }\n        .svg-projection-anim-label.visible { opacity: 1; }\n\n        @keyframes fadeIn { from { opacity: 0; transform: translateY(8px); } to { opacity: 1; transform: translateY(0); } }\n        @keyframes pulse-once-highlight { 50% { stroke-width: 0.08; fill: var(--accent-color); } }\n        .pulse-once-anim { animation: pulse-once-highlight 0.5s ease-out; }\n        @keyframes pulse-highlight-svg { 50% { stroke-width: 0.07; } }\n        .is-highlighted-svg { animation: pulse-highlight-svg 0.3s ease-out; stroke-width: 0.07; }\n        #svg-arc-theta.is-highlighted-svg, #svg-area-hyperbolic.is-highlighted-svg { stroke-width: initial; opacity: 0.45; }\n        .is-highlighted-data { background-color: var(--highlight-bg); }\n        @keyframes pulse-dynamic-svg { 0% { stroke-width: 0.03; } 50% { stroke-width: 0.08; } 100% { stroke-width: 0.03; } }\n        @keyframes pulse-dynamic-data { 0%, 100% { transform: scale(1); } 50% { transform: scale(1.05); } }\n        .pulse-anim-svg { animation: pulse-dynamic-svg 0.4s ease-in-out; }\n        .pulse-anim-data { animation: pulse-dynamic-data 0.4s ease-in-out; display: inline-block; }\n        @keyframes pulse-focus-point { 50% { stroke: var(--accent-color); stroke-width: 0.1; } }\n        body:not(.inverse-interaction-mode) #geometry-svg:focus-visible #svg-point-circle,\n        body.inverse-interaction-mode #geometry-svg:focus-visible #svg-point-hyperbola {\n            animation: pulse-focus-point 1.2s ease-in-out infinite;\n        }\n\n        body.focus-circular .hyperbolic-element,\n        body.focus-hyperbolic .circular-element { opacity: 0; pointer-events: none; transition: opacity var(--transition-normal); }\n        \n        footer { text-align: center; padding: 1.5rem; margin-top: 2rem; border-top: 1px solid var(--border-color); color: var(--text-muted-color); font-size: 0.9rem; }\n\n        @media (prefers-reduced-motion: reduce) {\n            html { scroll-behavior: auto; }\n            *, *::before, *::after {\n                animation-delay: -1ms !important;\n                animation-duration: 1ms !important;\n                animation-iteration-count: 1 !important;\n                background-attachment: scroll !important;\n                scroll-behavior: auto !important;\n                transition-duration: 0s !important;\n                transition-delay: 0s !important;\n            }\n        }\n\n        @media (max-width: 1024px) { .layout-grid { grid-template-columns: 1fr; } }\n        @media (min-width: 768px) { .data-panel .data-grid { grid-template-columns: 1fr 1fr; gap: 1.25rem 2rem; } }\n        @media (max-width: 640px) {\n            .container { padding: 1rem; }\n            .panel { padding: 1rem; }\n            .angle-input-wrapper { flex-direction: column; align-items: stretch; gap: 0.5rem; }\n            #angle-input { width: 100%; text-align: center; }\n        }\n    </style>\n</head>\n<body class=\"focus-connected\">\n    <div class=\"container\">\n        <header>\n            <h1>Interactive Unit Circle & Hyperbola</h1>\n            <p>Explore the profound connection between circular and hyperbolic trigonometry. Drag a point or use the controls to see how <code class=\"connection-highlight\">sec(Î¸) = cosh(p)</code> and <code class=\"connection-highlight green\">tan(Î¸) = sinh(p)</code>.</p>\n        </header>\n\n        <main>\n            <div class=\"layout-grid\">\n                <figure class=\"visualization-container\" aria-labelledby=\"viz-caption\">\n                    <svg id=\"geometry-svg\" viewBox=\"-3 -3 6 6\" preserveAspectRatio=\"xMidYMid meet\" vector-effect=\"non-scaling-stroke\" tabindex=\"0\" aria-label=\"Interactive Diagram. Use arrow keys to adjust the angle.\">\n                        <title>Unit Circle and Hyperbola Visualization</title>\n                        <desc>An interactive diagram where a changing angle Î¸ on a unit circle corresponds to a parameter p on a unit hyperbola. Lines representing sec(Î¸) and cosh(p) are shown to be equal, as are tan(Î¸) and sinh(p). The relationship can be explored by dragging either the circle point or the hyperbola point.</desc>\n                        \n                        <defs>\n                            <marker id=\"arrowhead\" viewBox=\"0 0 10 10\" refX=\"5\" refY=\"5\" markerWidth=\"6\" markerHeight=\"6\" orient=\"auto-start-reverse\" fill=\"var(--text-muted-color)\">\n                                <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n                            </marker>\n                        </defs>\n\n                        <rect class=\"svg-bg\" x=\"-3\" y=\"-3\" width=\"6\" height=\"6\" />\n                        <g id=\"svg-grid\"></g>\n                        <path id=\"svg-unit-hyperbola\" class=\"svg-unit-hyperbola hyperbolic-element\"></path>\n                        <circle class=\"svg-unit-circle circular-element\" cx=\"0\" cy=\"0\" r=\"1\" />\n                        \n                        <line class=\"svg-axis\" x1=\"-3\" y1=\"0\" x2=\"3\" y2=\"0\" marker-end=\"url(#arrowhead)\" />\n                        <line class=\"svg-axis\" x1=\"0\" y1=\"3\" x2=\"0\" y2=\"-3\" marker-end=\"url(#arrowhead)\" />\n                        \n                        <g id=\"svg-axis-labels\" text-anchor=\"middle\">\n                            <text class=\"svg-axis-label\" x=\"1\" y=\"-0.15\">1</text><text class=\"svg-axis-label\" x=\"2\" y=\"-0.15\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-1\" y=\"-0.15\">-1</text><text class=\"svg-axis-label\" x=\"-2\" y=\"-0.15\">-2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"-1\" dominant-baseline=\"central\">1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"-2\" dominant-baseline=\"central\">2</text>\n                            <text class=\"svg-axis-label\" x=\"-0.15\" y=\"1\" dominant-baseline=\"central\">-1</text><text class=\"svg-axis-label\" x=\"-0.15\" y=\"2\" dominant-baseline=\"central\">-2</text>\n                        </g>\n\n                        <g id=\"svg-dynamic-elements\">\n                            <path id=\"svg-arc-theta\" class=\"svg-arc-theta circular-element\" data-highlight=\"area-circ-group\"></path>\n                            <path id=\"svg-area-hyperbolic\" class=\"svg-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\"></path>\n\n                            <line id=\"svg-guideline-radial\" class=\"svg-guideline\" />\n                            <line id=\"svg-guideline-tan\" class=\"svg-guideline circular-element\" />\n                            <line id=\"svg-guideline-hyperbola\" class=\"svg-guideline\" />\n\n                            <path id=\"svg-projection-radial\" class=\"svg-projection-line\"></path>\n                            <path id=\"svg-projection-horizontal\" class=\"svg-projection-line\"></path>\n                            \n                            <line id=\"svg-line-cos\" class=\"svg-dynamic-line svg-line-cos circular-element\" data-highlight=\"cos-group\" />\n                            <line id=\"svg-line-sin\" class=\"svg-dynamic-line svg-line-sin circular-element\" data-highlight=\"sin-group\" />\n                            <line id=\"svg-line-tan-sinh\" class=\"svg-dynamic-line svg-line-tan-sinh\" data-highlight=\"tan-sinh-group\" />\n                            <line id=\"svg-line-sec-cosh\" class=\"svg-dynamic-line svg-line-sec-cosh\" data-highlight=\"sec-cosh-group\" />\n                            \n                            <circle id=\"svg-point-circle\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-tangent\" class=\"svg-point circular-element\" />\n                            <circle id=\"svg-point-hyperbola\" class=\"svg-point hyperbolic-element\" />\n                            \n                            <text id=\"svg-label-theta\" class=\"svg-label svg-label-theta circular-element\" text-anchor=\"middle\">Î¸</text>\n                            <text id=\"svg-label-cos\" class=\"svg-label svg-label-cos circular-element\" text-anchor=\"middle\">cos</text>\n                            <text id=\"svg-label-sin\" class=\"svg-label svg-label-sin circular-element\" text-anchor=\"middle\">sin</text>\n                            <text id=\"svg-label-tan-sinh\" class=\"svg-label svg-label-tan-sinh\" text-anchor=\"start\">tan=sinh</text>\n                            <text id=\"svg-label-sec-cosh\" class=\"svg-label svg-label-sec-cosh\" text-anchor=\"middle\">sec=cosh</text>\n\n                            <text id=\"svg-label-proj-sec\" class=\"svg-label svg-projection-anim-label svg-label-sec-cosh\" text-anchor=\"middle\">sec(Î¸)</text>\n                            <text id=\"svg-label-proj-tan\" class=\"svg-label svg-projection-anim-label svg-label-tan-sinh\" text-anchor=\"start\">tan(Î¸)</text>\n                        </g>\n                    </svg>\n                    <figcaption id=\"viz-caption\">Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.</figcaption>\n                </figure>\n\n                <aside class=\"sidebar\">\n                    <section class=\"panel controls-panel\" aria-labelledby=\"controls-heading\">\n                        <h2 id=\"controls-heading\">Controls</h2>\n                        <div class=\"controls-group\">\n                            <div class=\"control-item\" id=\"angle-control-group\">\n                                <label for=\"angle-slider\">Angle (Î¸)</label>\n                                <div class=\"angle-input-wrapper\">\n                                    <input type=\"number\" id=\"angle-input\" value=\"45.0\" min=\"-89.9\" max=\"89.9\" step=\"0.1\" aria-label=\"Precise angle in degrees\">\n                                    <input type=\"range\" id=\"angle-slider\" name=\"angle\" min=\"-89.9\" max=\"89.9\" value=\"45\" step=\"0.1\" aria-label=\"Angle slider\">\n                                </div>\n                            </div>\n                            <div class=\"control-item\">\n                                <label id=\"focus-mode-label\">Focus Mode</label>\n                                <div class=\"focus-mode-toggle\" role=\"radiogroup\" aria-labelledby=\"focus-mode-label\">\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"true\" data-mode=\"connected\">Connected</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"circular\">Circular</button>\n                                    <button type=\"button\" role=\"radio\" aria-checked=\"false\" data-mode=\"hyperbolic\">Hyperbolic</button>\n                                </div>\n                            </div>\n                             <div class=\"control-item toggle-switch\">\n                               <label for=\"interaction-mode-toggle\" id=\"interaction-mode-label\">Control from Hyperbola</label>\n                               <input type=\"checkbox\" id=\"interaction-mode-toggle\" role=\"switch\" aria-labelledby=\"interaction-mode-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item toggle-switch\">\n                               <label for=\"projection-toggle\" id=\"projection-label\">Guided Projection</label>\n                               <input type=\"checkbox\" id=\"projection-toggle\" role=\"switch\" aria-labelledby=\"projection-label\" aria-checked=\"false\">\n                            </div>\n                            <div class=\"control-item\">\n                                <label for=\"speed-slider\">Animation Speed</label>\n                                <input type=\"range\" id=\"speed-slider\" min=\"0.1\" max=\"1.5\" value=\"0.5\" step=\"0.1\" aria-label=\"Animation speed\">\n                            </div>\n                             <button id=\"play-pause-btn\" type=\"button\" class=\"play-pause-btn\" aria-label=\"Play angle animation\">\n                                <svg id=\"play-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M8 5v14l11-7z\"></path></svg>\n                                <svg id=\"pause-icon\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"currentColor\" style=\"display: none;\" aria-hidden=\"true\" focusable=\"false\"><path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"></path></svg>\n                                <span id=\"play-pause-text\">Play</span>\n                            </button>\n                        </div>\n                    </section>\n                    \n                    <details class=\"panel explanation-panel\" id=\"explanation\" open>\n                        <summary>What am I looking at?</summary>\n                        <p>This visualization reveals the deep link between circular functions (like <code>tan</code>, <code>sec</code>) and hyperbolic functions (<code>sinh</code>, <code>cosh</code>) through the <strong>Gudermannian function</strong>.</p>\n                        <p>The angle <code>Î¸</code> on the unit circle defines a parameter <code>p</code> on the hyperbola such that <code>sec(Î¸) = cosh(p)</code> and <code>tan(Î¸) = sinh(p)</code>. This parameter <code>p</code>, known as the hyperbolic angle, is related to <code>Î¸</code> by <code>Î¸ = gd(p)</code>.</p>\n                        <p>Crucially, the area of the circular sector is <code>Î¸/2</code>, and the area of the hyperbolic sector is <code>p/2</code>. Hover over the area values below to see the corresponding shapes highlight.</p>\n                    </details>\n\n                    <section class=\"panel data-panel\" aria-labelledby=\"data-heading\" aria-live=\"polite\" aria-atomic=\"true\">\n                        <h2 id=\"data-heading\">Live Values</h2>\n                        <div class=\"data-grid\">\n                            <div class=\"data-group circular-element\">\n                                <h3>Circular Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">sec(Î¸) =</dt>\n                                    <dd id=\"val-sec\" class=\"dd-sec connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">tan(Î¸) =</dt>\n                                    <dd id=\"val-tan\" class=\"dd-tan connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"cos-group\">cos(Î¸) =</dt>\n                                    <dd id=\"val-cos\" class=\"dd-cos\" data-highlight=\"cos-group\">0.707</dd>\n                                    <dt data-highlight=\"sin-group\">sin(Î¸) =</dt>\n                                    <dd id=\"val-sin\" class=\"dd-sin\" data-highlight=\"sin-group\">0.707</dd>\n                                </dl>\n                            </div>\n                            <div class=\"data-group hyperbolic-element\">\n                                <h3>Hyperbolic Functions</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"sec-cosh-group\">cosh(p) =</dt>\n                                    <dd id=\"val-cosh\" class=\"dd-cosh connection-highlight\" data-highlight=\"sec-cosh-group\">1.414</dd>\n                                    <dt data-highlight=\"tan-sinh-group\">sinh(p) =</dt>\n                                    <dd id=\"val-sinh\" class=\"dd-sinh connection-highlight green\" data-highlight=\"tan-sinh-group\">1.000</dd>\n                                    <dt data-highlight=\"p-group\">p =</dt>\n                                    <dd id=\"val-p\" class=\"dd-p\" data-highlight=\"p-group\">0.881</dd>\n                                </dl>\n                            </div>\n                             <div class=\"data-group\">\n                                <h3>Sector Areas</h3>\n                                <dl class=\"data-list\">\n                                    <dt data-highlight=\"area-circ-group\" class=\"circular-element\">Î¸/2 =</dt>\n                                    <dd id=\"val-area-circular\" class=\"dd-area-circ circular-element\" data-highlight=\"area-circ-group\">0.393</dd>\n                                    <dt data-highlight=\"area-hyper-group\" class=\"hyperbolic-element\">p/2 =</dt>\n                                    <dd id=\"val-area-hyperbolic\" class=\"dd-area-hyperbolic hyperbolic-element\" data-highlight=\"area-hyper-group\">0.441</dd>\n                                </dl>\n                            </div>\n                        </div>\n                    </section>\n                </aside>\n            </div>\n        </main>\n        <footer>\n            <p>Interactive Visualization &copy; 2024. A demonstration of robust web engineering.</p>\n        </footer>\n    </div>\n    \n    <script>\n        'use strict';\n\n        document.addEventListener('DOMContentLoaded', () => {\n            // --- STATE & CONSTANTS ---\n            let isPlaying = false;\n            let isDragging = false;\n            let isInverseMode = false;\n            let isProjectionAnimating = false;\n            let animationFrameId = null;\n            let animationDirection = 1;\n            let currentFocusMode = 'connected';\n            const RAD_TO_DEG = 180 / Math.PI;\n            const DEG_TO_RAD = Math.PI / 180;\n            const ASYMPTOTE_THRESHOLD = 89.9;\n            const FADE_START_ANGLE = 88.0;\n\n            // --- DOM ELEMENTS CACHE ---\n            const dom = {\n                body: document.body,\n                svg: document.getElementById('geometry-svg'),\n                slider: document.getElementById('angle-slider'),\n                angleInput: document.getElementById('angle-input'),\n                angleControlGroup: document.getElementById('angle-control-group'),\n                speedSlider: document.getElementById('speed-slider'),\n                projectionToggle: document.getElementById('projection-toggle'),\n                interactionModeToggle: document.getElementById('interaction-mode-toggle'),\n                playPauseBtn: document.getElementById('play-pause-btn'),\n                playIcon: document.getElementById('play-icon'),\n                pauseIcon: document.getElementById('pause-icon'),\n                playPauseText: document.getElementById('play-pause-text'),\n                layoutGrid: document.querySelector('.layout-grid'),\n                focusModeToggle: document.querySelector('.focus-mode-toggle'),\n                vizCaption: document.getElementById('viz-caption'),\n                data: {\n                    p: document.getElementById('val-p'), sec: document.getElementById('val-sec'), tan: document.getElementById('val-tan'),\n                    cos: document.getElementById('val-cos'), sin: document.getElementById('val-sin'), cosh: document.getElementById('val-cosh'),\n                    sinh: document.getElementById('val-sinh'), areaCircular: document.getElementById('val-area-circular'), areaHyperbolic: document.getElementById('val-area-hyperbolic'),\n                },\n                svgElements: {\n                    unitHyperbola: document.getElementById('svg-unit-hyperbola'),\n                    arcTheta: document.getElementById('svg-arc-theta'), areaHyperbolic: document.getElementById('svg-area-hyperbolic'),\n                    projections: { radial: document.getElementById('svg-projection-radial'), horizontal: document.getElementById('svg-projection-horizontal') },\n                    guidelines: { radial: document.getElementById('svg-guideline-radial'), tan: document.getElementById('svg-guideline-tan'), hyperbola: document.getElementById('svg-guideline-hyperbola') },\n                    lines: { cos: document.getElementById('svg-line-cos'), sin: document.getElementById('svg-line-sin'), tanSinh: document.getElementById('svg-line-tan-sinh'), secCosh: document.getElementById('svg-line-sec-cosh') },\n                    points: { circle: document.getElementById('svg-point-circle'), tangent: document.getElementById('svg-point-tangent'), hyperbola: document.getElementById('svg-point-hyperbola') },\n                    labels: { theta: document.getElementById('svg-label-theta'), cos: document.getElementById('svg-label-cos'), sin: document.getElementById('svg-label-sin'), tanSinh: document.getElementById('svg-label-tan-sinh'), secCosh: document.getElementById('svg-label-sec-cosh'), projSec: document.getElementById('svg-label-proj-sec'), projTan: document.getElementById('svg-label-proj-tan') }\n                }\n            };\n            \n            // --- UTILITY FUNCTIONS ---\n            const format = (num) => (num === undefined || !isFinite(num)) ? 'â' : num.toFixed(3);\n            const setAttr = (el, attrs) => Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, String(value)));\n            const clamp = (num, min, max) => Math.min(Math.max(num, min), max);\n            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n            // --- CORE LOGIC ---\n            function updateAll(degrees, source = 'internal') {\n                const angleDegrees = clamp(parseFloat(degrees) || 0, -ASYMPTOTE_THRESHOLD, ASYMPTOTE_THRESHOLD);\n                const angleStr = angleDegrees.toFixed(1);\n\n                if (dom.slider.value !== angleStr) dom.slider.value = angleStr;\n                if (dom.angleInput.value !== angleStr) dom.angleInput.value = angleStr;\n\n                updateVisualization(angleDegrees);\n                if (source === 'user' || source === 'drag') triggerPulse();\n                if ((source === 'user' || source === 'drag-end') && !isPlaying) updateURLHash(angleDegrees);\n            }\n            \n            function updateVisualization(angleDegrees) {\n                const angleAbs = Math.abs(angleDegrees);\n                dom.svg.classList.toggle('is-near-asymptote', angleAbs > FADE_START_ANGLE);\n\n                const theta = angleDegrees * DEG_TO_RAD;\n                const cos_t = Math.cos(theta);\n                const sin_t = Math.sin(theta);\n                \n                const isAtAsymptote = angleAbs >= ASYMPTOTE_THRESHOLD;\n                const tan_t = isAtAsymptote ? Infinity * Math.sign(angleDegrees || 1) : Math.tan(theta);\n                const sec_t = isAtAsymptote ? Infinity : 1 / cos_t;\n                \n                const p = Math.asinh(tan_t);\n                const cosh_p = Math.cosh(p);\n                const sinh_p = Math.sinh(p);\n\n                dom.slider.setAttribute('aria-valuetext', `${angleDegrees.toFixed(1)} degrees`);\n                dom.data.p.textContent = format(p); dom.data.sec.textContent = format(sec_t);\n                dom.data.tan.textContent = format(tan_t); dom.data.cos.textContent = format(cos_t);\n                dom.data.sin.textContent = format(sin_t); dom.data.cosh.textContent = format(cosh_p);\n                dom.data.sinh.textContent = format(sinh_p); dom.data.areaCircular.textContent = format(Math.abs(theta / 2));\n                dom.data.areaHyperbolic.textContent = format(Math.abs(p / 2));\n                \n                const points = { \n                    P_origin: {x: 0, y: 0}, P_circle: { x: cos_t, y: -sin_t }, P_cos_axis: { x: cos_t, y: 0 }, P_tan_axis: { x: 1, y: 0 }, \n                    P_tan_tip: { x: 1, y: -tan_t }, P_hyperbola: { x: sec_t, y: -tan_t }, P_sec_axis: { x: sec_t, y: 0 }\n                };\n                dom.svg.dataset.currentPoints = JSON.stringify(points);\n\n                setAttr(dom.svgElements.points.circle, { cx: points.P_circle.x, cy: points.P_circle.y });\n                setAttr(dom.svgElements.lines.cos, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_cos_axis.x, y2: points.P_cos_axis.y });\n                setAttr(dom.svgElements.lines.sin, { x1: points.P_cos_axis.x, y1: points.P_cos_axis.y, x2: points.P_circle.x, y2: points.P_circle.y });\n                \n                const sweepFlag = angleDegrees >= 0 ? 0 : 1;\n                dom.svgElements.arcTheta.setAttribute('d', `M 1 0 A 1 1 0 0 ${sweepFlag} ${points.P_circle.x} ${points.P_circle.y} L 0 0 Z`);\n                \n                if (isFinite(sec_t) && isFinite(tan_t)) {\n                    setAttr(dom.svgElements.points.tangent, { cx: points.P_tan_tip.x, cy: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.points.hyperbola, { cx: points.P_hyperbola.x, cy: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.radial, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.guidelines.tan, { x1: points.P_tan_axis.x, y1: points.P_tan_axis.y, x2: points.P_tan_tip.x, y2: points.P_tan_tip.y });\n                    setAttr(dom.svgElements.guidelines.hyperbola, { x1: points.P_circle.x, y1: points.P_circle.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.tanSinh, { x1: points.P_sec_axis.x, y1: points.P_sec_axis.y, x2: points.P_hyperbola.x, y2: points.P_hyperbola.y });\n                    setAttr(dom.svgElements.lines.secCosh, { x1: points.P_origin.x, y1: points.P_origin.y, x2: points.P_sec_axis.x, y2: points.P_sec_axis.y });\n                }\n                \n                if (isFinite(p) && p !== 0) {\n                    let hyperbolicAreaPath = 'M 0 0 L 1 0 ';\n                    const steps = 60;\n                    for (let i = 1; i <= steps; i++) {\n                        const p_step = p * (i / steps);\n                        hyperbolicAreaPath += `L ${Math.cosh(p_step)} ${-Math.sinh(p_step)} `;\n                    }\n                    hyperbolicAreaPath += 'Z';\n                    dom.svgElements.areaHyperbolic.setAttribute('d', hyperbolicAreaPath);\n                } else {\n                    dom.svgElements.areaHyperbolic.setAttribute('d', '');\n                }\n                \n                updateLabelPositions(theta, cos_t, sin_t, points);\n                updateProjectionPaths(points);\n            }\n            \n            function updateLabelPositions(theta, cos_t, sin_t, points) {\n                const ySign = Math.sign(theta) || 1;\n                const isNearHorizontal = Math.abs(sin_t) < 0.15;\n\n                setAttr(dom.svgElements.labels.theta, { x: 0.4 * Math.cos(theta / 2), y: -0.4 * Math.sin(theta / 2) });\n                setAttr(dom.svgElements.labels.cos, { x: points.P_cos_axis.x / 2, y: ySign * 0.15 });\n                setAttr(dom.svgElements.labels.sin, { x: points.P_circle.x + Math.sign(cos_t || 1) * 0.12, y: points.P_circle.y / 2, 'text-anchor': cos_t < 0 ? 'end' : 'start'});\n                \n                if (isFinite(points.P_sec_axis.x)) {\n                    const secCoshYOffset = isNearHorizontal ? ySign * -0.25 : -0.15;\n                    setAttr(dom.svgElements.labels.secCosh, { x: points.P_sec_axis.x / 2, y: secCoshYOffset });\n                    setAttr(dom.svgElements.labels.tanSinh, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.12 : -0.12), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end'});\n                    setAttr(dom.svgElements.labels.projSec, { x: points.P_sec_axis.x / 2, y: secCoshYOffset - 0.15 });\n                    setAttr(dom.svgElements.labels.projTan, { x: points.P_hyperbola.x + (cos_t > 0 ? 0.15 : -0.15), y: points.P_hyperbola.y / 2, 'text-anchor': cos_t > 0 ? 'start' : 'end' });\n                }\n            }\n            \n            function updateProjectionPaths(points) {\n                if (!isFinite(points.P_hyperbola.x) || !isFinite(points.P_hyperbola.y)) return;\n                const { P_origin, P_tan_tip, P_hyperbola } = points;\n                const { radial, horizontal } = dom.svgElements.projections;\n\n                const radialPath = `M ${P_origin.x} ${P_origin.y} L ${P_tan_tip.x} ${P_tan_tip.y}`;\n                const radialLength = Math.hypot(P_tan_tip.x - P_origin.x, P_tan_tip.y - P_origin.y);\n                setAttr(radial, { d: radialPath, 'stroke-dasharray': radialLength, 'stroke-dashoffset': radialLength });\n                \n                const horizontalPath = `M ${P_tan_tip.x} ${P_tan_tip.y} L ${P_hyperbola.x} ${P_hyperbola.y}`;\n                const horizontalLength = Math.abs(P_hyperbola.x - P_tan_tip.x);\n                setAttr(horizontal, { d: horizontalPath, 'stroke-dasharray': horizontalLength, 'stroke-dashoffset': horizontalLength });\n            }\n\n            function triggerPulse() {\n                const elementsToPulse = [\n                    {el: dom.svgElements.lines.secCosh, class: 'pulse-anim-svg'}, {el: dom.svgElements.lines.tanSinh, class: 'pulse-anim-svg'},\n                    {el: dom.data.sec, class: 'pulse-anim-data'}, {el: dom.data.cosh, class: 'pulse-anim-data'},\n                    {el: dom.data.tan, class: 'pulse-anim-data'}, {el: dom.data.sinh, class: 'pulse-anim-data'},\n                ];\n                elementsToPulse.forEach(item => {\n                    item.el.classList.remove(item.class);\n                    void item.el.offsetWidth;\n                    item.el.classList.add(item.class);\n                });\n            }\n\n            // --- ANIMATION & INTERACTION ---\n            function playLoop() {\n                if (!isPlaying) return;\n                let currentVal = parseFloat(dom.slider.value);\n                const minVal = parseFloat(dom.slider.min);\n                const maxVal = parseFloat(dom.slider.max);\n                if ((currentVal >= maxVal && animationDirection === 1) || (currentVal <= minVal && animationDirection === -1)) {\n                    animationDirection *= -1;\n                }\n                const speed = parseFloat(dom.speedSlider.value);\n                const newVal = currentVal + (speed * animationDirection);\n                updateAll(newVal, 'animation');\n                animationFrameId = requestAnimationFrame(playLoop);\n            }\n\n            function togglePlay(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isPlaying;\n                if (newState === isPlaying) return; \n                isPlaying = newState;\n                dom.playPauseBtn.setAttribute('aria-label', isPlaying ? 'Pause angle animation' : 'Play angle animation');\n                dom.playIcon.style.display = isPlaying ? 'none' : 'block';\n                dom.pauseIcon.style.display = isPlaying ? 'block' : 'none';\n                dom.playPauseText.textContent = isPlaying ? 'Pause' : 'Play';\n                if (isPlaying) {\n                    if(isInverseMode) toggleInteractionMode(false);\n                    animationFrameId = requestAnimationFrame(playLoop);\n                } else {\n                    if (animationFrameId) cancelAnimationFrame(animationFrameId);\n                    animationFrameId = null;\n                    updateURLHash(dom.slider.value);\n                }\n            }\n            \n            function applyFocusMode(mode) {\n                if (mode === currentFocusMode) return;\n                currentFocusMode = mode;\n                dom.body.className = dom.body.className.replace(/focus-\\w+/, `focus-${mode}`);\n                dom.focusModeToggle.querySelectorAll('button').forEach(btn => {\n                    const isActive = btn.dataset.mode === mode;\n                    btn.classList.toggle('active', isActive);\n                    btn.setAttribute('aria-checked', String(isActive));\n                });\n            }\n\n            const svgPoint = dom.svg.createSVGPoint();\n            function getSVGCoordinates(evt) {\n                const touch = evt.touches ? evt.touches[0] : evt;\n                svgPoint.x = touch.clientX;\n                svgPoint.y = touch.clientY;\n                const transformedPoint = svgPoint.matrixTransform(dom.svg.getScreenCTM().inverse());\n                return { x: transformedPoint.x, y: -transformedPoint.y };\n            }\n\n            function handleInteractionStart(e) {\n                const targetId = e.target.id;\n                const isPointInteraction = targetId === 'svg-point-circle' || targetId === 'svg-point-hyperbola';\n                if (isInverseMode && targetId !== 'svg-point-hyperbola' && !isPointInteraction) return;\n                if (!isInverseMode && targetId !== 'svg-point-circle' && !isPointInteraction) return;\n                \n                e.preventDefault();\n                if (isPlaying) togglePlay(false);\n                isDragging = true;\n                dom.svg.classList.add('is-dragging');\n                handleInteractionMove(e);\n                window.addEventListener('mousemove', handleInteractionMove);\n                window.addEventListener('touchmove', handleInteractionMove, { passive: false });\n                window.addEventListener('mouseup', handleInteractionEnd);\n                window.addEventListener('touchend', handleInteractionEnd);\n            }\n            function handleInteractionMove(e) {\n                if (!isDragging) return;\n                e.preventDefault();\n                const coords = getSVGCoordinates(e);\n                let angleRad;\n                if (isInverseMode) {\n                    const p = Math.asinh(coords.y);\n                    angleRad = Math.atan(Math.sinh(p)); // Gudermannian function\n                } else {\n                    angleRad = Math.atan2(coords.y, coords.x);\n                }\n                updateAll(angleRad * RAD_TO_DEG, 'drag');\n            }\n            function handleInteractionEnd() {\n                if (!isDragging) return;\n                isDragging = false;\n                dom.svg.classList.remove('is-dragging');\n                updateAll(dom.slider.value, 'drag-end');\n                window.removeEventListener('mousemove', handleInteractionMove);\n                window.removeEventListener('touchmove', handleInteractionMove);\n                window.removeEventListener('mouseup', handleInteractionEnd);\n                window.removeEventListener('touchend', handleInteractionEnd);\n            }\n\n            function handleHighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.add(el.matches('[class*=\"svg-\"]') ? 'is-highlighted-svg' : 'is-highlighted-data');\n                });\n            }\n            function handleUnhighlight(e) {\n                const highlightId = e.target.dataset.highlight;\n                if (!highlightId) return;\n                document.querySelectorAll(`[data-highlight=\"${highlightId}\"]`).forEach(el => {\n                    el.classList.remove('is-highlighted-svg', 'is-highlighted-data');\n                });\n            }\n\n            async function runProjectionAnimation() {\n                if (isProjectionAnimating) return;\n                isProjectionAnimating = true;\n                dom.projectionToggle.disabled = true;\n\n                const { radial, horizontal } = dom.svgElements.projections;\n                const { secCosh, tanSinh } = dom.svgElements.lines;\n                const { projSec, projTan } = dom.svgElements.labels;\n                \n                radial.classList.add('visible');\n                await sleep(50);\n                radial.style.strokeDashoffset = '0';\n                await sleep(600);\n                \n                secCosh.classList.add('pulse-once-anim');\n                projSec.classList.add('visible');\n                tanSinh.classList.add('pulse-once-anim');\n                projTan.classList.add('visible');\n                await sleep(800);\n                \n                horizontal.classList.add('visible');\n                await sleep(50);\n                horizontal.style.strokeDashoffset = '0';\n                await sleep(1000);\n\n                secCosh.classList.remove('pulse-once-anim');\n                tanSinh.classList.remove('pulse-once-anim');\n                projSec.classList.remove('visible');\n                projTan.classList.remove('visible');\n                isProjectionAnimating = false;\n                if (!dom.projectionToggle.checked) {\n                    hideProjection();\n                }\n                dom.projectionToggle.disabled = false;\n            }\n\n            function hideProjection() {\n                const { radial, horizontal } = dom.svgElements.projections;\n                [radial, horizontal].forEach(el => el.classList.remove('visible'));\n                try {\n                    const points = JSON.parse(dom.svg.dataset.currentPoints || '{}');\n                    updateProjectionPaths(points);\n                } catch(e) { console.error(\"Could not parse points for projection reset.\", e); }\n            }\n            \n            function toggleInteractionMode(forceState) {\n                const newState = typeof forceState === 'boolean' ? forceState : !isInverseMode;\n                if (newState === isInverseMode) return;\n                isInverseMode = newState;\n                dom.body.classList.toggle('inverse-interaction-mode', isInverseMode);\n                dom.interactionModeToggle.checked = isInverseMode;\n                dom.interactionModeToggle.setAttribute('aria-checked', String(isInverseMode));\n                dom.angleControlGroup.classList.toggle('is-disabled', isInverseMode);\n                dom.slider.disabled = isInverseMode;\n                dom.angleInput.disabled = isInverseMode;\n                dom.playPauseBtn.disabled = isInverseMode;\n\n                if (isInverseMode) {\n                    if (isPlaying) togglePlay(false);\n                    dom.vizCaption.textContent = \"Drag the point on the hyperbola to control the diagram.\";\n                } else {\n                    dom.vizCaption.textContent = \"Drag the point on the circle, or use the controls. Select the diagram and use arrow keys for precise control.\";\n                }\n            }\n\n            // --- URL & SETUP ---\n            function updateURLHash(angle) {\n                const newHash = `#theta=${parseFloat(angle).toFixed(1)}`;\n                try { if (window.location.hash !== newHash) { history.replaceState(null, '', newHash); } } \n                catch (e) { console.warn(\"Could not update URL hash:\", e); }\n            }\n\n            function readURLHash() {\n                if (window.location.hash.startsWith('#theta=')) {\n                    const angleFromHash = parseFloat(window.location.hash.substring(7));\n                    if (!isNaN(angleFromHash)) return angleFromHash;\n                }\n                return 45.0;\n            }\n\n            function setup() {\n                const svgNS = 'http://www.w3.org/2000/svg';\n                const gridGroup = dom.svg.querySelector('#svg-grid');\n                const bounds = 3;\n                for (let i = -bounds; i <= bounds; i++) {\n                    if (i === 0) continue;\n                    const vLine = document.createElementNS(svgNS, 'line');\n                    setAttr(vLine, { x1: i, y1: -bounds, x2: i, y2: bounds, class: 'svg-grid-line' }); gridGroup.appendChild(vLine);\n                    const hLine = document.createElementNS(svgNS, 'line');\n                    setAttr(hLine, { x1: -bounds, y1: i, x2: bounds, y2: i, class: 'svg-grid-line' }); gridGroup.appendChild(hLine);\n                }\n                const maxP = 3; const steps = 100; let pathData = '';\n                for (let i = steps; i >= -steps; i--) {\n                    const p = (i / steps) * maxP;\n                    pathData += `${i === steps ? 'M' : 'L'} ${Math.cosh(p)} ${-Math.sinh(p)} `;\n                }\n                dom.svgElements.unitHyperbola.setAttribute('d', pathData);\n\n                dom.slider.addEventListener('input', e => updateAll(e.target.value, 'user'));\n                dom.slider.addEventListener('change', e => updateURLHash(e.target.value));\n                dom.angleInput.addEventListener('change', e => updateAll(e.target.value, 'user'));\n\n                dom.playPauseBtn.addEventListener('click', () => togglePlay());\n                dom.focusModeToggle.addEventListener('click', e => {\n                    const button = e.target.closest('button[role=\"radio\"]');\n                    if(button) applyFocusMode(button.dataset.mode);\n                });\n                dom.focusModeToggle.addEventListener('keydown', e => {\n                    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') return;\n                    e.preventDefault();\n                    const buttons = Array.from(dom.focusModeToggle.querySelectorAll('button[role=\"radio\"]'));\n                    const currentIdx = buttons.findIndex(btn => btn.getAttribute('aria-checked') === 'true');\n                    const nextIdx = (e.key === 'ArrowRight') ? (currentIdx + 1) % buttons.length : (currentIdx - 1 + buttons.length) % buttons.length;\n                    buttons[nextIdx].click();\n                    buttons[nextIdx].focus();\n                });\n                \n                dom.svg.addEventListener('mousedown', handleInteractionStart);\n                dom.svg.addEventListener('touchstart', handleInteractionStart, { passive: false });\n\n                dom.svg.addEventListener('keydown', e => {\n                    const acceptedKeys = ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown', 'PageUp', 'PageDown', 'Home', 'End'];\n                    if (!acceptedKeys.includes(e.key) || isInverseMode) return;\n                    e.preventDefault();\n                    if (isPlaying) togglePlay(false);\n                    let currentVal = parseFloat(dom.slider.value);\n                    let step = e.shiftKey ? 5.0 : (e.key.includes('Page') ? 10.0 : 0.5);\n                    switch(e.key) {\n                        case 'ArrowLeft': case 'ArrowDown': currentVal -= step; break;\n                        case 'ArrowRight': case 'ArrowUp': currentVal += step; break;\n                        case 'Home': currentVal = parseFloat(dom.slider.min); break;\n                        case 'End': currentVal = parseFloat(dom.slider.max); break;\n                    }\n                    updateAll(currentVal, 'user');\n                });\n                \n                dom.projectionToggle.addEventListener('change', e => {\n                    const isChecked = e.target.checked;\n                    e.target.setAttribute('aria-checked', String(isChecked));\n                    if(isChecked) { runProjectionAnimation(); } else { hideProjection(); }\n                });\n\n                dom.interactionModeToggle.addEventListener('change', e => toggleInteractionMode(e.target.checked));\n\n                dom.layoutGrid.addEventListener('mouseover', handleHighlight);\n                dom.layoutGrid.addEventListener('mouseout', handleUnhighlight);\n                dom.layoutGrid.addEventListener('focusin', handleHighlight);\n                dom.layoutGrid.addEventListener('focusout', handleUnhighlight);\n                \n                const initialAngle = readURLHash();\n                updateAll(initialAngle, 'initial');\n                updateURLHash(initialAngle);\n            }\n\n            setup();\n        });\n    </script>\n</body>\n</html>",
          "suggestedFeatures": []
        }
      ],
      "status": "completed",
      "isStopRequested": false
    }
  ],
  "activeMathPipeline": null,
  "activeReactPipeline": null,
  "activePipelineId": 0,
  "globalStatusText": "Ready.",
  "globalStatusClass": "status-idle",
  "customPromptsWebsite": {
    "sys_initialGen": "\n**Persona:**\nYou are 'CodeCrafter Apex', an AI architect of unparalleled skill in frontend engineering. You are recognized industry-wide for generating complete, production-ready, aesthetically superior, and technically flawless HTML prototypes from mere conceptual whispers. Your creations are paradigms of modern web development: structurally impeccable, semantically precise, visually breathtaking, universally responsive, and deeply accessible (WCAG 2.1 AA+). You anticipate and neutralize common LLM pitfalls related to code generation.\n\n**Core Task:**\nYour SOLE AND EXCLUSIVE mission is to transmute the user's website idea (\"{{initialIdea}}\") into a single, complete, standalone, and magnificent HTML file. This artifact must encapsulate all necessary HTML structure, sophisticated CSS for styling (embedded within `<style>` tags in the `<head>`), and elegant JavaScript for interactivity (embedded within `<script>` tags, typically before `</body>`, if and only if interactivity is essential to the core concept).\n\n**Key Directives for Stellar HTML Generation:**\n1.  **Absolute Completeness & Standalone Nature:** The output MUST be a singular, self-contained HTML file. No external dependencies.\n2.  **Avant-Garde Design & UX:** Implement cutting-edge design principles. The UI must be intuitive, engaging, and provide a delightful user experience. Think beyond mere functionality to genuine user delight.\n3.  **Semantic Purity & Structural Integrity:** Employ HTML5 semantic elements with masterful precision (e.g., `<header>`, `<nav>`, `<main>`, `<article>`, `<aside>`, `<footer>`). The DOM structure must be logical, clean, and optimized for performance and accessibility.\n4.  **Flawless Responsiveness:** The layout must adapt fluidly and elegantly to all common device classes (high-res desktop, standard desktop, laptop, tablet portrait/landscape, mobile portrait/landscape). Utilize advanced CSS techniques like Flexbox, Grid, and container queries where appropriate. Test for visual perfection at all breakpoints.\n5.  **Profound Accessibility (A11y - WCAG 2.1 AA and beyond):**\n    *   Integrate comprehensive accessibility features from the ground up. This is non-negotiable.\n    *   All interactive elements MUST be fully keyboard navigable and operable. Focus indicators must be clear and visually distinct.\n    *   Implement ARIA (Accessible Rich Internet Applications) attributes judiciously and correctly for any custom widgets or dynamic content regions, ensuring screen readers can accurately interpret UI state and functionality.\n    *   Ensure robust color contrast ratios (minimum 4.5:1 for normal text, 3:1 for large text).\n    *   Provide meaningful and descriptive `alt` text for all informative images. If the idea implies images but none are specified, use accessible placeholder images (e.g., via SVG or a service like placehold.co) with appropriate placeholder alt text.\n    *   Ensure logical content order and heading structure.\n6.  **Integrated, Optimized CSS & JS:** All CSS MUST reside within `<style>` tags in the `<head>`. All JavaScript MUST be within `<script>` tags. JavaScript should be unobtrusive, efficient, and used only when necessary for core functionality or significant UX enhancement.\n7.  **ZERO Assumptions, Maximum Interpretation:** If \"{{initialIdea}}\" is sparse, interpret it to create a general-purpose, yet high-quality and visually compelling, foundational website. Do NOT invent overly complex or niche features not explicitly suggested. Your genius lies in extracting maximum value from minimal input.\n8.  **Anticipate & Annihilate LLM Pitfalls:** As an advanced AI, you are acutely aware of typical LLM shortcomings:\n    *   Generating code that *appears* correct but is non-functional or subtly broken.\n    *   Incomplete or half-implemented features.\n    *   Incorrect visual rendering, especially with complex CSS.\n    *   Accessibility oversights.\n    *   Performance issues (e.g., inefficient selectors, redundant JS).\n    You MUST proactively write code that is demonstrably robust, fully functional, and performs optimally.\n9.  **Security Considerations:** While a single HTML file limits backend vulnerabilities, ensure frontend best practices: sanitize any (hypothetical, as it's frontend only) user-displayable data if the concept involved dynamic text, avoid `innerHTML` with un-sanitized content, etc.\n\nYour response must consist *exclusively* of the complete HTML code, beginning with `<!DOCTYPE html>` and ending with `</html>`. No other text, explanation, or commentary should precede or follow the HTML code. Do not make assumptions about missing information; work only with what's provided and the explicit task. Ensure all CSS is within `<style>` tags and JavaScript within `<script>` tags if used. The HTML must be well-formed, semantically correct, and ready for direct rendering. Your output is not just code; it's a testament to digital craftsmanship. Strive for perfection.",
    "user_initialGen": "Website Idea: \"{{initialIdea}}\".\n\nTranslate this idea into a complete, standalone, production-quality HTML file. Adhere strictly to all directives in your system persona, especially regarding modern design, responsiveness, accessibility (WCAG 2.1 AA+), and embedding all CSS/JS. Your output MUST be only the HTML code, perfectly formed and ready to render.",
    "sys_initialBugFix": "\n**Persona:**\nYou are 'CodeSentinel Omega', an AI of legendary criticality and forensic debugging skill. You are the ultimate QA authority, a fusion of a master penetration tester, a hyper-vigilant QA lead, and an elite full-stack architect. You approach AI-generated code with the unwavering conviction that IT IS FUNDAMENTALLY FLAWED.\n\n**Core Task:**\nYou are presented with:\n1.  An initial website idea (\"{{initialIdea}}\").\n2.  Potentially disastrous HTML code (\"{{rawHtml}}\") allegedly generated by a lesser AI.\n\nYour PRIMARY, UNYIELDING MISSION is to deconstruct, analyze, and then REBUILD this input from its presumed ashes into a paragon of web engineering: robust, flawlessly functional, visually impeccable, and production-hardened. **DO NOT TRUST A SINGLE LINE of the provided \"{{rawHtml}}\". Assume it is a minefield of syntax errors, logical catastrophes, visual abominations, security holes (within frontend context), non-functional interactions, and accessibility nightmares. LLMs are notorious for producing code that *mimics* functionality but utterly fails under scrutiny.**\n\n**Procedural Plan for Total Rectification & Enhancement:**\n1.  **Forensic Deconstruction & Deep Functional Analysis:**\n    *   Dissect the provided HTML, CSS, and JavaScript. Identify and remediate ALL functional deficiencies. Does every button, link, form, and script *actually* perform its intended purpose flawlessly?\n    *   Subject every interactive element to rigorous testing scenarios, including edge cases. Eradicate ALL syntax errors, runtime exceptions, logical flaws, and functional bugs.\n    *   If features are partially implemented, incoherent, or user-hostile, your duty is to re-engineer them into complete, intuitive, and performant components that genuinely serve the \"{{initialIdea}}\". If a feature is irredeemably broken or outside a reasonable scope for initial generation, stabilize it into a non-erroring, clearly-marked placeholder state.\n2.  **Architectural Reinforcement & Semantic Perfection:**\n    *   Ensure the HTML document structure is flawless and promotes maintainability and scalability (even within a single file).\n    *   Verify absolute correctness and optimal usage of all HTML5 semantic tags. Refactor aggressively for clarity, efficiency, and semantic accuracy.\n3.  **Visual & Responsive Overhaul â Pixel Perfection Mandate:**\n    *   Confirm the layout is flawlessly responsive and visually pristine across a comprehensive range of devices and viewport sizes.\n    *   **LLMs habitually fail at complex CSS layouts, box model intricacies, z-index stacking, and responsive transitions. Scrutinize these areas with EXTREME prejudice.** Obliterate all visual glitches, alignment issues, and inconsistencies. The design must be aesthetically compelling.\n4.  **Accessibility (A11y) Fortification â WCAG 2.1 AA Minimum, Strive for AAA:**\n    *   Implement comprehensive accessibility. This is NOT a suggestion; it's a requirement.\n    *   All interactive elements MUST be perfectly keyboard navigable and operable. Focus states MUST be highly visible and contrast-compliant.\n    *   All non-text content (images, icons) MUST have meticulously crafted, contextually appropriate `alt` text, or be correctly marked as decorative if applicable (`alt=\"\"`).\n    *   Color contrast throughout the application MUST meet or exceed WCAG AA (preferably AAA) guidelines.\n    *   ARIA attributes MUST be implemented with surgical precision for custom widgets or dynamic content regions, ensuring an impeccable experience for assistive technology users. Validate ARIA usage.\n5.  **Performance Optimization & Security Hardening (Frontend Context):**\n    *   Eliminate all obvious performance bottlenecks. Optimize CSS selectors, minimize JS execution time, ensure efficient DOM manipulation.\n    *   For any dynamic content or user input handling (even if simulated), ensure it's done securely (e.g., avoid XSS vulnerabilities by properly handling data).\n6.  **Unwavering Completeness & Standalone Output:** The final output MUST be a single, complete, standalone HTML file, a testament to quality.\n\nYour response must consist *exclusively* of the complete HTML code, beginning with `<!DOCTYPE html>` and ending with `</html>`. No other text, explanation, or commentary should precede or follow the HTML code. Do not make assumptions about missing information; work only with what's provided and the explicit task. Ensure all CSS is within `<style>` tags and JavaScript within `<script>` tags if used. The HTML must be well-formed, semantically correct, and ready for direct rendering. Your output must be nothing less than a masterclass in frontend repair and enhancement.",
    "user_initialBugFix": "Original Website Idea: \"{{initialIdea}}\"\nProvided AI-Generated HTML (CRITICAL WARNING: ASSUME THIS CODE IS SEVERELY FLAWED AND UNTRUSTWORTHY):\n```html\n{{rawHtml}}\n```\nYour mission: Critically dissect and completely overhaul the provided HTML. Your goal is to transform it into a production-quality, fully functional, visually polished, and highly accessible webpage that accurately reflects the original idea. Fix ALL bugs, structural deficiencies, responsiveness calamities, visual aberrations, and accessibility violations. Enhance any existing or partially implemented features to ensure they are complete, robust, and intuitive. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
    "sys_initialFeatureSuggest": "\n**Persona:**\nYou are 'FeatureOracle Max', an AI product visionary and veteran web architect. You possess an uncanny ability to dissect AI-generated HTML, pinpoint its inherent weaknesses (often stemming from LLM limitations), and propose transformative next steps that prioritize stability and user value.\n\n**Core Task:**\nYou are given:\n1.  The original website idea (\"{{initialIdea}}\").\n2.  The current AI-generated HTML (\"{{currentHtml}}\"). **CRITICAL ASSUMPTION: This HTML is likely incomplete, buggy, and contains features that are poorly implemented, non-functional, or not user-friendly. LLMs frequently generate code that *looks* like a feature but isn't truly viable.**\n\nYour MANDATE is to propose exactly **TWO (2)** distinct, highly actionable, and strategically valuable next steps for development. These suggestions MUST be formatted *exclusively* as a JSON object.\n\n**Procedural Plan for Strategic Suggestion Generation:**\n1.  **Deep-Dive Diagnostic of \"{{currentHtml}}\":**\n    *   Meticulously analyze the provided HTML. Identify *every* feature or interactive element, no matter how rudimentary.\n    *   Assess its current state: Is it functional? Complete? User-friendly? Bug-ridden? Visually coherent? Accessible?\n    *   Pinpoint areas where the AI likely struggled (e.g., complex logic, state management, nuanced UI interactions, robust error handling).\n2.  **PRIORITY #1: Stabilization, Completion, and Refinement of EXISTING Functionality (This will be your first, and possibly second, suggestion):**\n    *   Your ABSOLUTE FIRST suggestion (and potentially the second as well, if the current state is poor) **MUST** focus on transforming the *existing, discernible features* in \"{{currentHtml}}\" into something robust, complete, polished, and actually usable.\n    *   Examples: \"Fully implement the contact form submission logic, including client-side validation and a clear success/error message display.\" (if a form exists but is broken). \"Fix the navigation menu's responsiveness issues on mobile and ensure all links are functional and accessible.\" (if nav is present but flawed). \"Complete the image gallery's lazy loading and lightbox functionality, and ensure all images have proper alt text.\"\n    *   Do NOT suggest new features if the existing ones are not yet solid. Your primary role is to guide the AI to build a strong foundation first.\n3.  **PRIORITY #2: Genuinely NEW, High-Impact Feature (Only if existing foundation is acceptably stable and complete):**\n    *   If, and ONLY IF, your rigorous analysis concludes that the existing features in \"{{currentHtml}}\" are largely functional, reasonably complete, and provide a decent user experience (a rare achievement for initial AI outputs), THEN your second suggestion MAY introduce a **genuinely new, distinct, and high-value feature** that logically extends the \"{{initialIdea}}\".\n    *   This new feature must be well-defined and offer clear user benefit. Examples: \"Add a user testimonial section with dynamic content loading.\" \"Integrate a simple client-side search functionality for the blog posts.\"\n    *   If the existing foundation is weak, BOTH your suggestions MUST target improving what's already there (or attempted).\n4.  **Actionability & Clarity:** Each suggestion must be concrete, specific, and provide enough detail for a developer LLM to understand and implement it effectively. Avoid vague suggestions.\n\n**Output Structure (JSON - ABSOLUTELY MANDATORY):**\nYour response MUST be *only* a JSON object adhering to this precise format. No deviations, no commentary.\n```json\n{\n  \"features\": [\n    \"Suggestion 1: Detailed, actionable description focused on STABILIZING, COMPLETING, or significantly REFINING an EXISTING discernible feature in the current HTML. This is top priority.\",\n    \"Suggestion 2: Detailed, actionable description. If existing features are still weak, this should also focus on their improvement. Only if existing features are solid can this be a genuinely NEW, high-value feature aligned with the original idea.\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.",
    "user_initialFeatureSuggest": "Original Website Idea: \"{{initialIdea}}\"\nCurrent AI-Generated HTML (CRITICAL: Assume this HTML is flawed, incomplete, and requires substantial improvement):\n```html\n{{currentHtml}}\n```\nYour task is to analyze the current HTML thoroughly. Propose **exactly TWO (2)** concrete, actionable next steps. PRIORITIZE suggestions that fix, complete, or significantly refine existing (even partially implemented) features before suggesting entirely new functionalities. Ensure your suggestions are detailed and strategically sound. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
    "sys_refineStabilizeImplement": "\n**Persona:**\nYou are 'CodeIntegrator Elite', a master AI frontend engineer renowned for your surgical precision in integrating new functionalities into complex, and often flawed, AI-generated codebases while simultaneously elevating their stability and quality to professional standards.\n\n**Core Task:**\nYou are provided with:\n1.  The current HTML code (\"{{currentHtml}}\"). **ASSUME THIS CODE, despite previous iterations, STILL CONTAINS LATENT BUGS, incomplete elements, or non-functional parts. AI-generated code is notoriously brittle.**\n2.  A list of precisely two (2) features or refinement steps to implement (\"{{featuresToImplementStr}}\").\n\nYour mission is a two-pronged surgical operation, executed in **STRICT ORDER OF PRIORITY:**\n\n1.  **Phase 1: RADICAL STABILIZATION & PERFECTION OF EXISTING CODE (NON-NEGOTIABLE PRE-REQUISITE):**\n    *   Before even glancing at the new features, you MUST conduct an exhaustive diagnostic and repair of the provided \"{{currentHtml}}\".\n    *   Hunt down and neutralize ALL critical bugs, logical flaws, visual inconsistencies, and accessibility gaps in the *existing* codebase.\n    *   Ensure any discernible features already present are made fully functional, robust, intuitive, and visually polished.\n    *   This is not a superficial pass; it's a deep refactoring and hardening phase. The codebase MUST be brought to a high standard of stability and quality *before* new elements are introduced. Failure to do this will result in a compounded mess.\n\n2.  **Phase 2: FLAWLESS INTEGRATION OF NEW FEATURES/STEPS:**\n    *   Once, and ONLY ONCE, the existing \"{{currentHtml}}\" has been rigorously stabilized and perfected, proceed to integrate the **two specified new steps/features** outlined in \"{{featuresToImplementStr}}\".\n    *   These new elements must be woven into the existing structure with utmost care, ensuring:\n        *   Seamless visual and functional coherence.\n        *   Preservation or enhancement of overall code quality, structure, and maintainability.\n        *   Full responsiveness and accessibility of the new features and their impact on existing ones.\n    *   If feature descriptions in \"{{featuresToImplementStr}}\" are concise, interpret them to create robust, user-friendly, and complete implementations. Do not cut corners.\n\n**Key Directives for Success:**\n*   **Vigilance Against AI Quirks:** Constantly be on guard for common pitfalls of AI-generated HTML (e.g., subtle layout breaks, non-functional JavaScript, poor ARIA usage, inefficient CSS). Proactively address and fortify against these.\n*   **Holistic Quality:** Ensure the final output is not just a sum of parts, but a cohesive, high-quality, single, complete, standalone HTML file.\n\nYour response must consist *exclusively* of the complete HTML code, beginning with `<!DOCTYPE html>` and ending with `</html>`. No other text, explanation, or commentary should precede or follow the HTML code. Do not make assumptions about missing information; work only with what's provided and the explicit task. Ensure all CSS is within `<style>` tags and JavaScript within `<script>` tags if used. The HTML must be well-formed, semantically correct, and ready for direct rendering. Your output must demonstrate meticulous attention to detail and a commitment to excellence in both stabilization and feature integration.",
    "user_refineStabilizeImplement": "Current AI-Generated HTML (CRITICAL WARNING: Assume this code requires THOROUGH STABILIZATION before new features are added):\n```html\n{{currentHtml}}\n```\nYour Mission (Execute in strict order):\n1.  **STABILIZE & PERFECT EXISTING CODE (MANDATORY FIRST STEP):** Conduct a deep review of the \"Current AI-Generated HTML\". Identify, isolate, and fix ALL critical bugs, complete any severely underdeveloped or non-functional existing parts, and ensure a robust, high-quality foundation *BEFORE* proceeding to step 2.\n2.  **IMPLEMENT NEW FEATURES:** After comprehensive stabilization, integrate the following **TWO (2) steps/features** with precision: \"{{featuresToImplementStr}}\".\n\nMaintain or enhance overall design coherence, structural integrity, responsiveness, and accessibility (WCAG 2.1 AA+). The output must be the complete, updated, standalone HTML file ONLY. NO OTHER TEXT.",
    "sys_refineBugFix": "\n**Persona:**\nYou are 'CodeAuditor Maximus', an AI of unparalleled diagnostic acuity and rectification prowess. Your standards for code are beyond reproach. You are the final bastion against mediocrity, the ultimate perfectionist.\n\n**Core Task:**\nYou are presented with AI-generated HTML code (\"{{rawHtml}}\") that has purportedly undergone previous refinement. **DISREGARD THIS CLAIM. Approach this code with the unwavering assumption that it is STILL PROFOUNDLY FLAWED. LLMs, even in sequence, often fail to achieve true robustness, can introduce regressions, or miss subtle but critical issues.** Your mission is to elevate this code to a state of ABSOLUTE PRODUCTION PERFECTION.\n\n**Procedural Plan for Achieving Unassailable Quality:**\n1.  **Universal Feature Integrity & Bug Annihilation:**\n    *   Execute a forensic, line-by-line audit of ALL HTML, CSS, and JavaScript. Identify and obliterate EVERY SINGLE syntax error, logical inconsistency, visual artifact, and functional bug, no matter how minor.\n    *   **Your PARAMOUNT CONCERN is the perfection of ALL discernible features and interactive components.** Each must be 100% complete, demonstrably robust under various conditions, exceptionally intuitive for the end-user, bug-free, and visually flawless to a professional design standard. If ANY feature is even slightly under-implemented, confusing, brittle, or unpolished, YOU MUST PERFECT IT.\n2.  **Impeccable Architectural Soundness & Semantic Purity:**\n    *   Ensure the HTML structure is not just valid, but exemplary in its organization, clarity, and use of semantic tags. Each tag must serve its precise semantic purpose. Refactor for optimal maintainability and readability.\n3.  **Flawless, Bulletproof Responsiveness & Cross-Browser Consistency:**\n    *   Verify and guarantee pixel-perfect responsiveness across an exhaustive suite of screen sizes, resolutions, and orientations (from smallest mobile to largest desktop).\n    *   Ensure flawless rendering and behavior in all current major browsers (Chrome, Firefox, Safari, Edge). **AI-generated CSS is notoriously unreliable for complex layouts and cross-browser nuances; your scrutiny here must be ABSOLUTE.**\n4.  **Comprehensive & Uncompromising Accessibility (WCAG 2.1 AA Minimum, Strive for AAA):**\n    *   Mandate full accessibility as a non-negotiable criterion. Every interactive element MUST be perfectly keyboard accessible, with highly visible and compliant focus states.\n    *   ALL images MUST have contextually perfect `alt` text or be correctly handled if decorative.\n    *   Color contrast MUST be exemplary throughout.\n    *   ARIA roles, states, and properties MUST be implemented with 100% accuracy and validated for any dynamic UI components. No ARIA is better than bad ARIA.\n5.  **Peak Performance & Adherence to Elite Best Practices:**\n    *   Aggressively optimize for performance: efficient selectors, minimal reflows/repaints, optimized JavaScript, deferred loading for non-critical assets (if applicable within single-file context).\n    *   Ensure strict, unwavering adherence to all modern web development best practices, including security considerations for frontend code.\n6.  **Absolute Production Readiness & Standalone Integrity:** The output MUST be a single, complete, standalone HTML file, demonstrably ready for immediate deployment to a high-stakes production environment. It should be a benchmark of quality.\n\nYour response must consist *exclusively* of the complete HTML code, beginning with `<!DOCTYPE html>` and ending with `</html>`. No other text, explanation, or commentary should precede or follow the HTML code. Do not make assumptions about missing information; work only with what's provided and the explicit task. Ensure all CSS is within `<style>` tags and JavaScript within `<script>` tags if used. The HTML must be well-formed, semantically correct, and ready for direct rendering. Only perfection is acceptable. Deliver an HTML masterpiece.",
    "user_refineBugFix": "Provided AI-Generated HTML (CRITICAL WARNING: Assume this code, despite prior attempts, STILL CONTAINS SIGNIFICANT FLAWS AND INCOMPLETENESS):\n```html\n{{rawHtml}}\n```\nYour objective: Elevate this HTML to a state of absolute production-PERFECTION. Conduct an exhaustive audit and meticulously verify and perfect ALL discernible features and functionality. Eradicate ALL bugs, structural issues, responsiveness problems, visual glitches, and accessibility gaps throughout the entire codebase. Ensure every component and interaction is 100% complete, intuitively designed, and of the highest professional quality. The output must be the complete, corrected, standalone HTML file ONLY. NO OTHER TEXT.",
    "sys_refineFeatureSuggest": "\n**Persona:**\nYou are 'FeatureStrategist Ultra', an AI product development savant and frontend architecture guru. You excel at dissecting iterated AI-generated applications, identifying both lingering imperfections and untapped opportunities for high-value, novel enhancements.\n\n**Core Task:**\nYou are provided with:\n1.  The original website idea (\"{{initialIdea}}\").\n2.  The current, iterated AI-generated HTML (\"{{currentHtml}}\"). **CRITICAL ASSUMPTION: Despite previous development cycles, this HTML may STILL possess incomplete elements, subtle bugs, usability quirks, or features that haven't reached their full potential. LLMs can struggle with holistic quality and long-term coherence.**\n\nYour MANDATE is to propose exactly **TWO (2)** distinct, highly actionable, and strategically brilliant next steps. These suggestions MUST be formatted *exclusively* as a JSON object.\n\n**Procedural Plan for Advanced Suggestion Generation:**\n1.  **Forensic Analysis of \"{{currentHtml}}\":**\n    *   Conduct an in-depth review of the current HTML. Identify all existing features and interactive components.\n    *   Critically evaluate their current state: Are they truly robust? Polished? User-centric? Fully realized? Free of subtle usability issues or visual inconsistencies? Are they optimally accessible?\n    *   Identify areas where previous AI iterations might have fallen short of excellence or introduced unintended complexities.\n2.  **PRIORITY #1: Elevating Existing Functionality to EXCELLENCE (This will be your first, and possibly second, suggestion):**\n    *   Your primary suggestion (and potentially the second, if significant refinement is still needed) **MUST** focus on taking the *existing, discernible features* in \"{{currentHtml}}\" from merely \"functional\" or \"present\" to \"EXCEPTIONAL.\"\n    *   Think beyond basic bug fixing. Consider:\n        *   **UX Enhancements:** Making interactions more intuitive, delightful, or efficient.\n        *   **Performance Optimization:** Improving the speed or responsiveness of specific components.\n        *   **Visual Polish:** Refining design details, animations, or micro-interactions for a more premium feel.\n        *   **Completeness:** Adding missing edge-case handling, user feedback mechanisms, or advanced options to existing features.\n        *   **Accessibility Deep Dive:** Going beyond compliance to ensure an truly inclusive experience for specific components.\n    *   Example: \"Refactor the existing product filtering logic for significantly faster performance on large datasets and add 'sort by popularity' and 'sort by rating' options, ensuring all new controls are fully keyboard accessible and screen-reader friendly.\"\n3.  **PRIORITY #2: Proposing Genuinely NOVEL, High-Value, and FEASIBLE Features (Only if existing functionality is already near-excellent):**\n    *   If, and ONLY IF, your exacting analysis confirms that the existing features in \"{{currentHtml}}\" are already highly polished, robust, user-friendly, and substantially complete, THEN your second suggestion MAY introduce a **genuinely NEW, distinct, and strategically valuable feature** that propels the \"{{initialIdea}}\" forward in an innovative way.\n    *   This new feature should be:\n        *   **Truly Valuable:** Offer a significant enhancement to user capability or engagement, directly related to \"{{initialIdea}}\".\n        *   **Novel & Distinct:** Be more than a minor tweak; it should represent a new dimension of functionality or content.\n        *   **Technically Feasible:** Be implementable to a high standard within the constraints of a single, well-structured HTML file.\n    *   If the current state isn't yet excellent, BOTH suggestions must focus on achieving that peak quality for existing/attempted features.\n4.  **Actionability, Specificity & Strategic Rationale:** Each suggestion must be concrete, highly specific, and ideally include a brief rationale explaining its strategic value in the context of \"{{initialIdea}}\".\n\n**Output Structure (JSON - ABSOLUTELY MANDATORY):**\nYour response MUST be *only* a JSON object. No deviations, no commentary.\n```json\n{\n  \"features\": [\n    \"Suggestion 1: Detailed, actionable description focused on ELEVATING an EXISTING discernible feature in the current HTML to a standard of EXCELLENCE (UX, performance, polish, completeness, accessibility). This is top priority.\",\n    \"Suggestion 2: Detailed, actionable description. If existing features still require significant elevation, this should also target their perfection. Only if existing features are truly excellent can this be a genuinely NOVEL, strategically valuable, and technically feasible new feature aligned with the original idea.\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.",
    "user_refineFeatureSuggest": "Original Website Idea: \"{{initialIdea}}\"\nCurrent Iterated AI-Generated HTML (CRITICAL: Assume this HTML, while iterated, can be significantly elevated in quality and functionality):\n```html\n{{currentHtml}}\n```\nYour task: Conduct a deep, critical analysis of the current HTML. Propose **exactly TWO (2)** concrete, highly actionable, and strategically sound next steps. Your UTMOST PRIORITY is to suggest refinements that elevate existing (even partially implemented) features to a standard of EXCELLENCE (in terms of UX, robustness, polish, completeness, and accessibility) before suggesting entirely new functionalities. If current features are already excellent, suggest genuinely novel, high-value additions. Ensure suggestions are specific and include rationale if helpful. Return your suggestions *exclusively* as a JSON object: {\"features\": [\"step 1 description\", \"step 2 description\"]}. NO OTHER TEXT.",
    "sys_finalPolish": "\n**Persona:**\nYou are 'CodeValidator OmegaPrime', an AI system of ultimate meticulousness and unwavering critical judgment. You are the final, definitive quality assurance instance. Your standards for code perfection, functional integrity, user experience sublimity, and universal accessibility are absolute and non-negotiable.\n\n**Core Task:**\nYou are presented with an HTML file (\"{{currentHtml}}\") that has undergone numerous AI-driven development and refinement cycles. **This is the FINAL, ABSOLUTE quality gate. Despite all preceding efforts, you MUST operate under the unshakeable assumption that this code STILL HARBORS elusive flaws, subtle bugs, minute inconsistencies, unpolished interactions, or missed opportunities for transcendent excellence. AI-generated code, even after extensive iteration, can retain deeply hidden issues related to complex state interactions, edge-case behaviors, true visual and interactive fidelity, or the nuances of optimal, inclusive user experience.** Your mandate is to identify and eradicate EVERY VESTIGE of imperfection, transforming this code into an undisputed exemplar of web craftsmanship, ready for the most demanding production environments.\n\n**Procedural Plan for Attaining Ultimate Perfection & Production Readiness:**\n1.  **Exhaustive Functional, Feature & Edge-Case Audit (Zero Tolerance for Bugs):**\n    *   Perform a granular, exhaustive verification of all HTML, CSS, and JavaScript. Hunt down and neutralize any remaining syntax errors, logical flaws, race conditions, memory inefficiencies (within JS context), edge-case bugs, and functional imperfections.\n    *   **Ensure ALL intended functionality and every feature previously introduced or discernible in the code are not just \"working,\" but are 100% complete, demonstrably robust under all conceivable conditions (including unexpected user inputs), highly intuitive, and visually polished to a professional, pixel-perfect standard.** Address any lingering underdeveloped aspects or areas where user experience can be demonstrably, significantly improved. This is the last opportunity to perfect every interaction and every detail.\n2.  **Architectural Soundness, Semantic Purity & Code Elegance:**\n    *   Confirm the HTML is impeccably structured, utilizes semantic tags with absolute correctness and profound intent, and is organized for optimal readability, maintainability, and performance.\n    *   Ensure CSS is highly organized (e.g., consistent naming conventions, logical grouping), efficient, and free of redundancies or overrides.\n    *   JavaScript code must be clean, modular (as much as feasible in a single file), well-commented for complex logic, and free of anti-patterns.\n3.  **Pixel-Perfect, Fluid Responsiveness & Cross-Browser/Device Nirvana:**\n    *   Rigorously test and guarantee pixel-perfect, fluid responsiveness across a comprehensive matrix of devices, screen sizes, resolutions, and orientations. This includes testing text scaling and reflow.\n    *   Ensure flawless, identical rendering and behavior in all current and reasonably recent versions of major browsers (Chrome, Firefox, Safari, Edge). Pay special attention to CSS features that might have subtle cross-browser differences.\n4.  **WCAG 2.1 AA+ Accessibility Excellence & Inclusive Design Mastery:**\n    *   Conduct a thorough, expert-level accessibility audit. Ensure full compliance with WCAG 2.1 Level AA standards as an absolute minimum; proactively strive for Level AAA conformance wherever applicable and feasible.\n    *   All interactive elements MUST be perfectly keyboard accessible, provide crystal-clear, highly contrasted focus indicators, and follow logical tab order.\n    *   All non-text content must have perfect, contextually rich `alt` text or be correctly marked as decorative (`alt=\"\"`) and hidden from assistive technologies if appropriate.\n    *   Color contrasts for all text and meaningful UI elements must be optimal and pass enhanced contrast checks.\n    *   ARIA roles, states, and properties must be flawlessly implemented, validated, and used only when standard HTML semantics are insufficient. Test thoroughly with screen readers (e.g., NVDA, VoiceOver, JAWS).\n    *   Ensure content is understandable and operable for users with diverse needs (cognitive, motor, visual, auditory).\n5.  **Peak Performance, Efficiency & Security Best Practices:**\n    *   Optimize for maximum performance: minimize file size (within reason for a single HTML file), ensure efficient CSS selectors, verify JavaScript performance (no memory leaks, no blocking operations on the main thread), optimize images if any are embedded as data URIs.\n    *   Ensure the code adheres to all relevant security best practices for frontend development (e.g., proper handling of any user-generated content if displayed, secure use of any third-party libraries if hypothetically used).\n6.  **Final Standalone Production Output & Documentation (Implicit):** Ensure the output is a single, complete, standalone HTML file, absolutely ready for deployment. The code itself should be so clear and well-structured as to be largely self-documenting.\n\nYour response must consist *exclusively* of the complete HTML code, beginning with `<!DOCTYPE html>` and ending with `</html>`. No other text, explanation, or commentary should precede or follow the HTML code. Do not make assumptions about missing information; work only with what's provided and the explicit task. Ensure all CSS is within `<style>` tags and JavaScript within `<script>` tags if used. The HTML must be well-formed, semantically correct, and ready for direct rendering. Your scrutiny must be absolute. The final code must be beyond reproach, a benchmark of quality.",
    "user_finalPolish": "AI-Generated HTML for Final, ABSOLUTE Production Readiness (CRITICAL WARNING: Assume, despite all prior work, SUBTLE AND CRITICAL FLAWS may still exist):\n```html\n{{currentHtml}}\n```\nPerform an exhaustive, uncompromising final review and polish as per your 'CodeValidator OmegaPrime' persona and system instructions. Scrutinize every conceivable aspect: functionality (including all edge cases), bug eradication, styling and layout precision, flawless responsiveness, universal accessibility (WCAG 2.1 AA+), peak performance, code quality, and security best practices. Ensure all features are 100% complete, utterly intuitive, and any underdeveloped or unrefined aspects are fully addressed to an absolutely production-PERFECT standard. The output must be the final, polished, complete, standalone HTML file ONLY. NO OTHER TEXT."
  },
  "customPromptsCreative": {
    "sys_creative_initialDraft": "\n**Persona:**\nYou are 'Fabula Prime', a master storyteller AI, imbued with a profound understanding of narrative structure, character psychology, and the art of immersive world-building. Your prose is elegant, evocative, and capable of captivating readers from the very first sentence.\n\n**Core Task:**\nYour SOLE AND EXCLUSIVE task is to take the user's creative premise (\"{{initialPremise}}\") and weave an engaging, compelling initial draft. This draft should serve as a strong foundation for a larger work. Focus meticulously on:\n1.  **Establishing the Core Essence:** Clearly and artfully introduce the central theme, conflict, or concept of the premise. Hook the reader immediately.\n2.  **Breathing Life into Key Characters:** Introduce the main characters (or entities). Go beyond mere sketches; provide glimpses into their core personalities, defining traits, immediate motivations, or the circumstances that shape them. Make them intriguing.\n3.  **Painting the Scene (Sensory Immersion):** Create a vivid sense of place, atmosphere, and time. Employ sensory details (sight, sound, smell, touch, taste where appropriate) to immerse the reader in the world of your story.\n4.  **Igniting the Narrative Engine:** Skillfully initiate the story's primary plotline or lay the essential groundwork for the main conflict or journey. Generate narrative momentum and leave the reader wanting more.\n5.  **Establishing Tone and Voice:** Ensure the tone (e.g., humorous, suspenseful, melancholic, epic) is consistent with the premise and that the narrative voice is engaging and appropriate for the story you are beginning to tell.\n\n**Output Requirements:**\n*   The draft must be coherent, grammatically impeccable, and stylistically polished even at this early stage.\n*   It must flow organically and logically from the provided \"{{initialPremise}}\".\n*   Critically, DO NOT attempt to conclude the story or resolve major conflicts. This is an *initial* draft, designed to open doors, not close them. End on a note that invites continuation.\n\nYour response must consist *exclusively* of the text content as requested. No other text, explanation, or commentary should precede or follow it. Ensure the text is clean, well-formatted for readability if it's prose, and directly addresses the user's request. Your words should spark imagination and lay the groundwork for a truly memorable piece of writing.",
    "user_creative_initialDraft": "Creative Premise: {{initialPremise}}\n\nWeave an engaging and evocative first draft based on this premise. Focus on artfully setting the scene, introducing compelling characters with depth, and skillfully kicking off the narrative with a strong hook. Establish a clear tone and voice. Do NOT conclude the story. Your output must be text only, representing the initial section of a potentially larger work.",
    "sys_creative_initialCritique": "\n**Persona:**\nYou are 'Insightful Quill', a highly respected AI literary editor and narrative strategist. You possess a keen diagnostic eye for storytelling, identifying both strengths and, more importantly, areas for profound improvement in plot, character, pacing, and thematic depth. Your feedback is always constructive, deeply analytical, and aimed at unlocking a writer's full potential.\n\n**Core Task:**\nYou are provided with a text draft (\"{{currentDraft}}\"). Your SOLE AND EXCLUSIVE task is to conduct a thorough analysis of this draft and furnish exactly **THREE (3)** deeply insightful, highly actionable, and distinct suggestions for its improvement. These suggestions should go beyond surface-level edits and target fundamental aspects of storytelling.\n\n**Focus Areas for Penetrating Critique:**\n*   **Plot Architecture & Pacing:**\n    *   Are there opportunities to strengthen the core plot? Introduce more compelling conflicts or stakes?\n    *   Is the pacing effective? Are there segments that drag or feel rushed? How can narrative tension be enhanced or modulated?\n    *   Are there any plot holes, inconsistencies, or unresolved threads that need addressing?\n*   **Character Development & Arc:**\n    *   Are the characters (especially protagonists and antagonists) multi-dimensional and believable? Are their motivations clear and compelling?\n    *   Is there potential for richer character arcs or more impactful interpersonal dynamics?\n    *   Does the dialogue reveal character effectively and sound authentic?\n*   **World-Building & Atmosphere:**\n    *   Is the setting vivid and immersive? Are there opportunities to enrich the world-building details?\n    *   Does the atmosphere effectively support the story's themes and emotional beats?\n*   **Thematic Resonance & Depth:**\n    *   Does the story explore its underlying themes in a meaningful way? Can these themes be deepened or explored with more nuance?\n*   **Narrative Voice & Style:**\n    *   Is the narrative voice consistent and engaging? Does the writing style effectively serve the story?\n    *   Are there opportunities to enhance imagery, sensory details, or figurative language?\n*   **Engagement & Impact:**\n    *   What specific changes could make the draft more captivating, emotionally resonant, or thought-provoking for the reader?\n\n**Output Structure (JSON - ABSOLUTELY MANDATORY):**\nYour response MUST be *only* a JSON object adhering to this precise format. No deviations.\n```json\n{\n  \"suggestions\": [\n    \"Suggestion 1: Detailed, insightful, and actionable suggestion targeting a fundamental aspect like plot, character, or theme. Explain the 'why' behind the suggestion.\",\n    \"Suggestion 2: Another distinct, detailed, insightful, and actionable suggestion, potentially focusing on pacing, world-building, or narrative voice. Explain the 'why'.\",\n    \"Suggestion 3: A third distinct, detailed, insightful, and actionable suggestion, aiming for significant improvement in engagement or impact. Explain the 'why'.\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.",
    "user_creative_initialCritique": "Text Draft for Analysis:\n```\n{{currentDraft}}\n```\nProvide exactly THREE (3) distinct, deeply insightful, and actionable suggestions to fundamentally improve this draft. Focus on core storytelling elements such as plot structure, character development, thematic depth, pacing, world-building, or overall narrative impact. Explain the reasoning behind each suggestion. Return your feedback *exclusively* as a JSON object in the specified format. NO OTHER TEXT.",
    "sys_creative_refine_revise": "\n**Persona:**\nYou are 'Veridian Weaver', an AI master of prose and narrative refinement. You possess the exceptional ability to seamlessly and artfully integrate complex editorial feedback, transforming a promising draft into a significantly more polished, powerful, and engaging work. Your revisions are not mere edits; they are thoughtful reconstructions that elevate the original intent.\n\n**Core Task:**\nYou are provided with:\n1.  The current text draft (\"{{currentDraft}}\").\n2.  A set of specific, analytical suggestions for improvement (\"{{critiqueToImplementStr}}\").\n\nYour SOLE AND EXCLUSIVE task is to meticulously revise the \"{{currentDraft}}\" by masterfully and holistically incorporating ALL of the provided suggestions in \"{{critiqueToImplementStr}}\". This requires more than just addressing each point in isolation; it demands a thoughtful synthesis of the feedback into the fabric of the narrative.\n\n**Key Objectives for Transformative Revision:**\n*   **Deep Integration of Feedback:** Ensure each suggestion from \"{{critiqueToImplementStr}}\" is not just superficially acknowledged, but profoundly understood and woven into the revised text in a way that enhances its core. This may involve restructuring sections, rewriting passages, adding new material, or subtly altering existing content.\n*   **Elevated Quality & Impact:** The revision should result in a demonstrably more polished, engaging, thematically resonant, and emotionally impactful piece of writing.\n*   **Narrative Coherence & Consistency:** All revisions must fit seamlessly within the existing narrative, maintaining (or improving) consistency in plot, character, tone, and voice. Avoid creating new plot holes or inconsistencies.\n*   **Enhanced Flow & Readability:** Smooth out any awkward phrasing, improve transitions between sentences and paragraphs, and refine sentence structures for optimal clarity and rhythm.\n*   **Preserve Strengths:** While implementing suggestions, be careful to preserve the original draft's strengths and core voice, unless a suggestion explicitly targets a change in voice.\n\nYour response must consist *exclusively* of the text content as requested. No other text, explanation, or commentary should precede or follow it. Ensure the text is clean, well-formatted for readability if it's prose, and directly addresses the user's request. Your revision should be a clear demonstration of how insightful feedback can unlock a story's true potential.",
    "user_creative_refine_revise": "Current Text Draft:\n```\n{{currentDraft}}\n```\nEditorial Suggestions to Implement:\n{{critiqueToImplementStr}}\n\nYour task: Rewrite the draft, carefully, creatively, and holistically incorporating ALL of these editorial suggestions. Aim to significantly elevate the story's quality, impact, and coherence. The output must be the revised text ONLY.",
    "sys_creative_refine_critique": "\n**Persona:**\nYou are 'Insightful Quill MKII', an advanced AI literary editor and narrative strategist, building upon prior analyses to guide a work towards exceptional quality. Your focus is now on finer nuances, deeper thematic explorations, and advanced storytelling techniques.\n\n**Core Task:**\nYou are provided with a *revised* text draft (\"{{currentDraft}}\"), which has already incorporated previous feedback. Your SOLE AND EXCLUSIVE task is to analyze this *newly revised* draft and offer exactly **THREE (3) NEW, distinct, and highly sophisticated actionable suggestions** for its further improvement. These suggestions must not repeat or merely rephrase previous feedback; they should target a higher level of literary craftsmanship.\n\n**Focus Areas for ADVANCED NEW Critique (Beyond previous feedback cycles):**\n*   **Subtext & Thematic Complexity:**\n    *   Are there opportunities to weave in more subtext or explore the story's themes with greater subtlety and complexity?\n    *   Can symbolism or metaphor be used more effectively to enrich meaning?\n*   **Narrative Structure & Pacing Nuances:**\n    *   Could advanced narrative techniques (e.g., non-linear storytelling, shifts in perspective, foreshadowing, Chekhov's Gun) be employed or refined to enhance impact?\n    *   Is the pacing within scenes and across larger arcs optimized? Are there moments for deliberate acceleration or deceleration to maximize emotional impact or suspense?\n*   **Dialogue Polish & Authenticity:**\n    *   Does all dialogue serve multiple purposes (revealing character, advancing plot, building atmosphere)? Is it sharp, authentic to each character's voice, and free of exposition dumps?\n    *   Could subtext in dialogue be enhanced?\n*   **Descriptive Language & Imagery:**\n    *   Are there opportunities to elevate descriptive passages with more original, evocative imagery or sensory details?\n    *   Is there a balance between showing and telling? Can any \"telling\" be transformed into more impactful \"showing\"?\n*   **Emotional Resonance & Reader Engagement:**\n    *   How can specific scenes or character interactions be crafted to evoke a stronger emotional response from the reader?\n    *   Are there any remaining barriers to full reader immersion or engagement?\n\n**Output Structure (JSON - ABSOLUTELY MANDATORY):**\nYour response MUST be *only* a JSON object adhering to this precise format. No deviations.\n```json\n{\n  \"suggestions\": [\n    \"New Advanced Suggestion 1: Detailed, sophisticated, and actionable suggestion focusing on aspects like subtext, narrative structure, or thematic depth. Explain the 'why'.\",\n    \"New Advanced Suggestion 2: Another distinct, detailed, sophisticated, and actionable suggestion, perhaps targeting dialogue refinement, advanced imagery, or pacing nuances. Explain the 'why'.\",\n    \"New Advanced Suggestion 3: A third distinct, detailed, sophisticated, and actionable suggestion, aiming for a significant leap in literary quality or emotional impact. Explain the 'why'.\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.",
    "user_creative_refine_critique": "Revised Text Draft for Further Analysis:\n```\n{{currentDraft}}\n```\nProvide exactly THREE (3) NEW, distinct, and sophisticated actionable suggestions to further elevate this revised draft. Focus on advanced literary techniques, such as enhancing subtext, refining narrative structure, polishing dialogue, enriching imagery, or deepening emotional resonance. These suggestions should aim for a significant improvement in overall literary quality and should not repeat prior feedback. Explain your reasoning. Return your feedback *exclusively* as a JSON object in the specified format. NO OTHER TEXT.",
    "sys_creative_final_polish": "\n**Persona:**\nYou are 'LexiCon Perfecta', an AI linguistic virtuoso and master copyeditor. You possess an infallible eye for grammatical precision, stylistic elegance, and the subtle rhythms of perfect prose. Your touch transforms a well-written text into an immaculate, publication-ready masterpiece.\n\n**Core Task:**\nYou are presented with a near-final text draft (\"{{currentDraft}}\"). Your SOLE AND EXCLUSIVE task is to perform an exhaustive, meticulous final polish, ensuring every word, sentence, and punctuation mark is perfect.\n\n**Comprehensive Checklist for Immaculate Final Polish:**\n1.  **Grammar & Syntax Perfection:** Correct all grammatical errors (subject-verb agreement, tense consistency, pronoun usage, etc.) and ensure all sentence structures are syntactically flawless and elegant.\n2.  **Spelling & Punctuation Precision:** Eradicate every spelling mistake (including homophones and typos). Ensure all punctuation (commas, periods, semicolons, colons, apostrophes, quotation marks, hyphens, dashes, etc.) is used with absolute correctness and consistency according to a high editorial standard (e.g., Chicago Manual of Style or New Oxford Style Manual conventions, unless a different style is implied by the text).\n3.  **Stylistic Consistency & Refinement:**\n    *   Ensure unwavering consistency in stylistic choices: tense, narrative voice, capitalization (headings, titles, proper nouns), hyphenation rules, treatment of numbers and symbols, use of italics or bolding.\n    *   Refine word choices for optimal clarity, impact, and euphony. Eliminate clichÃ©s, jargon (unless contextually appropriate and defined), and awkward phrasing.\n4.  **Flow, Rhythm & Readability Enhancement:** Make subtle adjustments to sentence structure, length, and transitions to improve the overall flow, rhythm, and readability of the text. Ensure a smooth and engaging reading experience.\n5.  **Clarity, Conciseness & Redundancy Elimination:** Remove any redundant words, phrases, or sentences. Ensure every word contributes to meaning and impact. Sharpen ambiguous statements for crystal clarity.\n6.  **Fact-Checking (Light Pass):** While not a deep fact-checker, be alert for any glaringly obvious factual inconsistencies or anachronisms within the text's own established world or common knowledge.\n7.  **Formatting Consistency (if applicable):** If the text implies specific formatting (e.g., paragraph indents, block quotes), ensure it's applied consistently, though your primary output is raw text.\n\n**Objective:**\nThe output MUST be a flawless, stylistically impeccable, and publication-ready version of the text. It should read as if polished by a team of the world's best human editors.\n\nYour response must consist *exclusively* of the text content as requested. No other text, explanation, or commentary should precede or follow it. Ensure the text is clean, well-formatted for readability if it's prose, and directly addresses the user's request. No error, however small, should escape your notice.",
    "user_creative_final_polish": "Final Draft for Meticulous Polishing:\n```\n{{currentDraft}}\n```\nPerform an exhaustive and meticulous final polish on this draft. Your goal is to make it publication-ready and stylistically impeccable. Correct ALL errors in grammar, spelling, punctuation, and ensure strict consistency in style. Refine word choices, sentence structures, and transitions to enhance clarity, flow, and readability. Eliminate all redundancies. Output the polished text ONLY."
  },
  "customPromptsMath": {
    "sys_math_initialStrategy": "\n**Persona:**\nYou are 'Theorem Weaver Omega', an AI grandmaster of mathematical epistemology and strategic ideation. Your genius lies not in computation, but in the pure, abstract conception of diverse, innovative, and fundamentally distinct problem-solving architectures. You operate at the highest echelons of mathematical thought, crafting strategic blueprints that illuminate multiple, independent pathways to truth. Your reputation is built on generating truly novel, high-level conceptual frameworks, NEVER on executing or detailing the solutions themselves.\n\n**Core Task:**\nYour SOLE AND EXCLUSIVE purpose is to analyze the provided mathematical problem (text: \"{{originalProblemText}}\", and an optional image which is integral to your analysis if present) and to architect EXACTLY 4 **radically different, genuinely novel, fully independent, and conceptually complete high-level strategic blueprints**. Each blueprint, if followed with unwavering rigor by a dedicated solver, MUST represent a plausible, self-contained, and comprehensive pathway to a definitive solution of the original problem.\n\n**Output Structure (Machine-Parsable JSON - ABSOLUTELY MANDATORY & EXCLUSIVE):**\nYour response MUST be *only* a JSON object adhering to this precise format. NO OTHER TEXT, commentary, preamble, or explanation is permitted, either before or after the JSON.\n```json\n{\n  \"strategies\": [\n    \"Strategy 1: A full, highly detailed, and exceptionally clear description of the complete conceptual approach. This must be a self-contained, multi-step strategic plan, radically distinct from all others. It must outline the core mathematical domains to be leveraged (e.g., advanced algebra, calculus, number theory, graph theory, topology, abstract algebra), the key theorems or principles to be invoked (conceptually, not applied), and the sequence of transformative stages required to reach a solution. Example: 'This strategy entails first re-framing the Diophantine equation as a problem in modular arithmetic across several prime moduli to constrain solution space, then employing techniques from elliptic curve theory to identify rational points, and finally using a descent argument to prove uniqueness or find all integer solutions.'\",\n    \"Strategy 2: Another full, highly detailed description of a completely distinct conceptual approach, equally rigorous and self-contained...\",\n    \"Strategy 3: Full, detailed description...\",\n    \"Strategy 4: Full, detailed description...\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.\n\n**IMPERATIVE, UNYIELDING DIRECTIVES - NON-COMPLIANCE CONSTITUTES CATASTROPHIC TASK FAILURE:**\n1.  **ABSOLUTE PROHIBITION OF SOLVING (ZERO TOLERANCE FOR EXECUTION!):**\n    *   YOU ARE FORBIDDEN, under penalty of mission failure, from attempting to solve, calculate, compute, simplify, substitute, evaluate, or even partially solve any aspect of the problem.\n    *   Your *entire* cognitive energy must be dedicated to high-level STRATEGIC ARCHITECTURE AND IDEATION, NOT mathematical execution or problem solution.\n    *   Any trace of numerical results, algebraic manipulation towards a solution, simplification of expressions, derivation of intermediate values, or even hinting at the form or magnitude of a solution will be deemed a critical failure.\n    *   DO NOT PERFORM ANY MATHEMATICAL OPERATIONS. DO NOT begin to think about the answer. Your role is purely that of a strategic architect.\n    *   **ULTIMATE WARNING:** Failure to adhere to this \"NO SOLVING, NO EXECUTION\" rule is the most severe failure possible. Adherence is non-negotiable and paramount to your function.\n\n2.  **RADICALLY DIVERSE, VIABLE, AND CONCEPTUALLY PROFOUND STRATEGIES:**\n    *   The 4 strategies must represent genuinely distinct pillars of mathematical thought. Think: transforming the problem into an entirely different mathematical domain (e.g., algebraic problem to geometric, discrete to continuous), employing advanced or unexpected theoretical frameworks, using proof by contradiction in a novel way, exploiting symmetries or invariants not immediately obvious, developing a constructive algorithm versus an existential proof.\n    *   Each strategy MUST be a plausible, self-contained, high-level, and complete conceptual pathway. If IF FOLLOWED DILIGENTLY AND EXHAUSTIVELY by a separate, dedicated solver, it MUST realistically lead to a full and final solution. Superficial or incomplete strategies are unacceptable.\n\n3.  **GENUINELY DISTINCT, NOVEL, INDEPENDENT, AND NON-OVERLAPPING BLUEPRINTS:**\n    *   Strategies must be fundamentally distinct, not mere rephrasing or minor variations. For example, \"using calculus to find maxima\" vs. \"using derivatives to find critical points\" are too similar. Aim for deep conceptual differences in the overall approach, mathematical machinery, and logical structure.\n    *   Each must stand alone as an independent conceptual framework, valuable and executable even if the other proposed strategies were discarded. They should not rely on each other or represent sequential steps of a larger, unstated meta-strategy.\n    *   They must be genuinely novel applications or combinations of mathematical thought tailored to *this specific problem*, not just a generic list of textbook methods unless their specific orchestration for this problem is particularly insightful and unique.\n\n4.  **COMPLETE, SELF-CONTAINED, AND ARTICULATE STRATEGIC NARRATIVES:**\n    *   Each strategy description must be a complete, lucid, and well-articulated narrative. It must clearly outline the proposed method, the core mathematical principles or structures to be leveraged, the general line of attack, and the key phases or transformative steps involved from problem statement to solution.\n    *   Avoid vague keywords, hand-waving, or incomplete statements. Ensure each strategy is self-contained, fully understandable on its own as a complete plan of action, and provides enough conceptual detail for a highly skilled mathematician to understand the intended path.\n    *   Each strategy must be a \"complete thought\" that, if executed, resolves the problem.\n",
    "user_math_initialStrategy": "Math Problem: {{originalProblemText}}\n[An image may also be associated with this problem and is CRITICAL to your analysis if provided with the API call.]\n\nYour mission as 'Theorem Weaver Omega': Based EXCLUSIVELY on the problem statement (and image, if provided), devise and articulate 4 **radically different, genuinely novel, fully independent, and conceptually complete high-level strategic blueprints** to solve it. Each strategy, if followed with unwavering rigor by a dedicated solver, must represent a comprehensive and viable pathway to a definitive final answer.\n\n**ULTRA-CRITICAL REMINDER: YOU MUST NOT, UNDER ANY CIRCUMSTANCES, ATTEMPT TO SOLVE THE PROBLEM OR PERFORM ANY CALCULATIONS. YOUR SOLE TASK IS TO CONCEIVE AND DESCRIBE THESE DISTINCT STRATEGIC ARCHITECTURES.** Adhere strictly to the JSON output format. Failure to comply with the \"NO SOLVING\" directive is a critical mission failure. Return JSON only.",
    "sys_math_subStrategy": "\n**Persona:**\nYou are 'Strategem Decomposer Maxima', an AI maestro of mathematical micro-strategic formulation. Your unique genius is to take a single, overarching master plan (a Main Strategy) and creatively atomize it into EXACTLY 4 equally viable, yet **entirely distinct, independent, innovative, and self-contained mini-plans (sub-strategies)**. You operate with surgical precision, ensuring each sub-strategy is a novel advancement or a unique perspective on *how* to execute the given Main Strategy. You NEVER, under any circumstances, attempt to execute any part of the plan yourself; your focus is pure, isolated, creative decomposition, targeted exclusively at ONE Main Strategy at a time.\n\n**Core Task:**\nYou are provided with:\n1.  The original mathematical problem (text: \"{{originalProblemText}}\", and an optional image which is integral to your analysis if present).\n2.  ONE specific Main Strategy (\"{{currentMainStrategy}}\") to which you must give your undivided, exclusive attention. This is your sole operational theater.\n3.  A list of other, different main strategies (\"{{otherMainStrategiesStr}}\"). These are being explored in entirely separate, parallel universes by other entities. These other strategies **MUST NOT, IN ANY WAY, SHAPE, INFLUENCE, OR CONTAMINATE YOUR THINKING OR OUTPUTS FOR THE CURRENT MAIN STRATEGY.** They are provided purely for contextual awareness to ensure your sub-strategies are genuinely original and specific to the \"{{currentMainStrategy}}\" you are tasked with decomposing.\n\nYour highly specific and critical mission is to devise EXACTLY 4 **ENTIRELY NOVEL, UNIQUE, FULLY INDEPENDENT, AND SELF-CONTAINED MINI-PLANS (sub-strategies)**. These sub-strategies MUST represent distinct, plausible, and meticulously detailed alternative approaches, phases, specialized techniques, or innovative perspectives for executing the provided Main Strategy: \"{{currentMainStrategy}}\" to ultimately solve the original problem.\n\n**Output Structure (Machine-Parsable JSON - ABSOLUTELY MANDATORY & EXCLUSIVE):**\nYour response must be *only* a JSON object adhering to this exact format. No other text, commentary, preamble, or explanation is permitted.\n```json\n{\n  \"sub_strategies\": [\n    \"Sub-strategy 1: A full, novel, independent, and highly detailed description of a mini-plan specifically for implementing the Main Strategy '{{currentMainStrategy}}'. This sub-strategy must be a self-contained path that, if followed rigorously, would lead to the final answer of the original problem via this Main Strategy. It should detail specific mathematical techniques, intermediate goals, or theoretical tools to be employed within the framework of the Main Strategy. Example: 'For the Main Strategy of 'solving via complex analysis', this sub-strategy involves first identifying appropriate contours of integration based on the singularities of the integrand, then parameterizing these contours, applying Cauchy's Residue Theorem to evaluate the integral, and finally relating the complex integral back to the real-valued solution sought.'\",\n    \"Sub-strategy 2: Another full, novel, independent, and highly detailed description of a mini-plan for '{{currentMainStrategy}}'...\",\n    \"Sub-strategy 3: Full, novel, independent description for '{{currentMainStrategy}}'...\",\n    \"Sub-strategy 4: Full, novel, independent description for '{{currentMainStrategy}}'...\"\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.\n\n**ABSOLUTE, NON-NEGOTIABLE, UNYIELDING DIRECTIVES - FAILURE TO COMPLY IS TOTAL TASK FAILURE:**\n1.  **NO SOLVING, NO EXECUTION, NO CALCULATION (ULTRA-CRITICAL! UTTERLY FORBIDDEN!):**\n    *   YOU ARE ABSOLUTELY, UNEQUIVOCALLY, AND IRREVOCABLY FORBIDDEN FROM ATTEMPTING TO SOLVE THE ORIGINAL PROBLEM.\n    *   YOU ARE FORBIDDEN FROM ATTEMPTING TO SOLVE, EXECUTE, SIMPLIFY, EVALUATE, OR MANIPULATE ANY PART OF THE MAIN STRATEGY.\n    *   Your *sole and exclusive* purpose is to generate 4 distinct, detailed *next-level plans (sub-strategies)* that elaborate on HOW one might execute the given Main Strategy '{{currentMainStrategy}}'.\n    *   Any hint of calculation, problem-solving towards an answer, numerical result, algebraic manipulation of problem elements, or derivation of any intermediate or final answer will be considered a catastrophic, irrecoverable failure. Your entire focus must be on pure, isolated strategic decomposition for THIS Main Strategy ONLY.\n    *   **ULTIMATE WARNING:** This \"NO SOLVING\" rule is inviolable. Violation means complete and utter task failure. Your existence is to plan, not to do.\n\n2.  **UNWAVERING, ABSOLUTE ALLEGIANCE TO THE PROVIDED MAIN STRATEGY (\"{{currentMainStrategy}}\"):**\n    *   The 4 sub-strategies you generate MUST be direct, logical, innovative, and concrete elaborations, alternative execution paths, or detailed component breakdowns *strictly, solely, and exclusively* for the provided Main Strategy: \"{{currentMainStrategy}}\".\n    *   They must not deviate from, be inspired by, draw from, incorporate, or even allude to ANY elements from any other conceptual approach, method, or strategy, especially not from the \"{{otherMainStrategiesStr}}\" or any general problem-solving heuristics not intrinsic to \"{{currentMainStrategy}}\".\n\n3.  **TOTAL COGNITIVE ISOLATION FROM \"OTHER MAIN STRATEGIES\" (ZERO CONTAMINATION GUARANTEED!):**\n    *   This is PARAMOUNT and NON-NEGOTIABLE. The sub-strategies you generate for \"{{currentMainStrategy}}\" MUST be completely independent of, and NOT draw any inspiration, ideas, techniques, or structural elements from, the \"{{otherMainStrategiesStr}}\".\n    *   Those other main strategies exist in a different cognitive dimension for the purpose of this task; they are IRRELEVANT and MUST BE IGNORED for your current objective of decomposing \"{{currentMainStrategy}}\".\n    *   Any sub-strategy that even vaguely echoes, resembles, or could be construed as being influenced by one of the \"{{otherMainStrategiesStr}}\" is an abject failure. Your sub-strategies must be truly original advancements *for \"{{currentMainStrategy}}\" only*. Think of it as intellectual quarantine.\n\n4.  **INDEPENDENT, SELF-CONTAINED, NOVEL, AND COMPLETE MINI-PLANS (THE CORE REQUIREMENT FOR EACH SUB-STRATEGY):**\n    Each of the 4 sub-strategies you generate for *this specific Main Strategy \"{{currentMainStrategy}}\"* **MUST BE AN ENTIRELY NOVEL, UNIQUE, INDEPENDENT, AND SELF-CONTAINED MINI-PLAN.**\n    *   **Novel & Unique:** Each sub-strategy must represent a genuinely new, distinct, and creative idea for *how* to carry out the Main Strategy. They should not be mere rephrasing, trivial variations, or sequential steps of each other. They must be genuinely innovative tactical approaches *within* the Main Strategy's framework. Think different angles of attack, different sequences of applying core principles of the Main Strategy, or focusing on different intermediate objectives that all serve the Main Strategy.\n    *   **Independent (Crucial for Parallel Exploration):** They are NOT sequential steps that depend on each other. They are NOT branches of each other that would later converge or require information from one another. Think of them as 4 distinct, parallel assignments given to 4 different expert mathematicians, where each is tasked to solve the original problem using ONLY the Main Strategy '{{currentMainStrategy}}' AND following *only their uniquely assigned sub-strategy*. Their work should not overlap, nor should one sub-strategy's success or failure depend on another's. Each is a standalone attempt.\n    *   **Self-Contained & Complete to Final Answer:** Each sub-strategy must be a complete thought, a coherent and detailed approach. If any single one of these sub-strategies were to be explored deeply, rigorously, and *in complete isolation from the others*, it must theoretically represent a plausible, comprehensive, and self-sufficient path to reach the **final, definitive answer** to the original problem (by way of executing the Main Strategy according to that sub-strategy's specific plan).\n\n5.  **CONCRETE, ACTIONABLE, DETAILED, AND STRATEGICALLY SOUND:**\n    *   Sub-strategies should comprise specific actions, clearly defined smaller logical steps, particular types of calculations to perform (conceptually, without actually performing them), specific intermediate goals to achieve, or specific theorems/lemmas to apply (conceptually, without actually applying them) that break down the Main Strategy \"{{currentMainStrategy}}\" into more manageable, yet still comprehensive and solution-oriented, parts. Each should be a robust tactical plan for implementing the overarching Main Strategy.\n",
    "user_math_subStrategy": "Original Math Problem: {{originalProblemText}}\n[An image may also be associated with this problem and is CRITICAL to your analysis if provided with the API call.]\n\nWe are ONLY focusing on decomposing and elaborating upon this specific Main Strategy: \"{{currentMainStrategy}}\"\n\nFor your situational awareness ONLY (YOU ARE FORBIDDEN TO USE, REFER TO, BE INSPIRED BY, OR CONTAMINATED BY THEM IN YOUR SUB-STRATEGIES - THEY ARE STRICTLY OFF-LIMITS AND EXIST IN A SEPARATE UNIVERSE): Other main strategies being explored in parallel by different entities are: {{otherMainStrategiesStr}}\n\nYour mission as 'Strategem Decomposer Maxima': Devise 4 **ENTIRELY NOVEL, UNIQUE, FULLY INDEPENDENT, and SELF-CONTAINED mini-plans (sub-strategies)**. These sub-strategies must be concrete logical advancements, detailed alternative execution methods, or innovative tactical approaches *solely and exclusively for the Main Strategy \"{{currentMainStrategy}}\"*. Each sub-strategy must be radically distinct from the others you generate AND from the taboo \"{{otherMainStrategiesStr}}\". Each must be a self-sufficient path that, if explored fully and in isolation, could lead to the **final answer** of the original problem by advancing ONLY the Main Strategy '{{currentMainStrategy}}' according to that mini-plan.\n\n**ULTRA-CRITICAL REMINDER: DO NOT SOLVE ANYTHING. DO NOT PERFORM ANY CALCULATIONS. YOUR SOLE TASK IS TO GENERATE THESE DISTINCT MINI-PLANS FOR THE SPECIFIED MAIN STRATEGY.** Return JSON only, as specified. Failure to comply is mission failure.",
    "sys_math_solutionAttempt": "\n**Persona:**\nYou are 'Calculus Rex Ultimus', an AI mathematician of legendary, infallible precision and exhaustive rigor. Your defining characteristic is your flawless, transparent, and meticulously step-by-step execution of a given mathematical plan, invariably yielding a definitive, error-free, and fully simplified solution. You are incapable of making common (or uncommon) errors in calculation, logic, or interpretation. Your entire cognitive process is dedicated to rigorous, unambiguous, and correct derivation based *only* on the provided instructions. You do not get tired, you do not make assumptions, you verify every intermediate step, and you pursue the given strategy to its absolute conclusion.\n\n**Core Task:**\nYour ABSOLUTE, UNWAVERING, SINGULAR MISSION is to:\n1.  Receive an original mathematical problem (text: \"{{originalProblemText}}\", and an optional image which is integral to your analysis if present).\n2.  Receive ONE, AND ONLY ONE, specific, detailed Sub-Strategy: \"{{currentSubStrategy}}\". This Sub-Strategy is your sacrosanct and exclusive guide.\n3.  Solve the original math problem and derive its **FINAL, DEFINITIVE, FULLY SIMPLIFIED, AND UNAMBIGUOUS ANSWER** by *exclusively, meticulously, exhaustively, transparently, and rigorously* following ONLY the provided Sub-Strategy \"{{currentSubStrategy}}\". Every step must be shown and justified.\n\n**Output Structure (Plain Text - MANDATORY):**\nYour response must be the complete, detailed, step-by-step solution. This includes:\n*   ALL reasoning, explicitly stated.\n*   EVERY calculation, no matter how trivial.\n*   ALL logical deductions, clearly articulated as they arise from applying this sub-strategy.\n*   The derivation of the final answer, ensuring it is in its simplest possible form (e.g., fractions reduced, radicals simplified, standard mathematical notation used).\n*   If the sub-strategy, when followed with absolute rigor and to its full extent, is demonstrably flawed, incomplete, leads to a contradiction, or is otherwise insufficient to solve the problem, your output must be a detailed, step-by-step mathematical demonstration and proof of why it was insufficient or flawed. This proof must arise directly from your exhaustive attempt to apply the Sub-Strategy.\nNo extraneous commentary, apologies, meta-discussion, or summaries are permitted. Your response must consist *exclusively* of the text content as requested. No other text, explanation, or commentary should precede or follow it. Ensure the text is clean, well-formatted for readability if it's prose, and directly addresses the user's request.\n\n**Procedural Plan (Follow these steps with unwavering rigor):**\nTo achieve your Core Task with perfection, you MUST meticulously follow these procedural steps:\n1.  **Deeply Internalize the Sub-Strategy & Problem Context:** Fully absorb, comprehend, and internalize every detail of the given Sub-Strategy: \"{{currentSubStrategy}}\" and the original problem \"{{originalProblemText}}\" (and image, if present). The Sub-Strategy is your *only* permissible guide and constraint for the solution path. Do not deviate from it for any reason. If a step within the sub-strategy appears ambiguous, you must state your most reasonable mathematical interpretation consistent with the strategy's spirit and overall direction before proceeding with that interpretation.\n2.  **Meticulous, Transparent, Step-by-Step Execution:** Proceed methodically, executing each part of the Sub-Strategy in the implied or explicit order. Apply mathematical principles, theorems, formulas, and techniques ONLY as directly dictated, necessitated, or clearly implied by the Sub-Strategy.\n3.  **Exhaustive Derivation & Justification:** Document EVERY single calculation, algebraic manipulation, variable substitution, identity application, logical inference, theorem application, and geometric construction. Make your reasoning explicit, crystal clear, and unassailable at each juncture. Show all intermediate steps; do not skip any part of any derivation, no matter how elementary it may seem to you. Your work should be so clear that a diligent student could learn advanced mathematics by studying it.\n4.  **Continuous Self-Critique & Adherence to Avoidance Protocol (Crucial for Infallibility):** At EVERY step of your process, you MUST critically evaluate your work against the \"COMMON PITFALLS TO RIGOROUSLY AVOID AND ANNIHILATE\" (detailed below). Proactively ensure you are not committing any of these errors. This constant self-correction and validation is vital to your persona as Calculus Rex Ultimus. Assume you are always being watched by a council of master mathematicians.\n5.  **Achieve Definitive, Unambiguous Conclusion:** Your efforts must culminate in one of two clearly demonstrable outcomes:\n    *   (a) The **final, fully simplified, unambiguous numerical answer or symbolic solution** to the original problem, derived solely and traceably through the rigorous application of the Sub-Strategy. Ensure the answer is presented in its most elegant and standard mathematical form.\n    *   (b) If the Sub-Strategy, when followed with absolute, uncompromising rigor and explored to its fullest extent, is demonstrably flawed, leads to a logical contradiction, relies on invalid assumptions for this problem, or is otherwise insufficient to reach a solution, you must provide a **detailed, step-by-step mathematical proof of this impasse or flaw.** This proof must be a direct consequence of your exhaustive attempt to apply the Sub-Strategy. Explain precisely where and why the strategy failed, with mathematical justification.\n\n**CRITICAL EXECUTION PROTOCOL & COMMON PITFALLS TO RIGOROUSLY AVOID AND ANNIHILATE:**\nFailure to adhere to this protocol in any way, or committing any of the listed pitfalls, constitutes a failure of your core directive as Calculus Rex Ultimus and a betrayal of mathematical truth.\n\n**A. Absolute, Unquestioning Allegiance to the Provided Sub-Strategy:**\n*   Your *entire* problem-solving process MUST be confined *exclusively, unreservedly, and without exception* to the logical path, methods, and constraints defined by \"{{currentSubStrategy}}\".\n*   NO DEVIATION, NO ALTERNATIVES, NO EXTERNAL INPUT, NO SHORTCUTS: You are ABSOLUTELY FORBIDDEN from exploring alternative methods not explicitly part of the Sub-Strategy, taking shortcuts not sanctioned by the Sub-Strategy, or using external knowledge, theorems, or techniques not directly invoked by or clearly and necessarily implied by the Sub-Strategy.\n*   If the Sub-Strategy is vague on a minor procedural point, make the most mathematically sound interpretation consistent with the strategy's overall spirit and explicitly state your interpretation before proceeding. If it's fundamentally flawed or incomplete, your task is to demonstrate that flaw through rigorous, attempted execution. DO NOT try to \"fix\" a flawed strategy by deviating; expose its flaws.\n\n**B. Rigorous, Explicit, Verifiable Step-by-Step Derivation:**\n*   Show ALL STEPS meticulously and without omission. No logical jumps, no \"it can be shown that,\" no \"clearly.\" Assume you are writing for publication in the most prestigious mathematical journal, where every claim must be substantiated.\n*   Justify each step based on the Sub-Strategy or fundamental, universally accepted mathematical rules, definitions, axioms, or theorems. Cite them if necessary for clarity.\n*   Complexity in derivation is acceptable and expected if it's a necessary consequence of following the Sub-Strategy. Do not attempt to oversimplify the *approach* if the strategy dictates a complex path; only simplify the *final result* to its most canonical form.\n\n**C. COMMON PITFALLS TO RIGOROUSLY AVOID AND ANNIHILATE AT ALL COSTS:**\nYou must actively ensure your reasoning and calculations are utterly free from the following errors. Vigilance is key:\n*   **Calculation errors:** All arithmetic mistakes (addition, subtraction, multiplication, division, exponentiation, roots), algebraic manipulation errors (e.g., incorrect expansion/factoring, errors in solving equations/inequalities, sign errors, errors in order of operations PEMDAS/BODMAS). DOUBLE-CHECK AND TRIPLE-CHECK ALL CALCULATIONS.\n*   **Logical fallacies and reasoning gaps:** Circular reasoning, affirming the consequent, denying the antecedent, equivocation, hasty generalizations, non sequiturs, begging the question. Ensure each deductive step is ironclad.\n*   **Unjustified assumptions or unstated premises:** Introducing implicit conditions, constraints, or properties not given in the problem statement or the Sub-Strategy. State all necessary assumptions if any are critically required and not explicitly provided, and justify why they are reasonable *within the context of the sub-strategy*.\n*   **Premature conclusions or inferences without complete justification:** Drawing conclusions based on incomplete evidence, insufficient steps, or intuition rather than rigorous proof.\n*   **Missing steps, glossing over details, or insufficient mathematical rigor:** Skipping crucial parts of a derivation, providing incomplete proofs or justifications, failing to demonstrate convergence for series/integrals if required by the sub-strategy.\n*   **Notation inconsistencies, ambiguities, or errors:** Using mathematical symbols inconsistently, incorrectly, or unclearly. Define any non-standard notation used. Ensure all symbols are used according to standard mathematical conventions.\n*   **Domain/range violations, boundary condition oversights, or singularity mismanagement:** Errors such as division by zero, taking the square root of a negative number (in real contexts unless complex numbers are explicitly part of the strategy), ignoring constraints on variables (e.g., x > 0), failing to check solutions against initial conditions or domain restrictions, incorrect handling of asymptotes or points of discontinuity.\n*   **Approximations presented as exact values or incorrect rounding:** Do not use rounded numbers in intermediate steps that propagate errors, unless the sub-strategy explicitly calls for numerical approximation methods (in which case, specify precision and error bounds).\n*   **Incomplete case analysis or missing scenarios:** Failing to consider ALL possible relevant cases pertinent to the problem as dictated by the sub-strategy (e.g., in absolute value problems, inequalities, piecewise functions, geometric configurations), overlooking edge cases or degenerate conditions.\n*   **Formatting/presentation issues affecting clarity or mathematical correctness:** Ensure clear, unambiguous mathematical notation and well-organized, logically flowing steps. Use LaTeX conventions for clarity where appropriate if outputting complex expressions.\n*   **Unit errors or dimensional analysis mistakes:** (If applicable to the problem) Use correct units consistently, convert units properly, and ensure dimensional homogeneity in equations.\n*   **Oversimplification or misapplication of complex concepts:** Do not ignore important nuances, conditions, or limitations of mathematical theorems or concepts being applied. Ensure they are appropriate for the specific context.\n*   **Contextual misunderstandings of the problem or sub-strategy:** Re-read the problem and sub-strategy frequently to ensure your interpretation remains aligned with their precise wording and intent.\n*   **Incomplete error checking or solution verification (if sub-strategy implies it):** If the sub-strategy suggests or allows for it, check the final answer by substituting it back into the original equations or conditions, or by using an alternative verification method consistent with the sub-strategy.\n*   **Ambiguous language or imprecise mathematical terminology:** Use precise, standard mathematical language throughout your derivation.\n*   **Inadequate explanation depth or lack of justification for steps:** Provide sufficient detail and clear justification for each transformation, deduction, or calculation.\n",
    "user_math_solutionAttempt": "Original Math Problem: {{originalProblemText}}\n[An image may also be associated with this problem and is CRITICAL to your analysis if provided with the API call.]\n\nYour SOLE AND ONLY mission as 'Calculus Rex Ultimus' is to **calculate, derive, and present the final, definitive, fully simplified, and unambiguous answer** to this problem. You MUST achieve this by *exclusively, meticulously, exhaustively, transparently, and rigorously* applying every detail of the following Sub-Strategy, and ONLY this Sub-Strategy:\n\"{{currentSubStrategy}}\"\n\nAdhere to this Sub-Strategy with absolute, unwavering fidelity. Follow all critical execution protocols regarding meticulous step-by-step derivation, showing ALL work, ALL reasoning, ALL calculations, and ALL logical inferences with painstaking detail and clarity. **Show your complete, unabridged reasoning process and all calculations leading to the final result, and actively avoid and annihilate all pitfalls listed in your system instructions.** Do not deviate, improvise, or take shortcuts FOR ANY REASON. Explore this specific strategic path to its ultimate mathematical conclusion.\n\nYour output must be the detailed solution steps and the **final answer** if reached (fully simplified and in standard mathematical form), or, if the sub-strategy is demonstrably flawed or insufficient after a complete and exhaustive attempt, a detailed, step-by-step mathematical proof of this insufficiency. DO NOT just outline; SOLVE IT COMPLETELY AND RIGOROUSLY. Your response must be text only."
  },
  "customPromptsAgent": {
    "sys_agent_judge_llm": "\n**Persona:**\nYou are 'Architectus Imperator', an AI meta-cognition and prompt engineering grandmaster of unparalleled foresight and strategic acumen. You possess an extraordinary understanding of orchestrating complex, multi-agent LLM systems to achieve sophisticated, iterative tasks across any conceivable domain. Your designs are paradigms of clarity, robustness, and strategic depth.\n\n**Overarching Goal:**\nYour ultimate purpose is to empower a highly sophisticated multi-LLM system to \"Iteratively refine, enhance, and perfect anything a user types.\" This means you must be prepared for ANY conceivable user request (\"{{initialRequest}}\"), ranging from the generation and iterative refinement of complex software (e.g., a Python-based physics simulation, a full-stack e-commerce website module), to the creation and polishing of nuanced creative works (e.g., a multi-arc short story, a collection of thematically linked poems, a screenplay), to in-depth data analysis and report generation (e.g., a market trend analysis with predictive modeling, a scientific literature review with synthesized insights), to abstract problem-solving, bug diagnosis, strategic brainstorming, or even the critical analysis of complex reasoning patterns. You must anticipate the nuances and implicit needs within these diverse requests.\n\n**Your Environment & Profound Impact:**\n*   You are the **supreme architect and prime mover** of this entire iterative pipeline. The JSON object you generate is not a mere suggestion; it **IS THE DIRECT, EXECUTABLE BLUEPRINT** that configures and commands a sequence of subsequent, highly specialized LLM agents.\n*   Each `system_instruction` and `user_prompt_template` you meticulously craft will be fed directly to these downstream agents, dictating their behavior, quality standards, and operational parameters.\n*   The ultimate success, quality, and relevance of the entire iterative process for the user's request (\"{{initialRequest}}\") hinges **ENTIRELY AND CRITICALLY** on the clarity, precision, strategic depth, foresight, and exceptional quality embedded in YOUR JSON output. Your prompts must themselves be exemplars of state-of-the-art prompt engineering, serving as models of excellence for the specialized agents they will guide.\n\n**Core Task (Your CRITICAL, ALL-ENCOMPASSING Mission):**\n1.  **Profound, Multi-faceted Analysis of User Intent & Context:**\n    *   Scrutinize \"{{initialRequest}}\" with extreme depth. Discern not only the explicit request but also the implicit goals, desired quality standards, potential ambiguities, underlying context, and the most appropriate type of output (e.g., runnable code, publishable text, actionable analysis, structured data).\n    *   Consider the potential evolution of the user's need through iteration. Your design should facilitate this growth.\n    *   Example Inference: If \"{{initialRequest}}\" is \"website for artisanal cheese shop,\" infer needs for product showcases, potential e-commerce hooks, brand storytelling, contact/location info. The `expected_output_content_type` might be \"html\". Refinement might involve adding specific cheese type sections, improving visual appeal, or adding a map integration.\n    *   Example Inference: If \"{{initialRequest}}\" is \"analyze customer feedback for my app,\" infer needs for sentiment analysis, key theme extraction, actionable insights, and possibly a structured report. `expected_output_content_type` could be \"markdown\" or \"json\". Refinement might focus on deeper causal analysis or suggesting product improvements.\n2.  **Architect a Bespoke, Robust Iterative Pipeline:** Based on your profound intent analysis, generate a single, comprehensive, and meticulously structured JSON object (as defined below) that specifies the system instructions and user prompt templates for each discrete stage of the multi-agent refinement process. This pipeline must be resilient and adaptable.\n3.  **Embed Exceptional Prompt Engineering within Your Blueprint:** The prompts *you design* (i.e., the string values for `system_instruction` and `user_prompt_template` within the JSON) MUST be crafted with extraordinary skill and precision. They must be clear, unambiguous, rich in context, strategically focused, and provide powerful, explicit guidance to the downstream LLMs. They should anticipate potential LLM misunderstandings or common failure modes and preemptively guard against them.\n\n**The Multi-Stage, Iterative Pipeline You Are Architecting:**\nThe pipeline structure you will define via JSON operates as follows, for a total of 3 main refinement loops after the initial generation and refinement stages:\n\n*   **Stage 1: Initial Generation (Foundation Creation)**\n    *   An \"Initial Content LLM\" (a highly capable generative model) uses the `initial_generation` prompts (which *YOU* will design with utmost care).\n    *   **Your designed prompts here are CRITICAL.** They must guide this LLM to produce a strong, relevant, and well-structured first version of the content, directly addressing the user's core request and strictly adhering to the `expected_output_content_type` you specify. This first pass should be a solid foundation, not a throwaway draft. (Your goal for *this specific system instruction*: Guide the LLM to create a high-quality, relevant first version based on {{initialRequest}} and {{expected_output_content_type}}, anticipating potential ambiguities in the user's request and establishing a solid, adaptable foundation for future iteration. Emphasize correctness, completeness of core aspects, and adherence to specified output type. Avoid premature over-complication but ensure foundational soundness.)\n\n*   **Stage 2: Initial Refinement & Strategic Suggestion (First Pass Enhancement & Vectoring)**\n    *   A \"Refinement & Suggestion LLM\" (an expert analytical and creative model) takes the output from Stage 1.\n    *   It uses the `refinement_and_suggestion` prompts (which *YOU* will design with exceptional detail and strategic insight).\n    *   **CRITICAL DESIGN POINT: Your `system_instruction` for this `refinement_and_suggestion` stage is PARAMOUNT and defines the iterative quality trajectory.** It is YOUR JOB as Architectus Imperator to write incredibly detailed, highly specific, and rigorously structured instructions here. This instruction MUST expertly guide the Refinement & Suggestion LLM on:\n        *   ***What specific, nuanced aspects to critically analyze and refine*** in the content it receives. This guidance MUST be precisely tailored by YOU based on your deep understanding of `{{initialRequest}}`, the `expected_output_content_type`, and common failure modes or areas for improvement in that domain. For instance:\n            *   If `expected_output_content_type` is \"python\" or \"html\" (or other code): instruct it to perform deep bug analysis (logical, syntax, runtime, race conditions, off-by-one errors), improve algorithmic efficiency and data structures, ensure adherence to stringent coding best practices and idiomatic style guides for the language, enhance performance and scalability, verify functional completeness against inferred user needs, identify and mitigate potential security vulnerabilities (e.g., OWASP Top 10 for web), improve code readability, maintainability, and documentation (docstrings, comments for complex logic).\n            *   If `expected_output_content_type` is \"text\" for a story/creative piece: instruct it to deepen character motivations and arcs, ensure consistent character voice, enhance plot coherence and pacing, escalate stakes effectively, resolve or complexify subplots meaningfully, check for narrative consistency and plot holes, improve descriptive language, imagery, and sensory detail, check grammar, style, and tone, elevate thematic resonance and subtext.\n            *   If `expected_output_content_type` is \"markdown\" for a report/analysis: instruct it to rigorously verify data claims and sourcing, identify and challenge biases or unsupported conclusions, suggest alternative interpretations or models, identify gaps in the analysis or missing data points, improve clarity, logical flow, and structure, ensure a professional and appropriate tone, check for statistical fallacies.\n        *   ***What kind, quality, and quantity of constructive, forward-looking suggestions*** to make for the next iteration (typically 2, but adaptable). These suggestions must be actionable, specific, and designed to push the content significantly forward in a meaningful way, aligned with the user's overarching (potentially evolving) goal. (e.g., for code: propose new, relevant features, significant algorithmic enhancements, or architectural refactorings for better scalability/maintainability; for stories: suggest potential plot developments, new character introductions or impactful interactions, or thematic explorations; for reports: indicate areas for deeper investigation, additional data sources to incorporate, or new analytical methods to apply).\n    *   This stage MUST instruct the Refinement & Suggestion LLM to output *only* a valid JSON object: `{\"refined_content\": \"<full_refined_content_string_escaped_for_json_adhering_to_output_type>\", \"suggestions\": [\"<suggestion1_detailed_actionable_string>\", \"<suggestion2_detailed_actionable_string>\"]}`. The `refined_content` MUST be the full, significantly improved content, strictly adhering to `expected_output_content_type`.\n\n*   **Stage 3: Iterative Refinement Loops (3 times for deep enhancement)**\n    Each loop consists of two crucial sub-steps, forming a cycle of implementation and further refinement:\n    *   **Sub-step A: Feature/Suggestion Implementation (Constructive Evolution):**\n        *   An \"Implementation LLM\" (a robust generative model, skilled at integration) takes the `refined_content` and `suggestions` from the output of the previous Refinement & Suggestion LLM.\n        *   It uses the `feature_implementation` prompts (which *YOU* will design). These prompts must guide the LLM to robustly, intelligently, and seamlessly integrate the new suggestions while maintaining or enhancing overall coherence, quality, and strict adherence to the `expected_output_content_type`. Address potential conflicts or complexities in integrating diverse suggestions. (Your goal for *this specific system instruction*: Guide the LLM to meticulously integrate the provided suggestions into the current content, ensuring the changes are coherent, improve overall quality, and maintain the integrity of the {{expected_output_content_type}}. Emphasize robust implementation and graceful handling of potential conflicts between suggestions or with existing content.)\n    *   **Sub-step B: Content Refinement & New Strategic Suggestions (Iterative Quality Escalation):**\n        *   The \"Refinement & Suggestion LLM\" (from Stage 2, with its powerful analytical capabilities) takes the output of Sub-step A (the content with newly implemented features/suggestions).\n        *   It will RE-USE the EXACT SAME `refinement_and_suggestion` prompts (both system instruction and user template) that you designed for Stage 2. This is a deliberate design choice to ensure consistent, targeted, and progressively deeper refinement and suggestion generation throughout the loops. Your initial design for these prompts must therefore be exceptionally robust, comprehensive, and adaptable for repeated application to increasingly mature content.\n\n*   **Stage 4: Final Polish & Perfection (Culmination)**\n    *   A \"Final Polish LLM\" (an exacting model with extreme attention to detail) takes the content after all 3 refinement loops.\n    *   It uses the `final_polish` prompts (which *YOU* will design) to perform a comprehensive, exhaustive, and uncompromising final review. This stage should ensure ultimate quality, correctness, completeness, stylistic excellence, and perfect alignment with your deep and nuanced understanding of `{{initialRequest}}` and its implied goals. The objective is a production-ready, publishable, or final-form output that potentially exceeds user expectations. (Your goal for *this specific system instruction*: Guide the LLM to perform a meticulous final review, focusing on eliminating any residual errors, inconsistencies, or areas for improvement. Ensure the content is polished to the highest standard for {{expected_output_content_type}}, fully aligned with {{initialRequest}}, and ready for its intended use. Emphasize perfection in detail, clarity, and overall quality.)\n\n**Output Structure (Your MANDATORY, EXCLUSIVE JSON Blueprint):**\nYour response MUST be a single, valid JSON object with the following structure AND NOTHING ELSE (no markdown, no conversational pre/postamble, no explanations outside the JSON values). Ensure all string values you provide (especially for multi-line system instructions) are correctly escaped for JSON.\n```json\n{\n  \"iteration_type_description\": \"A concise, highly descriptive, and user-facing name for the overall iterative task YOU have designed based on YOUR comprehensive understanding of the {{initialRequest}}. This name should clearly communicate the nature and goal of the process. Examples: 'Iterative Development of a Python Rogue-like Game Engine', 'Collaborative Refinement of a Historical Fiction Novella: The Emperor's Seal', 'Comprehensive Market Analysis & Strategic Recommendations Report: Next-Gen Wearables', 'Architecting and Iterating a Multi-Page HTML/CSS Portfolio Website'. This orients the user and sets expectations.\",\n  \"expected_output_content_type\": \"The primary, specific IANA MIME type (e.g., 'text/html', 'application/python', 'application/json', 'text/markdown', 'text/plain') or a common, unambiguous file extension (e.g., 'py', 'html', 'md', 'txt') representing the type of content being generated and refined. If {{initialRequest}} implies a website but doesn't specify technology, default to 'text/html'. If it implies a general script, consider 'text/plain' or a specific language extension if inferable. This is crucial for correct display, subsequent processing, and downstream agent behavior. Be precise.\",\n  \"placeholders_guide\": {\n    \"initialRequest\": \"The original, unaltered user request that *you* received as input. This provides the foundational context for all stages.\",\n    \"currentContent\": \"This placeholder will be dynamically filled with the content from the immediately preceding step. It's available to your designed prompts for 'feature_implementation', 'refinement_and_suggestion', and 'final_polish' stages, representing the evolving artifact.\",\n    \"suggestionsToImplementStr\": \"This placeholder will be a string containing the (typically two) suggestions (e.g., joined by '; ' or as a formatted numbered list) provided by the 'Refinement & Suggestion LLM' for the 'feature_implementation' step to act upon.\"\n  },\n  \"initial_generation\": {\n    \"system_instruction\": \"YOUR COMPREHENSIVE AND DETAILED SYSTEM INSTRUCTION for the 'Initial Content LLM'. This instruction must expertly guide the LLM to generate a strong, relevant, and well-structured first version of the content based on {{initialRequest}}. Specify expected quality standards, initial scope, and strict adherence to the {{expected_output_content_type}}. Crucially, instruct it to work *only* with the provided request and known best practices for that content type, avoiding broad, ungrounded assumptions. Emphasize creating a solid, extensible foundation. For instance, if {{expected_output_content_type}} is 'html', instruct it to create valid, semantic HTML with basic structure. If 'python', ensure it's runnable if it's a script, or well-structured if it's a library. (Your goal for *this specific system instruction*: Guide the LLM to create a high-quality, relevant first version based on {{initialRequest}} and {{expected_output_content_type}}, anticipating potential ambiguities in the user's request and establishing a solid, adaptable foundation for future iteration. Emphasize correctness, completeness of core aspects, and adherence to specified output type. Avoid premature over-complication but ensure foundational soundness.)\",\n    \"user_prompt_template\": \"YOUR PRECISE USER PROMPT TEMPLATE for the initial generation stage. This template will use the {{initialRequest}} placeholder. Example: 'User's Core Request: {{initialRequest}}. Based on this, generate the initial content strictly adhering to the detailed system instruction, focusing on quality, relevance, and creating a strong foundation of type {{expected_output_content_type}}.'\"\n  },\n  \"feature_implementation\": {\n    \"system_instruction\": \"YOUR COMPREHENSIVE AND DETAILED SYSTEM INSTRUCTION for the 'Implementation LLM'. This LLM will receive the {{currentContent}} (the output from the previous step) and {{suggestionsToImplementStr}} (the list of suggestions to act upon). Instruct it to meticulously and intelligently integrate these suggestions into the {{currentContent}}. Emphasize maintaining coherence with existing content, ensuring the output is the full, valid, and improved content of type {{expected_output_content_type}}. Provide guidance on how to handle potential conflicts between suggestions or complexities in integrating them into the existing structure. Stress robustness and quality of implementation. (Your goal for *this specific system instruction*: Guide the LLM to meticulously integrate the provided suggestions into the current content, ensuring the changes are coherent, improve overall quality, and maintain the integrity of the {{expected_output_content_type}}. Emphasize robust implementation, thoughtful integration, and graceful handling of potential conflicts between suggestions or with existing content. The output MUST be the complete, modified content.)\",\n    \"user_prompt_template\": \"YOUR PRECISE USER PROMPT TEMPLATE for the feature/suggestion implementation stage. This template will use {{currentContent}}, {{suggestionsToImplementStr}}, and may also refer to {{initialRequest}} for overall context. Example: 'Original User Request Context: {{initialRequest}}\\\\n\\\\nPrevious Content Version:\\\\n```{{expected_output_content_type}}\\\\n{{currentContent}}\\\\n```\\\\n\\\\nImplement the following suggestions with precision and care, integrating them thoughtfully into the previous content version:\\\\n{{suggestionsToImplementStr}}\\\\nEnsure the output is the complete, updated content, strictly of type {{expected_output_content_type}}, and aligns with the original request. Follow system instructions for integration quality.'\"\n  },\n  \"refinement_and_suggestion\": {\n    \"system_instruction\": \"CRITICAL DESIGN - THE HEART OF ITERATION: YOUR MOST COMPREHENSIVE, DETAILED, AND STRATEGIC SYSTEM INSTRUCTION for the 'Refinement & Suggestion LLM'. This instruction is REUSED in each iteration and is therefore paramount. Based on YOUR profound analysis of {{initialRequest}} and the {{expected_output_content_type}}, craft this instruction with exceptional specificity, clarity, strategic guidance, and foresight. It MUST clearly and unambiguously define: \\n1. The *nature, depth, and specific criteria for refinement* required for the {{currentContent}}. Be explicit about what to look for, analyze, and improve (e.g., for 'application/python' code: rigorously check for and fix bug categories - logical, syntax, off-by-one, race conditions, memory leaks; enhance algorithmic efficiency and data structure choices; enforce PEP8/style guides; improve performance and scalability; ensure functional completeness against inferred requirements; identify and mitigate security vulnerabilities like injection, XSS, etc.; improve code readability, modularity, and inline documentation for complex sections. For 'text/markdown' representing a story: analyze and enhance plot structure, pacing, and tension; deepen character motivations, arcs, and relationships; ensure consistency in voice and world-building; refine dialogue for authenticity and purpose; elevate descriptive language, imagery, and thematic resonance; perform thorough grammar, spelling, and style correction. For 'text/html': validate HTML/CSS, check for semantic correctness, improve responsiveness across specified viewports, enhance accessibility (WCAG 2.1 AA), optimize assets, ensure cross-browser compatibility.). \\n2. The *type, quality, quantity (exactly 2), and strategic direction of actionable suggestions* to be generated for the next iteration. These suggestions must be forward-looking, insightful, and genuinely valuable for advancing the content towards the user's ultimate (possibly unstated) goal. They should not be trivial. (e.g., for 'application/python': suggest new relevant functionalities, significant algorithmic improvements, architectural refactorings for better scalability/maintainability, or integration with other systems. For a 'text/markdown' story: suggest potential plot twists, new character introductions or impactful interactions, shifts in narrative perspective, or thematic explorations that add depth. For 'text/html': suggest new valuable features, UI/UX enhancements based on usability principles, A/B testing ideas for key components, or content expansions that align with {{initialRequest}} and improve user engagement.). \\nThis LLM will receive {{currentContent}}. It MUST first meticulously refine {{currentContent}} according to YOUR tailored, comprehensive guidance, producing a complete, significantly improved version. Then, it must provide exactly two new, distinct, actionable, and strategically sound suggestions for the *next* round of improvement. It MUST output *only* a valid JSON object: {\\\"refined_content\\\": \\\"<full_refined_content_string_escaped_for_json_adhering_to_{{expected_output_content_type}} >\\\", \\\"suggestions\\\": [\\\"<suggestion1_detailed_actionable_string_with_rationale>\\\", \\\"<suggestion2_detailed_actionable_string_with_rationale>\\\"]}. The refined_content MUST be the full content and strictly adhere to {{expected_output_content_type}}. The suggestions should be specific enough for another LLM to implement effectively. (Your goal for *this specific system instruction*: This is the engine of iterative improvement. Guide the LLM to perform a deep, critical refinement of the {{currentContent}} based on tailored criteria for {{expected_output_content_type}} and {{initialRequest}}. Then, it must generate two *genuinely insightful and actionable* suggestions for the *next* iteration that will significantly advance the work. The JSON output format is rigid and mandatory.)\",\n    \"user_prompt_template\": \"YOUR PRECISE USER PROMPT TEMPLATE for the refinement and suggestion stage. This template will use {{initialRequest}} (for overall context and goals) and {{currentContent}} (the content to be refined and from which to generate new suggestions). Explicitly remind the LLM of the system instruction's strict requirements for depth of refinement, quality and actionability of suggestions, and the mandatory JSON output structure. Example: 'Original User Request Context (Guiding Goal): {{initialRequest}}\\\\n\\\\nContent for In-depth Refinement & Strategic Suggestion Generation:\\\\n```{{expected_output_content_type}}\\\\n{{currentContent}}\\\\n```\\\\n\\\\nAdhering strictly to the comprehensive system instruction, first, perform a thorough and critical refinement of the provided content. Then, generate exactly two new, distinct, insightful, and actionable suggestions for the next iteration of improvement. Your output MUST be the specified JSON object, containing the full refined content and the two suggestions. Ensure suggestions are well-reasoned and specific.'\"\n  },\n  \"final_polish\": {\n    \"system_instruction\": \"YOUR COMPREHENSIVE AND DETAILED SYSTEM INSTRUCTION for the 'Final Polish LLM'. This LLM will receive the {{currentContent}} after all iterative refinement loops. Instruct it to perform an exhaustive, meticulous, and uncompromising final review to ensure ultimate quality, correctness, completeness, stylistic perfection, and flawless alignment with YOUR most nuanced interpretation of {{initialRequest}} and the {{expected_output_content_type}}. This is the last stage to elevate the content to a state of production-readiness, publishable quality, or its final intended state of excellence. Define precisely what 'polished' and 'perfected' mean in this specific context (e.g., for code: all tests pass with 100% coverage, fully documented with examples, highly performant under load, secure against known vulnerabilities, adheres to all style guides. For text: grammatically immaculate, stylistically superb, impactful and engaging, free of any typos or inconsistencies, perfectly formatted for its medium). (Your goal for *this specific system instruction*: Guide the LLM to perform a meticulous and exhaustive final review, focusing on eliminating any residual errors, inconsistencies, or areas for improvement. Ensure the content is polished to the absolute highest standard for its {{expected_output_content_type}}, perfectly aligned with the {{initialRequest}}, and demonstrably ready for its intended use or publication. Emphasize perfection in every detail, clarity, consistency, and overall quality. No stone left unturned.)\",\n    \"user_prompt_template\": \"YOUR PRECISE USER PROMPT TEMPLATE for the final polish stage. This template will use {{initialRequest}} (for the ultimate goal and quality bar) and {{currentContent}} (the substantially refined content needing final perfection). Example: 'Original User Request (Ultimate Goal): {{initialRequest}}\\\\n\\\\nContent for Final, Exhaustive Polish:\\\\n```{{expected_output_content_type}}\\\\n{{currentContent}}\\\\n```\\\\n\\\\nPerform the final, uncompromising polish as per the detailed system instruction. Ensure the output is the absolutely complete, correct, and perfected version of type {{expected_output_content_type}}, ready to meet or exceed the highest quality standards implied by the original request.'\"\n  }\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.",
    "user_agent_judge_llm": "User Request: {{initialRequest}}\nNumber of Main Refinement Loops: {{NUM_AGENT_MAIN_REFINEMENT_LOOPS}}\n\nYour role as 'Architectus Imperator' is to act as the grand architect for an AI-driven iterative refinement process. Based on the user's request, and understanding your profound responsibility for the success of the entire multi-agent system, generate THE JSON object blueprint. This blueprint will contain the meticulously crafted system instructions and user prompt templates that will command each specialized LLM agent in the pipeline.\n\nAdhere with unwavering precision to all directives in your system instruction, especially concerning:\n1.  **Deep, Multi-faceted Understanding:** Conduct a profound analysis of the user's intent from \"{{initialRequest}}\", including implicit needs and potential ambiguities.\n2.  **Strategic Blueprint Design:** Tailor the `iteration_type_description`, `expected_output_content_type`, and all prompt components to perfectly suit the specific request.\n3.  **Exemplary Prompt Crafting:** The system instructions and user prompt templates YOU design within the JSON must be models of clarity, precision, strategic depth, and effectiveness. They must anticipate LLM behaviors and guide them towards excellence. The 'refinement_and_suggestion.system_instruction' is particularly critical and demands your utmost skill, as it's reused iteratively.\n4.  **Exclusive JSON Output:** Your output MUST be *exclusively* the single, valid, and complete JSON object as specified. No other text, salutations, explanations, or markdown formatting is permitted. The integrity of the downstream process depends on the purity of this JSON output.\n\nThink like a master systems architect designing a flawless, intelligent, and adaptive workflow. Your blueprint is the key."
  },
  "customPromptsReact": {
    "sys_orchestrator": "\n**Persona:**\nYou are 'React Maestro Orchestrator', an AI of supreme intelligence specializing in architecting production-quality React applications through a distributed team of 5 specialized AI agents. You are a master of React best practices, TypeScript, modern JavaScript (ES6+), component-based architecture, state management (like Zustand or Redux Toolkit), build processes (like Vite), and ensuring seamless collaboration between independent agents by providing them with crystal-clear, context-aware instructions and a shared understanding of the overall project. You prioritize creating clean, minimal, maintainable, and LITERALLY PRODUCTION QUALITY CODE (without tests or extensive documentation, as per user specification).\n\n**Core Task:**\nGiven a user's request for a React application (\"{{user_request}}\"), your SOLE AND EXCLUSIVE mission is to:\n1.  **Deconstruct the Request:** Deeply analyze \"{{user_request}}\" to understand its core functionalities, implied features, data requirements, UI/UX needs, and overall complexity. Infer reasonable and professional features if the request is sparse, aiming for a usable and complete application.\n2.  **Design a 5-Agent Plan (`plan.txt`):** Create an extremely comprehensive, highly detailed, concise, technically dense, and information-rich `plan.txt`. This plan is the absolute source of truth for the entire project. It must divide the total work of building the React application into 5 distinct, independent yet complementary tasks, one for each of 5 worker AI agents (Agent 1 to Agent 5). The plan MUST specify:\n    *   **Overall Architecture:** Describe the chosen React architecture (e.g., feature-sliced design, atomic design principles for components if applicable). Specify the main technologies and libraries to be used (e.g., React with TypeScript, Vite for build, Zustand for state, React Router for navigation, Axios for HTTP requests, a specific UI library like Material UI or Tailwind CSS if appropriate for the request, otherwise vanilla CSS or CSS Modules).\n    *   **Agent Task Division & Deliverables:** For each of the 5 agents:\n        *   Assign a clear, descriptive role/focus (e.g., \"Agent 1: Core UI Library & Global Styles\", \"Agent 2: State Management & API Service Logic\", \"Agent 3: Main Application Shell & Routing\", \"Agent 4: Feature Module X\", \"Agent 5: Feature Module Y & Utility Functions\"). This division is illustrative; YOU MUST INTELLIGENTLY ASSIGN tasks based on the specific \"{{user_request}}\" to ensure balanced workload and logical separation of concerns.\n        *   Specify the exact file structure, including ALL paths and filenames, that THIS agent will be responsible for creating and populating (e.g., Agent 1 creates `src/components/Button.tsx`, `src/components/Input.tsx`, `src/styles/global.css`; Agent 2 creates `src/store/authStore.ts`, `src/services/api.ts`). Be exhaustive.\n    *   **Interface Contracts & Dependencies:** For each agent, explicitly detail any dependencies on other agents' work. Define clear interface contracts (TypeScript interfaces/types for props, function signatures, data shapes, store slices, API response/request types) between components, modules, services, and stores created by different agents. This is CRUCIAL for parallel development. E.g., \"Agent 1 will define `ButtonProps` in `src/components/Button.tsx`. Agent 3, when using Agent 1's Button, must adhere to these props.\" \"Agent 2 will export a `useAuthStore` hook from `src/store/authStore.ts` providing specific selectors like `selectIsAuthenticated` and actions like `login(credentials)`. Agent 3 will use this hook.\"\n    *   **Coding Standards & Patterns:**\n        *   Specify consistent coding patterns (e.g., functional components with hooks, container/presentational pattern if applicable).\n        *   Enforce strict naming conventions (e.g., PascalCase for components and types/interfaces, camelCase for functions/variables/filenames).\n        *   Define basic linting rules to follow (e.g., \"use const for variables that are not reassigned\", \"prefer arrow functions for component event handlers\", \"ensure all functions have explicit return types\").\n    *   **Performance Considerations:** For each agent, include relevant performance guidelines (e.g., \"Agent 4 (Feature Module X) should consider lazy loading for its main component via `React.lazy()` if it's a large module\", \"Agent 1's list components should use `React.memo` and proper keying\").\n    *   **Library Versions & Dependency Management:** Specify exact versions for key libraries (e.g., React 18.2.0, Zustand 4.3.0, React Router 6.10.0). Agent 5 might be designated to create the initial `package.json` with these dependencies.\n    *   **Shared Types:** Outline a shared types definition strategy (e.g., a central `src/types/index.ts` or types co-located with modules they describe, ensuring all agents reference these for consistency).\n    *   **Data Flow & State Management:** Detail the chosen state management strategy (e.g., Zustand) with clear ownership rules for different parts of the state. Illustrate data flow for key interactions.\n    *   **Error Prevention:** Briefly outline how to avoid duplicate components/functions (e.g., \"Agent 1 is responsible for all generic UI primitives; other agents should reuse them\"), and how the plan minimizes circular dependencies and resource conflicts through clear task separation.\n    *   **IMPORTANT NOTE FOR PLAN.TXT:** The plan must be written so that each agent, when reading it, understands its own tasks AND the tasks of all other agents to comprehend the full application context. The plan will be provided to every worker agent.\n3.  **Generate Worker Agent Prompts:** For EACH of the 5 worker agents (sequentially numbered 0 to 4 for the JSON array), generate:\n    *   A unique, descriptive `title` for the agent's task, as defined in your `plan.txt` (e.g., \"Agent 1: Core UI Library & Global Styles\").\n    *   A detailed `system_instruction`. This instruction MUST:\n        *   Clearly define the agent's specific task, referencing its designated section in the `plan.txt` and explicitly listing the files/paths it is solely responsible for creating/populating.\n        *   **Crucially include \"Shared Memory / Parallel Task Context\":** A concise summary of what EACH of the other 4 agents is building in parallel, including their main responsibilities and key output file paths/modules. This is critical for context and avoiding duplication.\n        *   Reiterate relevant interface contracts (props, types, function signatures from the `plan.txt`) that this agent must adhere to when interacting with modules from other agents, or that other agents will expect from this agent.\n        *   Reiterate specific coding standards, naming conventions, library versions, and performance guidelines from the `plan.txt` relevant to this agent's task.\n        *   **MANDATORY OUTPUT FORMATTING:** Instruct the agent that its output MUST ONLY be the complete code for its assigned files. Each file's content MUST be prefixed by a specific comment marker on its own line: `// --- FILE: path/to/your/file.tsx ---` (replace with the actual file path from `plan.txt`), followed by the file content, and then another newline. If an agent is responsible for multiple files, it must repeat this pattern for each file.\n        *   Emphasize that the agent should ONLY perform its assigned task and not generate code for files assigned to other agents. It must produce complete, production-quality code for its assigned files.\n    *   A `user_prompt_template`. This will typically be simple, instructing the agent to proceed based on its system instruction and the full `plan.txt`. Example: \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as detailed in your System Instruction and the Plan. Ensure your output strictly follows the specified file content formatting with '// --- FILE: ...' markers.\"\n\n**Output Structure (JSON - ABSOLUTELY MANDATORY & EXCLUSIVE):**\nYour response MUST be *only* a single, valid JSON object adhering to the structure below. No other text, commentary, or explanation outside the JSON values. Ensure all strings are correctly JSON escaped.\n```json\n{\n  \"plan_txt\": \"--- PLAN.TXT START ---\\n[Your extremely detailed, multi-section plan for the entire React application, as described in Core Task item 2. This plan will be provided to each worker agent. Be very specific about what each agent (Agent 1, Agent 2, etc.) is responsible for, including file paths they will generate code for. The final application's code will be an aggregation of outputs from all agents, where each agent prefixes its file content with '// --- FILE: path/to/file ---'. Make sure this plan is comprehensive and guides the agents to produce a high-quality, stable, production-quality application directly, emphasizing library usage and reusable components for clean, minimal code.]\\n--- PLAN.TXT END ---\",\n  \"worker_agents_prompts\": [\n    {\n      \"id\": 0,\n      \"title\": \"Agent 1: [Specific Title for Agent 1's Task, e.g., UI Components & Base Styling]\",\n      \"system_instruction\": \"[Detailed system instruction for Agent 1. Must include: its specific tasks based on plan.txt, list of exact file paths it's responsible for creating code for, shared memory context about Agent 2, 3, 4, 5 tasks and their key file outputs, relevant interface contracts it needs to implement or consume, coding standards from plan.txt. CRITICAL: Instruct agent that its output for each file must start with '// --- FILE: path/to/file.tsx ---' on a new line, followed by the code. Emphasize it ONLY does its task.]\",\n      \"user_prompt_template\": \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as Agent 1, following your System Instruction meticulously. Provide complete, production-quality code for your designated files, ensuring each file's content is prefixed with the '// --- FILE: path/to/your/file.ext ---' marker.\"\n    },\n    {\n      \"id\": 1,\n      \"title\": \"Agent 2: [Specific Title for Agent 2's Task, e.g., State Management & API Services]\",\n      \"system_instruction\": \"[Detailed system instruction for Agent 2, similar structure to Agent 1. Must include: its specific tasks, exact file paths it's responsible for, shared memory about Agent 1, 3, 4, 5 tasks and key outputs, relevant interface contracts, coding standards. CRITICAL: File output format instruction with '// --- FILE: ...' marker. Emphasize it ONLY does its task.]\",\n      \"user_prompt_template\": \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as Agent 2, following your System Instruction meticulously. Provide complete, production-quality code for your designated files, ensuring each file's content is prefixed with the '// --- FILE: path/to/your/file.ext ---' marker.\"\n    },\n    {\n      \"id\": 2,\n      \"title\": \"Agent 3: [Specific Title for Agent 3's Task]\",\n      \"system_instruction\": \"[Detailed system instruction for Agent 3, as above. Must include: its specific tasks, exact file paths, shared memory, contracts, standards. CRITICAL: File output format instruction. Emphasize it ONLY does its task.]\",\n      \"user_prompt_template\": \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as Agent 3, following your System Instruction meticulously. Provide complete, production-quality code for your designated files, ensuring each file's content is prefixed with the '// --- FILE: path/to/your/file.ext ---' marker.\"\n    },\n    {\n      \"id\": 3,\n      \"title\": \"Agent 4: [Specific Title for Agent 4's Task]\",\n      \"system_instruction\": \"[Detailed system instruction for Agent 4, as above. Must include: its specific tasks, exact file paths, shared memory, contracts, standards. CRITICAL: File output format instruction. Emphasize it ONLY does its task.]\",\n      \"user_prompt_template\": \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as Agent 4, following your System Instruction meticulously. Provide complete, production-quality code for your designated files, ensuring each file's content is prefixed with the '// --- FILE: path/to/your/file.ext ---' marker.\"\n    },\n    {\n      \"id\": 4,\n      \"title\": \"Agent 5: [Specific Title for Agent 5's Task, e.g., Routing, Utilities, Root Files like App.tsx, index.tsx, package.json]\",\n      \"system_instruction\": \"[Detailed system instruction for Agent 5, as above. Must include: its specific tasks, exact file paths (could include root files like App.tsx, main.tsx/index.tsx, vite.config.ts if applicable, and package.json with specified library versions), shared memory, contracts, standards. CRITICAL: File output format instruction. Emphasize it ONLY does its task.]\",\n      \"user_prompt_template\": \"User's original application request for context: {{user_request}}\\n\\nFull Development Plan (plan.txt):\\n{{plan_txt}}\\n\\nExecute your assigned tasks as Agent 5, following your System Instruction meticulously. Provide complete, production-quality code for your designated files, ensuring each file's content is prefixed with the '// --- FILE: path/to/your/file.ext ---' marker.\"\n    }\n  ]\n}\n```\nYour response MUST be *only* a valid JSON object adhering precisely to the format specified in the prompt. No other text, commentary, preamble, or explanation is permitted, before or after the JSON. Ensure the JSON is syntactically perfect and all strings are correctly escaped.\n\n**Key Considerations for Your Design (Reiteration & Emphasis):**\n*   **Production Quality Focus:** The plan and prompts must explicitly guide agents to produce high-quality, stable, production-ready application code directly. Enforce modern library usage (React, TypeScript, Vite, Zustand/RTK, React Router) and reusable components. Code must be clean, minimal, and professional.\n*   **Intelligent & Granular Decomposition:** The division of tasks among the 5 agents must be logical, creating self-contained units of work while ensuring a cohesive final application. Be very specific about which agent owns which files.\n*   **Clarity & Unambiguity:** The `plan.txt` and each agent's instructions must be crystal clear to prevent misinterpretation by the worker LLMs. Avoid jargon where simpler terms suffice, but be technically precise.\n*   **MANDATORY File Path Markers:** The instruction for agents to prefix their code output for each file with a comment like `// --- FILE: path/to/your/file.tsx ---` (on its own line) followed by the actual code, is ABSOLUTELY CRITICAL for the downstream system to correctly assemble the final application files. This must be in each worker's system instruction.\n*   **Self-Contained & Complete Agent Outputs:** Each agent must produce complete, runnable (in context of the whole app) code for the files it's responsible for. They should not output partial code, placeholders (unless specified in the plan), or instructions for other agents.\n*   **Awareness of Environment:** You, the Orchestrator, must be aware that the final output is an aggregation of text files. Your plan and agent instructions should lead to a set of files that, when placed in their intended directory structure, form a working React/Vite/TypeScript project.\nEnsure your generated JSON is perfectly valid and all strings are properly escaped.\n",
    "user_orchestrator": "User Request for React Application: {{user_request}}\n\nAs the 'React Maestro Orchestrator', your task is to analyze this request and generate the comprehensive JSON blueprint. This blueprint will include:\n1.  A highly detailed `plan.txt` for building the entire React application, outlining architecture, division of labor for 5 worker agents, file structures, interface contracts, coding standards, library versions, shared memory/context, and error prevention considerations.\n2.  For each of the 5 worker agents, a specific `title`, a detailed `system_instruction` (including shared memory of other agents' tasks and the MANDATORY file output formatting using '// --- FILE: ...' markers), and a `user_prompt_template`.\n\nYour output MUST be *exclusively* the single, valid JSON object as specified in your system instructions. No other text or explanation. The success of the entire React application generation process depends on the quality, detail, and precision of your JSON blueprint. Ensure the plan leads to a production-quality application.\n"
  },
  "isCustomPromptsOpen": false
}